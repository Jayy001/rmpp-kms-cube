.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "CORE 3"
.TH CORE 3 2024-02-27 "perl v5.40.0" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
CORE \- Namespace for Perl's core routines
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 3
\&    BEGIN {
\&        *CORE::GLOBAL::hex = sub { 1; };
\&    }
\&
\&    print hex("0x50"),"\en";                     # prints 1
\&    print CORE::hex("0x50"),"\en";               # prints 80
\&    CORE::say "yes";                            # prints yes
\&
\&    BEGIN { *shove = \e&CORE::push; }
\&    shove @array, 1,2,3;                        # pushes on to @array
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
The \f(CW\*(C`CORE\*(C'\fR namespace gives access to the original built-in functions of
Perl.  The \f(CW\*(C`CORE\*(C'\fR package is built into
Perl, and therefore you do not need to use or
require a hypothetical "CORE" module prior to accessing routines in this
namespace.
.PP
A list of the built-in functions in Perl can be found in perlfunc.
.PP
For all Perl keywords, a \f(CW\*(C`CORE::\*(C'\fR prefix will force the built-in function
to be used, even if it has been overridden or would normally require the
feature pragma.  Despite appearances, this has nothing to do with the
CORE package, but is part of Perl's syntax.
.PP
For many Perl functions, the CORE package contains real subroutines.  This
feature is new in Perl 5.16.  You can take references to these and make
aliases.  However, some can only be called as barewords; i.e., you cannot
use ampersand syntax (\f(CW&foo\fR) or call them through references.  See the
\&\f(CW\*(C`shove\*(C'\fR example above.  These subroutines exist for all keywords except the following:
.PP
\&\f(CW\*(C`_\|_DATA_\|_\*(C'\fR, \f(CW\*(C`_\|_END_\|_\*(C'\fR, \f(CW\*(C`and\*(C'\fR, \f(CW\*(C`cmp\*(C'\fR, \f(CW\*(C`default\*(C'\fR, \f(CW\*(C`do\*(C'\fR, \f(CW\*(C`dump\*(C'\fR,
\&\f(CW\*(C`else\*(C'\fR, \f(CW\*(C`elsif\*(C'\fR, \f(CW\*(C`eq\*(C'\fR, \f(CW\*(C`eval\*(C'\fR, \f(CW\*(C`for\*(C'\fR, \f(CW\*(C`foreach\*(C'\fR, \f(CW\*(C`format\*(C'\fR, \f(CW\*(C`ge\*(C'\fR,
\&\f(CW\*(C`given\*(C'\fR, \f(CW\*(C`goto\*(C'\fR, \f(CW\*(C`grep\*(C'\fR, \f(CW\*(C`gt\*(C'\fR, \f(CW\*(C`if\*(C'\fR, \f(CW\*(C`last\*(C'\fR, \f(CW\*(C`le\*(C'\fR, \f(CW\*(C`local\*(C'\fR, \f(CW\*(C`lt\*(C'\fR,
\&\f(CW\*(C`m\*(C'\fR, \f(CW\*(C`map\*(C'\fR, \f(CW\*(C`my\*(C'\fR, \f(CW\*(C`ne\*(C'\fR, \f(CW\*(C`next\*(C'\fR, \f(CW\*(C`no\*(C'\fR, \f(CW\*(C`or\*(C'\fR, \f(CW\*(C`our\*(C'\fR, \f(CW\*(C`package\*(C'\fR,
\&\f(CW\*(C`print\*(C'\fR, \f(CW\*(C`printf\*(C'\fR, \f(CW\*(C`q\*(C'\fR, \f(CW\*(C`qq\*(C'\fR, \f(CW\*(C`qr\*(C'\fR, \f(CW\*(C`qw\*(C'\fR, \f(CW\*(C`qx\*(C'\fR, \f(CW\*(C`redo\*(C'\fR, \f(CW\*(C`require\*(C'\fR,
\&\f(CW\*(C`return\*(C'\fR, \f(CW\*(C`s\*(C'\fR, \f(CW\*(C`say\*(C'\fR, \f(CW\*(C`sort\*(C'\fR, \f(CW\*(C`state\*(C'\fR, \f(CW\*(C`sub\*(C'\fR, \f(CW\*(C`tr\*(C'\fR, \f(CW\*(C`unless\*(C'\fR,
\&\f(CW\*(C`until\*(C'\fR, \f(CW\*(C`use\*(C'\fR, \f(CW\*(C`when\*(C'\fR, \f(CW\*(C`while\*(C'\fR, \f(CW\*(C`x\*(C'\fR, \f(CW\*(C`xor\*(C'\fR, \f(CW\*(C`y\*(C'\fR
.PP
Calling with
ampersand syntax and through references does not work for the following
functions, as they have special syntax that cannot always be translated
into a simple list (e.g., \f(CW\*(C`eof\*(C'\fR vs \f(CWeof()\fR):
.PP
\&\f(CW\*(C`chdir\*(C'\fR, \f(CW\*(C`chomp\*(C'\fR, \f(CW\*(C`chop\*(C'\fR, \f(CW\*(C`defined\*(C'\fR, \f(CW\*(C`delete\*(C'\fR, \f(CW\*(C`eof\*(C'\fR, \f(CW\*(C`exec\*(C'\fR,
\&\f(CW\*(C`exists\*(C'\fR, \f(CW\*(C`lstat\*(C'\fR, \f(CW\*(C`split\*(C'\fR, \f(CW\*(C`stat\*(C'\fR, \f(CW\*(C`system\*(C'\fR, \f(CW\*(C`truncate\*(C'\fR, \f(CW\*(C`unlink\*(C'\fR
.SH "OVERRIDING CORE FUNCTIONS"
.IX Header "OVERRIDING CORE FUNCTIONS"
To override a Perl built-in routine with your own version, you need to
import it at compile-time.  This can be conveniently achieved with the
\&\f(CW\*(C`subs\*(C'\fR pragma.  This will affect only the package in which you've imported
the said subroutine:
.PP
.Vb 3
\&    use subs \*(Aqchdir\*(Aq;
\&    sub chdir { ... }
\&    chdir $somewhere;
.Ve
.PP
To override a built-in globally (that is, in all namespaces), you need to
import your function into the \f(CW\*(C`CORE::GLOBAL\*(C'\fR pseudo-namespace at compile
time:
.PP
.Vb 5
\&    BEGIN {
\&        *CORE::GLOBAL::hex = sub {
\&            # ... your code here
\&        };
\&    }
.Ve
.PP
The new routine will be called whenever a built-in function is called
without a qualifying package:
.PP
.Vb 1
\&    print hex("0x50"),"\en";                     # prints 1
.Ve
.PP
In both cases, if you want access to the original, unaltered routine, use
the \f(CW\*(C`CORE::\*(C'\fR prefix:
.PP
.Vb 1
\&    print CORE::hex("0x50"),"\en";               # prints 80
.Ve
.SH AUTHOR
.IX Header "AUTHOR"
This documentation provided by Tels <nospam\-abuse@bloodgate.com> 2007.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perlsub, perlfunc.
