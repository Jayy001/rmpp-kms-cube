.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "overloading 3"
.TH overloading 3 2024-02-27 "perl v5.40.0" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
overloading \- perl pragma to lexically control overloading
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 4
\&    {
\&        no overloading;
\&        my $str = "$object"; # doesn\*(Aqt call stringification overload
\&    }
\&
\&    # it\*(Aqs lexical, so this stringifies:
\&    warn "$object";
\&
\&    # it can be enabled per op
\&    no overloading qw("");
\&    warn "$object";
\&
\&    # and also reenabled
\&    use overloading;
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This pragma allows you to lexically disable or enable overloading.
.ie n .IP """no overloading""" 6
.el .IP "\f(CWno overloading\fR" 6
.IX Item "no overloading"
Disables overloading entirely in the current lexical scope.
.ie n .IP """no overloading @ops""" 6
.el .IP "\f(CWno overloading @ops\fR" 6
.IX Item "no overloading @ops"
Disables only specific overloads in the current lexical scope.
.ie n .IP """use overloading""" 6
.el .IP "\f(CWuse overloading\fR" 6
.IX Item "use overloading"
Reenables overloading in the current lexical scope.
.ie n .IP """use overloading @ops""" 6
.el .IP "\f(CWuse overloading @ops\fR" 6
.IX Item "use overloading @ops"
Reenables overloading only for specific ops in the current lexical scope.
