.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "base 3"
.TH base 3 2024-02-27 "perl v5.40.0" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
base \- Establish an ISA relationship with base classes at compile time
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\&    package Baz;
\&    use base qw(Foo Bar);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Unless you are using the \f(CW\*(C`fields\*(C'\fR pragma, consider this module discouraged
in favor of the lighter-weight \f(CW\*(C`parent\*(C'\fR.
.PP
Allows you to both load one or more modules, while setting up inheritance from
those modules at the same time.  Roughly similar in effect to
.PP
.Vb 6
\&    package Baz;
\&    BEGIN {
\&        require Foo;
\&        require Bar;
\&        push @ISA, qw(Foo Bar);
\&    }
.Ve
.PP
When \f(CW\*(C`base\*(C'\fR tries to \f(CW\*(C`require\*(C'\fR a module, it will not die if it cannot find
the module's file, but will die on any other error.  After all this, should
your base class be empty, containing no symbols, \f(CW\*(C`base\*(C'\fR will die. This is
useful for inheriting from classes in the same file as yourself but where
the filename does not match the base module name, like so:
.PP
.Vb 3
\&        # in Bar.pm
\&        package Foo;
\&        sub exclaim { "I can have such a thing?!" }
\&
\&        package Bar;
\&        use base "Foo";
.Ve
.PP
There is no \fIFoo.pm\fR, but because \f(CW\*(C`Foo\*(C'\fR defines a symbol (the \f(CW\*(C`exclaim\*(C'\fR
subroutine), \f(CW\*(C`base\*(C'\fR will not die when the \f(CW\*(C`require\*(C'\fR fails to load \fIFoo.pm\fR.
.PP
\&\f(CW\*(C`base\*(C'\fR will also initialize the fields if one of the base classes has it.
Multiple inheritance of fields is \fBNOT\fR supported, if two or more base classes
each have inheritable fields the 'base' pragma will croak. See fields
for a description of this feature.
.PP
The base class' \f(CW\*(C`import\*(C'\fR method is \fBnot\fR called.
.SH DIAGNOSTICS
.IX Header "DIAGNOSTICS"
.IP "Base class package ""%s"" is empty." 4
.IX Item "Base class package ""%s"" is empty."
base.pm was unable to require the base package, because it was not
found in your path.
.IP "Class 'Foo' tried to inherit from itself" 4
.IX Item "Class 'Foo' tried to inherit from itself"
Attempting to inherit from yourself generates a warning.
.Sp
.Vb 2
\&    package Foo;
\&    use base \*(AqFoo\*(Aq;
.Ve
.SH HISTORY
.IX Header "HISTORY"
This module was introduced with Perl 5.004_04.
.SH CAVEATS
.IX Header "CAVEATS"
Due to the limitations of the implementation, you must use
base \fIbefore\fR you declare any of your own fields.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
fields
