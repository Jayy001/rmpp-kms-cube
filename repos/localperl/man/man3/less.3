.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "less 3"
.TH less 3 2024-02-27 "perl v5.40.0" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
less \- perl pragma to request less of something
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    use less \*(AqCPU\*(Aq;
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This is a user-pragma. If you're very lucky some code you're using
will know that you asked for less CPU usage or ram or fat or... we
just can't know. Consult your documentation on everything you're
currently using.
.PP
For general suggestions, try requesting \f(CW\*(C`CPU\*(C'\fR or \f(CW\*(C`memory\*(C'\fR.
.PP
.Vb 3
\&    use less \*(Aqmemory\*(Aq;
\&    use less \*(AqCPU\*(Aq;
\&    use less \*(Aqfat\*(Aq;
.Ve
.PP
If you ask for nothing in particular, you'll be asking for \f(CWless
\&\*(Aqplease\*(Aq\fR.
.PP
.Vb 1
\&    use less \*(Aqplease\*(Aq;
.Ve
.SH "FOR MODULE AUTHORS"
.IX Header "FOR MODULE AUTHORS"
less has been in the core as a "joke" module for ages now and it
hasn't had any real way to communicating any information to
anything. Thanks to Nicholas Clark we have user pragmas (see
perlpragma) and now \f(CW\*(C`less\*(C'\fR can do something.
.PP
You can probably expect your users to be able to guess that they can
request less CPU or memory or just "less" overall.
.PP
If the user didn't specify anything, it's interpreted as having used
the \f(CW\*(C`please\*(C'\fR tag. It's up to you to make this useful.
.PP
.Vb 3
\&  # equivalent
\&  use less;
\&  use less \*(Aqplease\*(Aq;
.Ve
.ie n .SS """BOOLEAN = less\->of( FEATURE )"""
.el .SS "\f(CWBOOLEAN = less\->of( FEATURE )\fP"
.IX Subsection "BOOLEAN = less->of( FEATURE )"
The class method \f(CW\*(C`less\->of( NAME )\*(C'\fR returns a boolean to tell you
whether your user requested less of something.
.PP
.Vb 4
\&  if ( less\->of( \*(AqCPU\*(Aq ) ) {
\&      ...
\&  }
\&  elsif ( less\->of( \*(Aqmemory\*(Aq ) ) {
\&
\&  }
.Ve
.ie n .SS """FEATURES = less\->of()"""
.el .SS "\f(CWFEATURES = less\->of()\fP"
.IX Subsection "FEATURES = less->of()"
If you don't ask for any feature, you get the list of features that
the user requested you to be nice to. This has the nice side effect
that if you don't respect anything in particular then you can just ask
for it and use it like a boolean.
.PP
.Vb 6
\&  if ( less\->of ) {
\&      ...
\&  }
\&  else {
\&      ...
\&  }
.Ve
.SH CAVEATS
.IX Header "CAVEATS"
.IP "This probably does nothing." 4
.IX Item "This probably does nothing."
.PD 0
.IP "This works only on 5.10+" 4
.IX Item "This works only on 5.10+"
.PD
At least it's backwards compatible in not doing much.
