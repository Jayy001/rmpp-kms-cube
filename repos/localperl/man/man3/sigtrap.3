.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "sigtrap 3"
.TH sigtrap 3 2024-02-27 "perl v5.40.0" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
sigtrap \- Perl pragma to enable simple signal handling
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 11
\&    use sigtrap;
\&    use sigtrap qw(stack\-trace old\-interface\-signals);  # equivalent
\&    use sigtrap qw(BUS SEGV PIPE ABRT);
\&    use sigtrap qw(die INT QUIT);
\&    use sigtrap qw(die normal\-signals);
\&    use sigtrap qw(die untrapped normal\-signals);
\&    use sigtrap qw(die untrapped normal\-signals
\&                    stack\-trace any error\-signals);
\&    use sigtrap \*(Aqhandler\*(Aq => \e&my_handler, \*(Aqnormal\-signals\*(Aq;
\&    use sigtrap qw(handler my_handler normal\-signals
\&                    stack\-trace error\-signals);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
The \fBsigtrap\fR pragma is a simple interface to installing signal
handlers.  You can have it install one of two handlers supplied by
\&\fBsigtrap\fR itself (one which provides a Perl stack trace and one which
simply \f(CWdie()\fRs), or alternately you can supply your own handler for it
to install.  It can be told only to install a handler for signals which
are either untrapped or ignored.  It has three lists of signals to
trap, plus you can supply your own list of signals.
.PP
The arguments passed to the \f(CW\*(C`use\*(C'\fR statement which invokes \fBsigtrap\fR
are processed in order.  When a signal name or the name of one of
\&\fBsigtrap\fR's signal lists is encountered a handler is immediately
installed, when an option is encountered it affects subsequently
installed handlers.
.SH OPTIONS
.IX Header "OPTIONS"
.SS "SIGNAL HANDLERS"
.IX Subsection "SIGNAL HANDLERS"
These options affect which handler will be used for subsequently
installed signals.
.IP \fBstack-trace\fR 4
.IX Item "stack-trace"
The handler used for subsequently installed signals outputs a Perl stack
trace to STDERR and then tries to dump core.  This is the default signal
handler.
.IP \fBdie\fR 4
.IX Item "die"
The handler used for subsequently installed signals calls \f(CW\*(C`die\*(C'\fR
(actually \f(CW\*(C`croak\*(C'\fR) with a message indicating which signal was caught.
.IP "\fBhandler\fR \fIyour-handler\fR" 4
.IX Item "handler your-handler"
\&\fIyour-handler\fR will be used as the handler for subsequently installed
signals.  \fIyour-handler\fR can be any value which is valid as an
assignment to an element of \f(CW%SIG\fR. See perlvar for examples of
handler functions.
.SS "SIGNAL LISTS"
.IX Subsection "SIGNAL LISTS"
\&\fBsigtrap\fR has a few built-in lists of signals to trap.  They are:
.IP \fBnormal-signals\fR 4
.IX Item "normal-signals"
These are the signals which a program might normally expect to encounter
and which by default cause it to terminate.  They are HUP, INT, PIPE and
TERM.
.IP \fBerror-signals\fR 4
.IX Item "error-signals"
These signals usually indicate a serious problem with the Perl
interpreter or with your script.  They are ABRT, BUS, EMT, FPE, ILL,
QUIT, SEGV, SYS and TRAP.
.IP \fBold-interface-signals\fR 4
.IX Item "old-interface-signals"
These are the signals which were trapped by default by the old
\&\fBsigtrap\fR interface, they are ABRT, BUS, EMT, FPE, ILL, PIPE, QUIT,
SEGV, SYS, TERM, and TRAP.  If no signals or signals lists are passed to
\&\fBsigtrap\fR, this list is used.
.PP
For each of these three lists, the collection of signals set to be
trapped is checked before trapping; if your architecture does not
implement a particular signal, it will not be trapped but rather
silently ignored.
.SS OTHER
.IX Subsection "OTHER"
.IP \fBuntrapped\fR 4
.IX Item "untrapped"
This token tells \fBsigtrap\fR to install handlers only for subsequently
listed signals which aren't already trapped or ignored.
.IP \fBany\fR 4
.IX Item "any"
This token tells \fBsigtrap\fR to install handlers for all subsequently
listed signals.  This is the default behavior.
.IP \fIsignal\fR 4
.IX Item "signal"
Any argument which looks like a signal name (that is,
\&\f(CW\*(C`/^[A\-Z][A\-Z0\-9]*$/\*(C'\fR) indicates that \fBsigtrap\fR should install a
handler for that name.
.IP \fInumber\fR 4
.IX Item "number"
Require that at least version \fInumber\fR of \fBsigtrap\fR is being used.
.SH EXAMPLES
.IX Header "EXAMPLES"
Provide a stack trace for the old-interface-signals:
.PP
.Vb 1
\&    use sigtrap;
.Ve
.PP
Ditto:
.PP
.Vb 1
\&    use sigtrap qw(stack\-trace old\-interface\-signals);
.Ve
.PP
Provide a stack trace on the 4 listed signals only:
.PP
.Vb 1
\&    use sigtrap qw(BUS SEGV PIPE ABRT);
.Ve
.PP
Die on INT or QUIT:
.PP
.Vb 1
\&    use sigtrap qw(die INT QUIT);
.Ve
.PP
Die on HUP, INT, PIPE or TERM:
.PP
.Vb 1
\&    use sigtrap qw(die normal\-signals);
.Ve
.PP
Die on HUP, INT, PIPE or TERM, except don't change the behavior for
signals which are already trapped or ignored:
.PP
.Vb 1
\&    use sigtrap qw(die untrapped normal\-signals);
.Ve
.PP
Die on receipt one of any of the \fBnormal-signals\fR which is currently
\&\fBuntrapped\fR, provide a stack trace on receipt of \fBany\fR of the
\&\fBerror-signals\fR:
.PP
.Vb 2
\&    use sigtrap qw(die untrapped normal\-signals
\&                    stack\-trace any error\-signals);
.Ve
.PP
Install \fBmy_handler()\fR as the handler for the \fBnormal-signals\fR:
.PP
.Vb 1
\&    use sigtrap \*(Aqhandler\*(Aq, \e&my_handler, \*(Aqnormal\-signals\*(Aq;
.Ve
.PP
Install \fBmy_handler()\fR as the handler for the normal-signals, provide a
Perl stack trace on receipt of one of the error-signals:
.PP
.Vb 2
\&    use sigtrap qw(handler my_handler normal\-signals
\&                    stack\-trace error\-signals);
.Ve
