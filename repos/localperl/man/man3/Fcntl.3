.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Fcntl 3"
.TH Fcntl 3 2024-05-15 "perl v5.40.0" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Fcntl \- various flag constants and helper functions from C's fcntl.h
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 3
\&    use Fcntl;
\&    use Fcntl qw(:DEFAULT :flock);
\&    use Fcntl qw(F_GETFD F_SETFD FD_CLOEXEC);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module provides flags and helper functions for use with "chmod" in perlfunc
(S_*), "fcntl" in perlfunc (F_*), "flock" in perlfunc (LOCK_*), "seek" in perlfunc
(SEEK_*), "stat" in perlfunc (S_*), "sysopen" in perlfunc (O_*), and
"sysseek" in perlfunc (SEEK_*). They correspond to the C macros defined in
\&\fIfcntl.h\fR.
.PP
Not all symbols are available on all systems. Except where noted otherwise,
the constants and functions provided by this module will throw a runtime
exception if the corresponding C macro is not available. Consult your system
documentation to see the full description of each symbol and whether it is
available on your platform: \fBchmod\fR\|(2), \fBfcntl\fR\|(2), \fBflock\fR\|(2),
\&\fBlseek\fR\|(2), \fBopen\fR\|(2), \fBstat\fR\|(2).
.PP
(In particular, some of the F_* symbols are highly non-portable because they
only exist on a single platform or require system-specific C data structures to
be passed as the third argument to \f(CW\*(C`fcntl\*(C'\fR, which can't be portably
constructed in pure Perl.)
.SH "EXPORTED SYMBOLS"
.IX Header "EXPORTED SYMBOLS"
.SS "Default exports and export tags"
.IX Subsection "Default exports and export tags"
The full list of default exports can be found below in "APPENDIX A".
.PP
In addition, the following export tags are available (see Exporter for more
information on export tags):
.ie n .IP """:DEFAULT""" 4
.el .IP \f(CW:DEFAULT\fR 4
.IX Item ":DEFAULT"
Equivalent to the list of default export symbols (see "APPENDIX A").
.ie n .IP """:flock""" 4
.el .IP \f(CW:flock\fR 4
.IX Item ":flock"
Equivalent to all LOCK_* symbols listed below.
.ie n .IP """:mode""" 4
.el .IP \f(CW:mode\fR 4
.IX Item ":mode"
Equivalent to all S_* symbols listed below.
.ie n .IP """:seek""" 4
.el .IP \f(CW:seek\fR 4
.IX Item ":seek"
Equivalent to all SEEK_* symbols listed below.
.ie n .IP """:Fcompat""" 4
.el .IP \f(CW:Fcompat\fR 4
.IX Item ":Fcompat"
Equivalent to \f(CW\*(C`qw(FAPPEND FASYNC FCREAT FDEFER FDSYNC FEXCL FLARGEFILE FNDELAY
FNONBLOCK FRSYNC FSYNC FTRUNC)\*(C'\fR. These only exist for compatibility with old
code (if your platform defines them at all) and should not be used in new code.
.ie n .SS "Symbols for use with ""fcntl"""
.el .SS "Symbols for use with \f(CWfcntl\fP"
.IX Subsection "Symbols for use with fcntl"
.ie n .IP """F_ALLOCSP""" 4
.el .IP \f(CWF_ALLOCSP\fR 4
.IX Item "F_ALLOCSP"
File storage manipulation.
.ie n .IP """F_ALLOCSP64""" 4
.el .IP \f(CWF_ALLOCSP64\fR 4
.IX Item "F_ALLOCSP64"
File storage manipulation.
.ie n .IP """F_DUP2FD""" 4
.el .IP \f(CWF_DUP2FD\fR 4
.IX Item "F_DUP2FD"
Duplicate a file descriptor to the number specified in the third argument to
\&\f(CW\*(C`fcntl\*(C'\fR (if it refers to an open file, it is automatically closed first).
.ie n .IP """F_DUPFD""" 4
.el .IP \f(CWF_DUPFD\fR 4
.IX Item "F_DUPFD"
Duplicate a file descriptor to the lowest unused number greater than or equal
to the third argument of \f(CW\*(C`fcntl\*(C'\fR.
.ie n .IP """F_FREESP""" 4
.el .IP \f(CWF_FREESP\fR 4
.IX Item "F_FREESP"
File storage manipulation.
.ie n .IP """F_FREESP64""" 4
.el .IP \f(CWF_FREESP64\fR 4
.IX Item "F_FREESP64"
File storage manipulation.
.ie n .IP """F_FSYNC""" 4
.el .IP \f(CWF_FSYNC\fR 4
.IX Item "F_FSYNC"
Synchronize file data to disk.
.ie n .IP """F_FSYNC64""" 4
.el .IP \f(CWF_FSYNC64\fR 4
.IX Item "F_FSYNC64"
Synchronize file data to disk.
.ie n .IP """F_GETFD""" 4
.el .IP \f(CWF_GETFD\fR 4
.IX Item "F_GETFD"
Return (as a number) the set of file descriptor flags, in which the following
bits may be set:
.RS 4
.ie n .IP """FD_CLOEXEC""" 4
.el .IP \f(CWFD_CLOEXEC\fR 4
.IX Item "FD_CLOEXEC"
During a successful \f(CW\*(C`exec\*(C'\fR call, the file descriptor will be closed
automatically.
.RE
.RS 4
.RE
.ie n .IP """F_GETFL""" 4
.el .IP \f(CWF_GETFL\fR 4
.IX Item "F_GETFL"
Return (as a number) the set of file description status flags (O_*) as set by
\&\f(CW\*(C`open\*(C'\fR and \f(CW\*(C`fcntl\*(C'\fR. To determine the file access mode, perform a bitwise AND
with "\f(CW\*(C`O_ACCMODE\*(C'\fR" and see whether the result is equal to \f(CW\*(C`O_RDONLY\*(C'\fR,
\&\f(CW\*(C`O_WRONLY\*(C'\fR, or \f(CW\*(C`O_RDWR\*(C'\fR.
.ie n .IP """F_GETLEASE""" 4
.el .IP \f(CWF_GETLEASE\fR 4
.IX Item "F_GETLEASE"
Indicate the type of lease associated with the filehandle (if any) by returning
one of the following flags:
.RS 4
.ie n .IP """F_RDLCK""" 4
.el .IP \f(CWF_RDLCK\fR 4
.IX Item "F_RDLCK"
A read lease.
.ie n .IP """F_WRLCK""" 4
.el .IP \f(CWF_WRLCK\fR 4
.IX Item "F_WRLCK"
A write lease.
.ie n .IP """F_UNLCK""" 4
.el .IP \f(CWF_UNLCK\fR 4
.IX Item "F_UNLCK"
No lease.
.RE
.RS 4
.RE
.ie n .IP """F_GETLK""" 4
.el .IP \f(CWF_GETLK\fR 4
.IX Item "F_GETLK"
Test for the existence of record locks on the file.
.ie n .IP """F_GETLK64""" 4
.el .IP \f(CWF_GETLK64\fR 4
.IX Item "F_GETLK64"
Test for the existence of record locks on the file.
.ie n .IP """F_GETOWN""" 4
.el .IP \f(CWF_GETOWN\fR 4
.IX Item "F_GETOWN"
Return the ID of the process (as a positive number) or group (as a negative
number) that is currently receiving signals for events on the file descriptor.
.ie n .IP """F_GETPIPE_SZ""" 4
.el .IP \f(CWF_GETPIPE_SZ\fR 4
.IX Item "F_GETPIPE_SZ"
Return the capacity of the pipe associated with the filehandle.
.ie n .IP """F_GETSIG""" 4
.el .IP \f(CWF_GETSIG\fR 4
.IX Item "F_GETSIG"
Return the number of the signal sent when input or output becomes possible on
the filehandle. A return value of \f(CW0\fR means \f(CW\*(C`SIGIO\*(C'\fR.
.ie n .IP """F_NOTIFY""" 4
.el .IP \f(CWF_NOTIFY\fR 4
.IX Item "F_NOTIFY"
File and directory change notification with signals.
.RS 4
.ie n .IP """DN_ACCESS""" 4
.el .IP \f(CWDN_ACCESS\fR 4
.IX Item "DN_ACCESS"
.PD 0
.ie n .IP """DN_ATTRIB""" 4
.el .IP \f(CWDN_ATTRIB\fR 4
.IX Item "DN_ATTRIB"
.ie n .IP """DN_CREATE""" 4
.el .IP \f(CWDN_CREATE\fR 4
.IX Item "DN_CREATE"
.ie n .IP """DN_DELETE""" 4
.el .IP \f(CWDN_DELETE\fR 4
.IX Item "DN_DELETE"
.ie n .IP """DN_MODIFY""" 4
.el .IP \f(CWDN_MODIFY\fR 4
.IX Item "DN_MODIFY"
.ie n .IP """DN_MULTISHOT""" 4
.el .IP \f(CWDN_MULTISHOT\fR 4
.IX Item "DN_MULTISHOT"
.ie n .IP """DN_RENAME""" 4
.el .IP \f(CWDN_RENAME\fR 4
.IX Item "DN_RENAME"
.RE
.RS 4
.PD
.Sp

.RE
.ie n .IP """F_SETFD""" 4
.el .IP \f(CWF_SETFD\fR 4
.IX Item "F_SETFD"
Set the file descriptor flags. See "\f(CW\*(C`F_GETFD\*(C'\fR" for the list of available
flags.
.ie n .IP """F_SETFL""" 4
.el .IP \f(CWF_SETFL\fR 4
.IX Item "F_SETFL"
Set the file description status flags (O_*). Only some flags can be changed
this way.
.ie n .IP """F_SETLEASE""" 4
.el .IP \f(CWF_SETLEASE\fR 4
.IX Item "F_SETLEASE"
Set a file lease as specified by the third \f(CW\*(C`fnctl\*(C'\fR argument, which must be one
of the following:
.RS 4
.ie n .IP """F_RDLCK""" 4
.el .IP \f(CWF_RDLCK\fR 4
.IX Item "F_RDLCK"
Set a read lease.
.ie n .IP """F_WRLCK""" 4
.el .IP \f(CWF_WRLCK\fR 4
.IX Item "F_WRLCK"
Set a write lease.
.ie n .IP """F_UNLCK""" 4
.el .IP \f(CWF_UNLCK\fR 4
.IX Item "F_UNLCK"
Remove a lease.
.RE
.RS 4
.RE
.ie n .IP """F_SETLK""" 4
.el .IP \f(CWF_SETLK\fR 4
.IX Item "F_SETLK"
Acquire a record lock.
.ie n .IP """F_SETLK64""" 4
.el .IP \f(CWF_SETLK64\fR 4
.IX Item "F_SETLK64"
Acquire a record lock.
.ie n .IP """F_SETLKW""" 4
.el .IP \f(CWF_SETLKW\fR 4
.IX Item "F_SETLKW"
Acquire a record lock and wait for conflicting locks to be released.
.ie n .IP """F_SETLKW64""" 4
.el .IP \f(CWF_SETLKW64\fR 4
.IX Item "F_SETLKW64"
Acquire a record lock and wait for conflicting locks to be released.
.ie n .IP """F_SETOWN""" 4
.el .IP \f(CWF_SETOWN\fR 4
.IX Item "F_SETOWN"
Set the ID of the process (as a positive number) or group (as a negative
number) that will receive signals for events on the file descriptor.
.ie n .IP """F_SETPIPE_SZ""" 4
.el .IP \f(CWF_SETPIPE_SZ\fR 4
.IX Item "F_SETPIPE_SZ"
Set the capacity of the pipe associated with the filehandle. Return the actual
capacity reserved for the pipe, which may be higher than requested.
.ie n .IP """F_SETSIG""" 4
.el .IP \f(CWF_SETSIG\fR 4
.IX Item "F_SETSIG"
Set the number of the signal sent when input or output becomes possible on the
filehandle. An argument of \f(CW0\fR means \f(CW\*(C`SIGIO\*(C'\fR.
.ie n .IP """F_SHARE""" 4
.el .IP \f(CWF_SHARE\fR 4
.IX Item "F_SHARE"
Set share reservation.
.ie n .IP """F_UNSHARE""" 4
.el .IP \f(CWF_UNSHARE\fR 4
.IX Item "F_UNSHARE"
Remove share reservation.
.ie n .IP """F_COMPAT""" 4
.el .IP \f(CWF_COMPAT\fR 4
.IX Item "F_COMPAT"
.PD 0
.ie n .IP """F_EXLCK""" 4
.el .IP \f(CWF_EXLCK\fR 4
.IX Item "F_EXLCK"
.ie n .IP """F_NODNY""" 4
.el .IP \f(CWF_NODNY\fR 4
.IX Item "F_NODNY"
.ie n .IP """F_POSIX""" 4
.el .IP \f(CWF_POSIX\fR 4
.IX Item "F_POSIX"
.ie n .IP """F_RDACC""" 4
.el .IP \f(CWF_RDACC\fR 4
.IX Item "F_RDACC"
.ie n .IP """F_RDDNY""" 4
.el .IP \f(CWF_RDDNY\fR 4
.IX Item "F_RDDNY"
.ie n .IP """F_RWACC""" 4
.el .IP \f(CWF_RWACC\fR 4
.IX Item "F_RWACC"
.ie n .IP """F_RWDNY""" 4
.el .IP \f(CWF_RWDNY\fR 4
.IX Item "F_RWDNY"
.ie n .IP """F_SHLCK""" 4
.el .IP \f(CWF_SHLCK\fR 4
.IX Item "F_SHLCK"
.ie n .IP """F_WRACC""" 4
.el .IP \f(CWF_WRACC\fR 4
.IX Item "F_WRACC"
.ie n .IP """F_WRDNY""" 4
.el .IP \f(CWF_WRDNY\fR 4
.IX Item "F_WRDNY"
.PD
.ie n .SS "Symbols for use with ""flock"""
.el .SS "Symbols for use with \f(CWflock\fP"
.IX Subsection "Symbols for use with flock"
.ie n .IP """LOCK_EX""" 4
.el .IP \f(CWLOCK_EX\fR 4
.IX Item "LOCK_EX"
Request an exclusive lock.
.ie n .IP """LOCK_MAND""" 4
.el .IP \f(CWLOCK_MAND\fR 4
.IX Item "LOCK_MAND"
Request a mandatory lock.
.ie n .IP """LOCK_NB""" 4
.el .IP \f(CWLOCK_NB\fR 4
.IX Item "LOCK_NB"
Make lock request non-blocking (can be combined with other LOCK_* flags using bitwise OR).
.ie n .IP """LOCK_READ""" 4
.el .IP \f(CWLOCK_READ\fR 4
.IX Item "LOCK_READ"
With \f(CW\*(C`LOCK_MAND\*(C'\fR: Allow concurrent reads.
.ie n .IP """LOCK_RW""" 4
.el .IP \f(CWLOCK_RW\fR 4
.IX Item "LOCK_RW"
With \f(CW\*(C`LOCK_MAND\*(C'\fR: Allow concurrent reads and writes.
.ie n .IP """LOCK_SH""" 4
.el .IP \f(CWLOCK_SH\fR 4
.IX Item "LOCK_SH"
Request a shared lock.
.ie n .IP """LOCK_UN""" 4
.el .IP \f(CWLOCK_UN\fR 4
.IX Item "LOCK_UN"
Release a held lock.
.ie n .IP """LOCK_WRITE""" 4
.el .IP \f(CWLOCK_WRITE\fR 4
.IX Item "LOCK_WRITE"
With \f(CW\*(C`LOCK_MAND\*(C'\fR: Allow concurrent writes.
.ie n .SS "Symbols for use with ""sysopen"""
.el .SS "Symbols for use with \f(CWsysopen\fP"
.IX Subsection "Symbols for use with sysopen"
.ie n .IP """O_ACCMODE""" 4
.el .IP \f(CWO_ACCMODE\fR 4
.IX Item "O_ACCMODE"
Bit mask for extracting the file access mode (read-only, write-only, or
read/write) from the other flags. This is mainly useful in combination with
"\f(CW\*(C`F_GETFL\*(C'\fR".
.ie n .IP """O_ALIAS""" 4
.el .IP \f(CWO_ALIAS\fR 4
.IX Item "O_ALIAS"
(Mac OS) Open alias file (instead of the file that the alias refers to).
.ie n .IP """O_ALT_IO""" 4
.el .IP \f(CWO_ALT_IO\fR 4
.IX Item "O_ALT_IO"
(NetBSD) Use alternative I/O semantics.
.ie n .IP """O_APPEND""" 4
.el .IP \f(CWO_APPEND\fR 4
.IX Item "O_APPEND"
Open the file in append mode. Writes always go to the end of the file.
.ie n .IP """O_ASYNC""" 4
.el .IP \f(CWO_ASYNC\fR 4
.IX Item "O_ASYNC"
Enable signal-based I/O. When the file becomes readable or writable, a signal
is sent.
.ie n .IP """O_BINARY""" 4
.el .IP \f(CWO_BINARY\fR 4
.IX Item "O_BINARY"
(Windows) Open the file in binary mode.
.ie n .IP """O_CREAT""" 4
.el .IP \f(CWO_CREAT\fR 4
.IX Item "O_CREAT"
If the file to be opened does not exist yet, create it.
.ie n .IP """O_DEFER""" 4
.el .IP \f(CWO_DEFER\fR 4
.IX Item "O_DEFER"
(AIX) Changes to the file are kept in memory and not written to disk until the
program performs an explicit \f(CW\*(C`$fh\->sync()\*(C'\fR.
.ie n .IP """O_DIRECT""" 4
.el .IP \f(CWO_DIRECT\fR 4
.IX Item "O_DIRECT"
Perform direct I/O to/from user-space buffers; avoid caching at the OS level.
.ie n .IP """O_DIRECTORY""" 4
.el .IP \f(CWO_DIRECTORY\fR 4
.IX Item "O_DIRECTORY"
Fail if the filename to be opened does not refer to a directory.
.ie n .IP """O_DSYNC""" 4
.el .IP \f(CWO_DSYNC\fR 4
.IX Item "O_DSYNC"
Synchronize file data immediately, like calling \fBfdatasync\fR\|(2) after each
write.
.ie n .IP """O_EVTONLY""" 4
.el .IP \f(CWO_EVTONLY\fR 4
.IX Item "O_EVTONLY"
(Mac OS) Open the file for event notifications, not reading or writing.
.ie n .IP """O_EXCL""" 4
.el .IP \f(CWO_EXCL\fR 4
.IX Item "O_EXCL"
If the file already exists, fail and set \f(CW$!\fR to \f(CW\*(C`EEXIST\*(C'\fR (this only
makes sense in combination with \f(CW\*(C`O_CREAT\*(C'\fR).
.ie n .IP """O_EXLOCK""" 4
.el .IP \f(CWO_EXLOCK\fR 4
.IX Item "O_EXLOCK"
When the file is opened, atomically obtain an exclusive lock.
.ie n .IP """O_IGNORE_CTTY""" 4
.el .IP \f(CWO_IGNORE_CTTY\fR 4
.IX Item "O_IGNORE_CTTY"
(Hurd) If the file to be opened is the controlling terminal for this process,
don't recognize it as such. Operations on this filehandle won't trigger job
control signals.
.ie n .IP """O_LARGEFILE""" 4
.el .IP \f(CWO_LARGEFILE\fR 4
.IX Item "O_LARGEFILE"
On 32\-bit platforms, allow opening files whose size exceeds 2 GiB
(2,147,483,647 bytes).
.ie n .IP """O_NDELAY""" 4
.el .IP \f(CWO_NDELAY\fR 4
.IX Item "O_NDELAY"
Compatibility symbol. Use \f(CW\*(C`O_NONBLOCK\*(C'\fR instead.
.ie n .IP """O_NOATIME""" 4
.el .IP \f(CWO_NOATIME\fR 4
.IX Item "O_NOATIME"
Don't update the access time of the file when reading from it.
.ie n .IP """O_NOCTTY""" 4
.el .IP \f(CWO_NOCTTY\fR 4
.IX Item "O_NOCTTY"
If the process does not have a controlling terminal and the file to be opened
is a terminal device, don't make it the controlling terminal of the process.
.ie n .IP """O_NOFOLLOW""" 4
.el .IP \f(CWO_NOFOLLOW\fR 4
.IX Item "O_NOFOLLOW"
If the final component of the filename is a symbolic link, fail and set \f(CW$!\fR
to \f(CW\*(C`ELOOP\*(C'\fR.
.ie n .IP """O_NOINHERIT""" 4
.el .IP \f(CWO_NOINHERIT\fR 4
.IX Item "O_NOINHERIT"
(Windows) Don't let child processes inherit the opened file descriptor.
.ie n .IP """O_NOLINK""" 4
.el .IP \f(CWO_NOLINK\fR 4
.IX Item "O_NOLINK"
(Hurd) If the file to be opened is a symbolic link, don't follow it; open the
link itself.
.ie n .IP """O_NONBLOCK""" 4
.el .IP \f(CWO_NONBLOCK\fR 4
.IX Item "O_NONBLOCK"
Open the file in non-blocking mode. Neither the open itself nor any read/write
operations on the filehandle will block. (This is mainly useful for pipes and
sockets. It has no effect on regular files.)
.ie n .IP """O_NOSIGPIPE""" 4
.el .IP \f(CWO_NOSIGPIPE\fR 4
.IX Item "O_NOSIGPIPE"
If the file to be opened is a pipe, then don't raise \f(CW\*(C`SIGPIPE\*(C'\fR for write
operations when the read end of the pipe is closed; make the write fail with
\&\f(CW\*(C`EPIPE\*(C'\fR instead.
.ie n .IP """O_NOTRANS""" 4
.el .IP \f(CWO_NOTRANS\fR 4
.IX Item "O_NOTRANS"
(Hurd) If the file to be opened is specially translated, don't invoke the
translator; open the bare file itself.
.ie n .IP """O_RANDOM""" 4
.el .IP \f(CWO_RANDOM\fR 4
.IX Item "O_RANDOM"
(Windows) Indicate that the program intends to access the file contents
randomly (without a predictable pattern). This is an optimization hint for the
file cache (but may cause excessive memory use on large files).
.ie n .IP """O_RAW""" 4
.el .IP \f(CWO_RAW\fR 4
.IX Item "O_RAW"
(Windows) Same as \f(CW\*(C`O_BINARY\*(C'\fR.
.ie n .IP """O_RDONLY""" 4
.el .IP \f(CWO_RDONLY\fR 4
.IX Item "O_RDONLY"
Open the file for reading (only).
.ie n .IP """O_RDWR""" 4
.el .IP \f(CWO_RDWR\fR 4
.IX Item "O_RDWR"
Open the file for reading and writing.
.ie n .IP """O_RSRC""" 4
.el .IP \f(CWO_RSRC\fR 4
.IX Item "O_RSRC"
(Mac OS) Open the resource fork of the file.
.ie n .IP """O_RSYNC""" 4
.el .IP \f(CWO_RSYNC\fR 4
.IX Item "O_RSYNC"
Extend the effects of \f(CW\*(C`O_SYNC\*(C'\fR and \f(CW\*(C`O_DSYNC\*(C'\fR to read operations. In
particular, reading from a filehandle opened with \f(CW\*(C`O_SYNC | O_RSYNC\*(C'\fR will wait
until the access time of the file has been modified on disk.
.ie n .IP """O_SEQUENTIAL""" 4
.el .IP \f(CWO_SEQUENTIAL\fR 4
.IX Item "O_SEQUENTIAL"
(Windows) Indicate that the program intends to access the file contents
sequentially. This is an optimization hint for the file cache.
.ie n .IP """O_SHLOCK""" 4
.el .IP \f(CWO_SHLOCK\fR 4
.IX Item "O_SHLOCK"
When the file is opened, atomically obtain a shared lock.
.ie n .IP """O_SYMLINK""" 4
.el .IP \f(CWO_SYMLINK\fR 4
.IX Item "O_SYMLINK"
If the file to be opened is a symbolic link, don't follow it; open the link
itself.
.ie n .IP """O_SYNC""" 4
.el .IP \f(CWO_SYNC\fR 4
.IX Item "O_SYNC"
Synchronize file data and metadata immediately, like calling \fBfsync\fR\|(2) after
each write.
.ie n .IP """O_TEMPORARY""" 4
.el .IP \f(CWO_TEMPORARY\fR 4
.IX Item "O_TEMPORARY"
(Windows) Delete the file when its last open file descriptor is closed.
.ie n .IP """O_TEXT""" 4
.el .IP \f(CWO_TEXT\fR 4
.IX Item "O_TEXT"
(Windows) Open the file in text mode.
.ie n .IP """O_TMPFILE""" 4
.el .IP \f(CWO_TMPFILE\fR 4
.IX Item "O_TMPFILE"
Create an unnamed temporary file. The filename argument specifies the directory
the unnamed file should be placed in.
.ie n .IP """O_TRUNC""" 4
.el .IP \f(CWO_TRUNC\fR 4
.IX Item "O_TRUNC"
If the file already exists, truncate its contents to length 0.
.ie n .IP """O_TTY_INIT""" 4
.el .IP \f(CWO_TTY_INIT\fR 4
.IX Item "O_TTY_INIT"
If the file to be opened is a terminal that is not already open in any process,
initialize its termios parameters.
.ie n .IP """O_WRONLY""" 4
.el .IP \f(CWO_WRONLY\fR 4
.IX Item "O_WRONLY"
Open the file for writing (only).
.ie n .IP """FAPPEND""" 4
.el .IP \f(CWFAPPEND\fR 4
.IX Item "FAPPEND"
Compatibility symbol. Use \f(CW\*(C`O_APPEND\*(C'\fR instead.
.ie n .IP """FASYNC""" 4
.el .IP \f(CWFASYNC\fR 4
.IX Item "FASYNC"
Compatibility symbol. Use \f(CW\*(C`O_ASYNC\*(C'\fR instead.
.ie n .IP """FCREAT""" 4
.el .IP \f(CWFCREAT\fR 4
.IX Item "FCREAT"
Compatibility symbol. Use \f(CW\*(C`O_CREAT\*(C'\fR instead.
.ie n .IP """FDEFER""" 4
.el .IP \f(CWFDEFER\fR 4
.IX Item "FDEFER"
Compatibility symbol. Use \f(CW\*(C`O_DEFER\*(C'\fR instead.
.ie n .IP """FDSYNC""" 4
.el .IP \f(CWFDSYNC\fR 4
.IX Item "FDSYNC"
Compatibility symbol. Use \f(CW\*(C`O_DSYNC\*(C'\fR instead.
.ie n .IP """FEXCL""" 4
.el .IP \f(CWFEXCL\fR 4
.IX Item "FEXCL"
Compatibility symbol. Use \f(CW\*(C`O_EXCL\*(C'\fR instead.
.ie n .IP """FLARGEFILE""" 4
.el .IP \f(CWFLARGEFILE\fR 4
.IX Item "FLARGEFILE"
Compatibility symbol. Use \f(CW\*(C`O_LARGEFILE\*(C'\fR instead.
.ie n .IP """FNDELAY""" 4
.el .IP \f(CWFNDELAY\fR 4
.IX Item "FNDELAY"
Compatibility symbol. Use \f(CW\*(C`O_NDELAY\*(C'\fR instead.
.ie n .IP """FNONBLOCK""" 4
.el .IP \f(CWFNONBLOCK\fR 4
.IX Item "FNONBLOCK"
Compatibility symbol. Use \f(CW\*(C`O_NONBLOCK\*(C'\fR instead.
.ie n .IP """FRSYNC""" 4
.el .IP \f(CWFRSYNC\fR 4
.IX Item "FRSYNC"
Compatibility symbol. Use \f(CW\*(C`O_RSYNC\*(C'\fR instead.
.ie n .IP """FSYNC""" 4
.el .IP \f(CWFSYNC\fR 4
.IX Item "FSYNC"
Compatibility symbol. Use \f(CW\*(C`O_SYNC\*(C'\fR instead.
.ie n .IP """FTRUNC""" 4
.el .IP \f(CWFTRUNC\fR 4
.IX Item "FTRUNC"
Compatibility symbol. Use \f(CW\*(C`O_TRUNC\*(C'\fR instead.
.ie n .SS "Symbols for use with ""seek"" and ""sysseek"""
.el .SS "Symbols for use with \f(CWseek\fP and \f(CWsysseek\fP"
.IX Subsection "Symbols for use with seek and sysseek"
.ie n .IP """SEEK_CUR""" 4
.el .IP \f(CWSEEK_CUR\fR 4
.IX Item "SEEK_CUR"
File offsets are relative to the current position in the file.
.ie n .IP """SEEK_END""" 4
.el .IP \f(CWSEEK_END\fR 4
.IX Item "SEEK_END"
File offsets are relative to the end of the file (i.e. mostly negative).
.ie n .IP """SEEK_SET""" 4
.el .IP \f(CWSEEK_SET\fR 4
.IX Item "SEEK_SET"
File offsets are absolute (i.e. relative to the beginning of the file).
.ie n .SS "Symbols for use with ""stat"" and ""chmod"""
.el .SS "Symbols for use with \f(CWstat\fP and \f(CWchmod\fP"
.IX Subsection "Symbols for use with stat and chmod"
.ie n .IP """S_ENFMT""" 4
.el .IP \f(CWS_ENFMT\fR 4
.IX Item "S_ENFMT"
Enforce mandatory file locks. (This symbol typically shares its value with
\&\f(CW\*(C`S_ISGID\*(C'\fR.)
.ie n .IP """S_IEXEC""" 4
.el .IP \f(CWS_IEXEC\fR 4
.IX Item "S_IEXEC"
Compatibility symbol. Use \f(CW\*(C`S_IXUSR\*(C'\fR instead.
.ie n .IP """S_IFBLK""" 4
.el .IP \f(CWS_IFBLK\fR 4
.IX Item "S_IFBLK"
File type: Block device.
.ie n .IP """S_IFCHR""" 4
.el .IP \f(CWS_IFCHR\fR 4
.IX Item "S_IFCHR"
File type: Character device.
.ie n .IP """S_IFDIR""" 4
.el .IP \f(CWS_IFDIR\fR 4
.IX Item "S_IFDIR"
File type: Directory.
.ie n .IP """S_IFIFO""" 4
.el .IP \f(CWS_IFIFO\fR 4
.IX Item "S_IFIFO"
File type: Fifo/pipe.
.ie n .IP """S_IFLNK""" 4
.el .IP \f(CWS_IFLNK\fR 4
.IX Item "S_IFLNK"
File type: Symbolic link.
.ie n .IP """S_IFMT""" 4
.el .IP \f(CWS_IFMT\fR 4
.IX Item "S_IFMT"
Bit mask for extracting the file type bits. This symbol can also be used as a
function: \f(CWS_IFMT($mode)\fR acts like \f(CW\*(C`$mode & S_IFMT\*(C'\fR. The result will be
equal to one of the other S_IF* constants.
.ie n .IP """_S_IFMT""" 4
.el .IP \f(CW_S_IFMT\fR 4
.IX Item "_S_IFMT"
Bit mask for extracting the file type bits. This symbol is an actual constant
and cannot be used as a function; otherwise it is identical to \f(CW\*(C`S_IFMT\*(C'\fR.
.ie n .IP """S_IFREG""" 4
.el .IP \f(CWS_IFREG\fR 4
.IX Item "S_IFREG"
File type: Regular file.
.ie n .IP """S_IFSOCK""" 4
.el .IP \f(CWS_IFSOCK\fR 4
.IX Item "S_IFSOCK"
File type: Socket.
.ie n .IP """S_IFWHT""" 4
.el .IP \f(CWS_IFWHT\fR 4
.IX Item "S_IFWHT"
File type: Whiteout file (used to mark the absence/deletion of a file in overlays).
.ie n .IP """S_IMODE""" 4
.el .IP \f(CWS_IMODE\fR 4
.IX Item "S_IMODE"
Function for extracting the permission bits from a file mode.
.ie n .IP """S_IREAD""" 4
.el .IP \f(CWS_IREAD\fR 4
.IX Item "S_IREAD"
Compatibility symbol. Use \f(CW\*(C`S_IRUSR\*(C'\fR instead.
.ie n .IP """S_IRGRP""" 4
.el .IP \f(CWS_IRGRP\fR 4
.IX Item "S_IRGRP"
Permissions: Readable by group.
.ie n .IP """S_IROTH""" 4
.el .IP \f(CWS_IROTH\fR 4
.IX Item "S_IROTH"
Permissions: Readable by others.
.ie n .IP """S_IRUSR""" 4
.el .IP \f(CWS_IRUSR\fR 4
.IX Item "S_IRUSR"
Permissions: Readable by owner.
.ie n .IP """S_IRWXG""" 4
.el .IP \f(CWS_IRWXG\fR 4
.IX Item "S_IRWXG"
Bit mask for extracting group permissions.
.ie n .IP """S_IRWXO""" 4
.el .IP \f(CWS_IRWXO\fR 4
.IX Item "S_IRWXO"
Bit mask for extracting other permissions.
.ie n .IP """S_IRWXU""" 4
.el .IP \f(CWS_IRWXU\fR 4
.IX Item "S_IRWXU"
Bit mask for extracting owner ("user") permissions.
.ie n .IP """S_ISBLK""" 4
.el .IP \f(CWS_ISBLK\fR 4
.IX Item "S_ISBLK"
Convenience function to check for block devices: \f(CWS_ISBLK($mode)\fR is
equivalent to \f(CW\*(C`S_IFMT($mode) == S_IFBLK\*(C'\fR.
.ie n .IP """S_ISCHR""" 4
.el .IP \f(CWS_ISCHR\fR 4
.IX Item "S_ISCHR"
Convenience function to check for character  devices: \f(CWS_ISCHR($mode)\fR is
equivalent to \f(CW\*(C`S_IFMT($mode) == S_IFCHR\*(C'\fR.
.ie n .IP """S_ISDIR""" 4
.el .IP \f(CWS_ISDIR\fR 4
.IX Item "S_ISDIR"
Convenience function to check for directories: \f(CWS_ISDIR($mode)\fR is
equivalent to \f(CW\*(C`S_IFMT($mode) == S_IFDIR\*(C'\fR.
.ie n .IP """S_ISENFMT""" 4
.el .IP \f(CWS_ISENFMT\fR 4
.IX Item "S_ISENFMT"
Broken function; do not use. (\f(CWS_ISENFMT($mode)\fR should always return false,
anyway.)
.ie n .IP """S_ISFIFO""" 4
.el .IP \f(CWS_ISFIFO\fR 4
.IX Item "S_ISFIFO"
Convenience function to check for fifos: \f(CWS_ISFIFO($mode)\fR is
equivalent to \f(CW\*(C`S_IFMT($mode) == S_IFIFO\*(C'\fR.
.ie n .IP """S_ISGID""" 4
.el .IP \f(CWS_ISGID\fR 4
.IX Item "S_ISGID"
Permissions: Set effective group ID from file (when running executables);
mandatory locking (on non-group-executable files); new files inherit their
group from the directory (on directories).
.ie n .IP """S_ISLNK""" 4
.el .IP \f(CWS_ISLNK\fR 4
.IX Item "S_ISLNK"
Convenience function to check for symbolic links: \f(CWS_ISLNK($mode)\fR is
equivalent to \f(CW\*(C`S_IFMT($mode) == S_IFLNK\*(C'\fR.
.ie n .IP """S_ISREG""" 4
.el .IP \f(CWS_ISREG\fR 4
.IX Item "S_ISREG"
Convenience function to check for regular files: \f(CWS_ISREG($mode)\fR is
equivalent to \f(CW\*(C`S_IFMT($mode) == S_IFREG\*(C'\fR.
.ie n .IP """S_ISSOCK""" 4
.el .IP \f(CWS_ISSOCK\fR 4
.IX Item "S_ISSOCK"
Convenience function to check for sockets: \f(CWS_ISSOCK($mode)\fR is
equivalent to \f(CW\*(C`S_IFMT($mode) == S_IFSOCK\*(C'\fR.
.ie n .IP """S_ISTXT""" 4
.el .IP \f(CWS_ISTXT\fR 4
.IX Item "S_ISTXT"
Compatibility symbol. Use \f(CW\*(C`S_ISVTX\*(C'\fR instead.
.ie n .IP """S_ISUID""" 4
.el .IP \f(CWS_ISUID\fR 4
.IX Item "S_ISUID"
Permissions: Set effective user ID from file (when running executables).
.ie n .IP """S_ISVTX""" 4
.el .IP \f(CWS_ISVTX\fR 4
.IX Item "S_ISVTX"
Permissions: Files in this directory can only be deleted/renamed by their owner
(or the directory's owner), even if other users have write permissions to the
directory ("sticky bit").
.ie n .IP """S_ISWHT""" 4
.el .IP \f(CWS_ISWHT\fR 4
.IX Item "S_ISWHT"
Convenience function to check for whiteout files: \f(CWS_ISWHT($mode)\fR is
equivalent to \f(CW\*(C`S_IFMT($mode) == S_IFWHT\*(C'\fR.
.ie n .IP """S_IWGRP""" 4
.el .IP \f(CWS_IWGRP\fR 4
.IX Item "S_IWGRP"
Permissions: Writable by group.
.ie n .IP """S_IWOTH""" 4
.el .IP \f(CWS_IWOTH\fR 4
.IX Item "S_IWOTH"
Permissions: Writable by others.
.ie n .IP """S_IWRITE""" 4
.el .IP \f(CWS_IWRITE\fR 4
.IX Item "S_IWRITE"
Compatibility symbol. Use \f(CW\*(C`S_IWUSR\*(C'\fR instead.
.ie n .IP """S_IWUSR""" 4
.el .IP \f(CWS_IWUSR\fR 4
.IX Item "S_IWUSR"
Permissions: Writable by owner.
.ie n .IP """S_IXGRP""" 4
.el .IP \f(CWS_IXGRP\fR 4
.IX Item "S_IXGRP"
Permissions: Executable/searchable by group.
.ie n .IP """S_IXOTH""" 4
.el .IP \f(CWS_IXOTH\fR 4
.IX Item "S_IXOTH"
Permissions: Executable/searchable by others.
.ie n .IP """S_IXUSR""" 4
.el .IP \f(CWS_IXUSR\fR 4
.IX Item "S_IXUSR"
Permissions: Executable/searchable by owner.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
"chmod" in perlfunc, \fBchmod\fR\|(2),
"fcntl" in perlfunc, \fBfcntl\fR\|(2),
"flock" in perlfunc, \fBflock\fR\|(2),
"seek" in perlfunc, \fBfseek\fR\|(3),
"stat" in perlfunc, \fBstat\fR\|(2),
"sysopen" in perlfunc, \fBopen\fR\|(2),
"sysseek" in perlfunc, \fBlseek\fR\|(2)
.SH "APPENDIX A"
.IX Header "APPENDIX A"
By default, if you say \f(CW\*(C`use Fcntl;\*(C'\fR, the following symbols are exported:
.PP
.Vb 10
\&    FD_CLOEXEC
\&    F_ALLOCSP
\&    F_ALLOCSP64
\&    F_COMPAT
\&    F_DUP2FD
\&    F_DUPFD
\&    F_EXLCK
\&    F_FREESP
\&    F_FREESP64
\&    F_FSYNC
\&    F_FSYNC64
\&    F_GETFD
\&    F_GETFL
\&    F_GETLK
\&    F_GETLK64
\&    F_GETOWN
\&    F_NODNY
\&    F_POSIX
\&    F_RDACC
\&    F_RDDNY
\&    F_RDLCK
\&    F_RWACC
\&    F_RWDNY
\&    F_SETFD
\&    F_SETFL
\&    F_SETLK
\&    F_SETLK64
\&    F_SETLKW
\&    F_SETLKW64
\&    F_SETOWN
\&    F_SHARE
\&    F_SHLCK
\&    F_UNLCK
\&    F_UNSHARE
\&    F_WRACC
\&    F_WRDNY
\&    F_WRLCK
\&    O_ACCMODE
\&    O_ALIAS
\&    O_APPEND
\&    O_ASYNC
\&    O_BINARY
\&    O_CREAT
\&    O_DEFER
\&    O_DIRECT
\&    O_DIRECTORY
\&    O_DSYNC
\&    O_EXCL
\&    O_EXLOCK
\&    O_LARGEFILE
\&    O_NDELAY
\&    O_NOCTTY
\&    O_NOFOLLOW
\&    O_NOINHERIT
\&    O_NONBLOCK
\&    O_RANDOM
\&    O_RAW
\&    O_RDONLY
\&    O_RDWR
\&    O_RSRC
\&    O_RSYNC
\&    O_SEQUENTIAL
\&    O_SHLOCK
\&    O_SYNC
\&    O_TEMPORARY
\&    O_TEXT
\&    O_TRUNC
\&    O_WRONLY
.Ve
