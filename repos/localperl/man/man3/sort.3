.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "sort 3"
.TH sort 3 2024-02-27 "perl v5.40.0" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
sort \- perl pragma to control sort() behaviour
.SH SYNOPSIS
.IX Header "SYNOPSIS"
The sort pragma is now a no-op, and its use is discouraged. These three
operations are valid, but have no effect:
.PP
.Vb 3
\&    use sort \*(Aqstable\*(Aq;          # guarantee stability
\&    use sort \*(Aqdefaults\*(Aq;        # revert to default behavior
\&    no  sort \*(Aqstable\*(Aq;          # stability not important
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Historically the \f(CW\*(C`sort\*(C'\fR pragma you can control the behaviour of the builtin
\&\f(CWsort()\fR function.
.PP
Prior to v5.28.0 there were two other options:
.PP
.Vb 2
\&    use sort \*(Aq_mergesort\*(Aq;
\&    use sort \*(Aq_qsort\*(Aq;          # or \*(Aq_quicksort\*(Aq
.Ve
.PP
If you try and specify either of these in v5.28+ it will croak.
.PP
The default sort has been stable since v5.8.0, and given this consistent
behaviour for almost two decades, everyone has come to assume stability.
.PP
Stability will remain the default \- hence there is no need for a pragma for
code to opt into stability "just in case" this changes \- it won't.
.PP
We do not foresee going back to offering multiple implementations of general
purpose sorting \- hence there is no future need to offer a pragma to choose
between them.
.PP
If you know that you care that much about performance of your sorting, and
that for your use case and your data, it was worth investigating
alternatives, possible to identify an alternative from our default that was
better, and the cost of switching was worth it, then you know more than we
do. Likely whatever choices we can give are not as good as implementing your
own. (For example, a Radix sort can be faster than O(n log n), but can't be
used for all keys and has larger overheads.)
.PP
We are not averse to \fBchanging\fR the sort algorithm, but we don't see the
benefit in offering the choice of two general purpose implementations.
.SH CAVEATS
.IX Header "CAVEATS"
The function \f(CWsort::current()\fR was provided to report the current state of
the sort pragmata. This function was not exported, and there is no code to
call it on CPAN. It is now deprecated, and will warn by default.
.PP
As we no longer store any sort "state", it can no longer return the correct
value, so it will always return the string \f(CW\*(C`stable\*(C'\fR, as this is consistent
with what we actually have implemented.
