.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "AnyDBM_File 3"
.TH AnyDBM_File 3 2024-02-27 "perl v5.40.0" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
AnyDBM_File \- provide framework for multiple DBMs
.PP
NDBM_File, DB_File, GDBM_File, SDBM_File, ODBM_File \- various DBM implementations
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    use AnyDBM_File;
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module is a "pure virtual base class"\-\-it has nothing of its own.
It's just there to inherit from one of the various DBM packages.  It
prefers ndbm for compatibility reasons with Perl 4, then Berkeley DB (See
DB_File), GDBM, SDBM (which is always there\-\-it comes with Perl), and
finally ODBM.   This way old programs that used to use NDBM via \fBdbmopen()\fR
can still do so, but new ones can reorder \f(CW@ISA:\fR
.PP
.Vb 2
\&    BEGIN { @AnyDBM_File::ISA = qw(DB_File GDBM_File NDBM_File) }
\&    use AnyDBM_File;
.Ve
.PP
Having multiple DBM implementations makes it trivial to copy database formats:
.PP
.Vb 4
\&    use Fcntl; use NDBM_File; use DB_File;
\&    tie %newhash,  \*(AqDB_File\*(Aq, $new_filename, O_CREAT|O_RDWR;
\&    tie %oldhash,  \*(AqNDBM_File\*(Aq, $old_filename, 1, 0;
\&    %newhash = %oldhash;
.Ve
.SS "DBM Comparisons"
.IX Subsection "DBM Comparisons"
Here's a partial table of features the different packages offer:
.PP
.Vb 10
\&                         odbm    ndbm    sdbm    gdbm    bsd\-db
\&                         \-\-\-\-    \-\-\-\-    \-\-\-\-    \-\-\-\-    \-\-\-\-\-\-
\& Linkage comes w/ perl   yes     yes     yes     yes     yes
\& Src comes w/ perl       no      no      yes     no      no
\& Comes w/ many unix os   yes     yes[0]  no      no      no
\& Builds ok on !unix      ?       ?       yes     yes     ?
\& Code Size               ?       ?       small   big     big
\& Database Size           ?       ?       small   big?    ok[1]
\& Speed                   ?       ?       slow    ok      fast
\& FTPable                 no      no      yes     yes     yes
\& Easy to build          N/A     N/A      yes     yes     ok[2]
\& Size limits             1k      4k      1k[3]   none    none
\& Byte\-order independent  no      no      no      no      yes
\& Licensing restrictions  ?       ?       no      yes     no
.Ve
.IP [0] 4
.IX Item "[0]"
on mixed universe machines, may be in the bsd compat library,
which is often shunned.
.IP [1] 4
.IX Item "[1]"
Can be trimmed if you compile for one access method.
.IP [2] 4
.IX Item "[2]"
See DB_File. 
Requires symbolic links.
.IP [3] 4
.IX Item "[3]"
By default, but can be redefined.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBdbm\fR\|(3), \fBndbm\fR\|(3), \fBDB_File\fR\|(3), perldbmfilter
