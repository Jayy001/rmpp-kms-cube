.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "fields 3"
.TH fields 3 2024-04-16 "perl v5.40.0" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
fields \- compile\-time class fields
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 10
\&    {
\&        package Foo;
\&        use fields qw(foo bar _Foo_private);
\&        sub new {
\&            my Foo $self = shift;
\&            unless (ref $self) {
\&                $self = fields::new($self);
\&                $self\->{_Foo_private} = "this is Foo\*(Aqs secret";
\&            }
\&            $self\->{foo} = 10;
\&            $self\->{bar} = 20;
\&            return $self;
\&        }
\&    }
\&
\&    my $var = Foo\->new;
\&    $var\->{foo} = 42;
\&
\&    # this will generate a run\-time error
\&    $var\->{zap} = 42;
\&
\&    # this will generate a compile\-time error
\&    my Foo $foo = Foo\->new;
\&    $foo\->{zap} = 24;
\&
\&    # subclassing
\&    {
\&        package Bar;
\&        use base \*(AqFoo\*(Aq;
\&        use fields qw(baz _Bar_private);        # not shared with Foo
\&        sub new {
\&            my $class = shift;
\&            my $self = fields::new($class);
\&            $self\->SUPER::new();                # init base fields
\&            $self\->{baz} = 10;                  # init own fields
\&            $self\->{_Bar_private} = "this is Bar\*(Aqs secret";
\&            return $self;
\&        }
\&    }
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
The \f(CW\*(C`fields\*(C'\fR pragma enables compile-time and run-time verified class
fields.
.PP
NOTE: The current implementation keeps the declared fields in the \f(CW%FIELDS\fR
hash of the calling package, but this may change in future versions.
Do \fBnot\fR update the \f(CW%FIELDS\fR hash directly, because it must be created
at compile-time for it to be fully useful, as is done by this pragma.
.PP
If a typed lexical variable (\f(CWmy Class
$var\fR) holding a reference is used to access a
hash element and a package with the same name as the type has
declared class fields using this pragma, then the hash key is
verified at compile time.  If the variables are not typed, access is
only checked at run time.
.PP
The related \f(CW\*(C`base\*(C'\fR pragma will combine fields from base classes and any
fields declared using the \f(CW\*(C`fields\*(C'\fR pragma.  This enables field
inheritance to work properly.  Inherited fields can be overridden but
will generate a warning if warnings are enabled.
.PP
\&\fBOnly valid for Perl 5.8.x and earlier:\fR Field names that start with an
underscore character are made private to the class and are not visible
to subclasses.
.PP
Also, \fBin Perl 5.8.x and earlier\fR, this pragma uses pseudo-hashes, the
effect being that you can have objects with named fields which are as
compact and as fast arrays to access, as long as the objects are
accessed through properly typed variables.
.PP
The following functions are supported:
.IP new 4
.IX Item "new"
\&\fBfields::new()\fR creates and blesses a hash of the fields declared
using the \f(CW\*(C`fields\*(C'\fR pragma into the specified class.  It is the
recommended way to construct a fields-based object.
.Sp
This makes it possible to write a constructor like this:
.Sp
.Vb 2
\&    package Critter::Sounds;
\&    use fields qw(cat dog bird);
\&
\&    sub new {
\&        my $self = shift;
\&        $self = fields::new($self) unless ref $self;
\&        $self\->{cat} = \*(Aqmeow\*(Aq;                      # scalar element
\&        @$self{\*(Aqdog\*(Aq,\*(Aqbird\*(Aq} = (\*(Aqbark\*(Aq,\*(Aqtweet\*(Aq);    # slice
\&        return $self;
\&    }
.Ve
.IP phash 4
.IX Item "phash"
\&\fBThis function only works in Perl 5.8.x and earlier.\fR  Pseudo-hashes
were removed from Perl as of 5.10.  Consider using restricted hashes or
\&\fBfields::new()\fR instead (which itself uses restricted hashes under 5.10+).
See Hash::Util.  Using \fBfields::phash()\fR under 5.10 or higher will
cause an error.
.Sp
\&\fBfields::phash()\fR can be used to create and initialize a plain (unblessed)
pseudo-hash.  This function should always be used instead of creating
pseudo-hashes directly.
.Sp
If the first argument is a reference to an array, the pseudo-hash will
be created with keys from that array.  If a second argument is supplied,
it must also be a reference to an array whose elements will be used as
the values.  If the second array contains less elements than the first,
the trailing elements of the pseudo-hash will not be initialized.
This makes it particularly useful for creating a pseudo-hash from
subroutine arguments:
.Sp
.Vb 3
\&    sub dogtag {
\&       my $tag = fields::phash([qw(name rank ser_num)], [@_]);
\&    }
.Ve
.Sp
\&\fBfields::phash()\fR also accepts a list of key-value pairs that will
be used to construct the pseudo hash.  Examples:
.Sp
.Vb 3
\&    my $tag = fields::phash(name => "Joe",
\&                            rank => "captain",
\&                            ser_num => 42);
\&
\&    my $pseudohash = fields::phash(%args);
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
base, Hash::Util
