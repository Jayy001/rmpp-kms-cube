.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PERL5400DELTA 1"
.TH PERL5400DELTA 1 2024-06-09 "perl v5.40.0" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
perldelta \- what is new for perl v5.40.0
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This document describes differences between the 5.38.0 release and the 5.40.0
release.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.ie n .SS "New ""_\|_CLASS_\|_"" Keyword"
.el .SS "New \f(CW_\|_CLASS_\|_\fP Keyword"
.IX Subsection "New __CLASS__ Keyword"
When using the new \f(CW\*(C`class\*(C'\fR feature, code inside a method, \f(CW\*(C`ADJUST\*(C'\fR block or
field initializer expression is now permitted to use the new \f(CW\*(C`_\|_CLASS_\|_\*(C'\fR
keyword.  This yields a class name, similar to \f(CW\*(C`_\|_PACKAGE_\|_\*(C'\fR, but whereas that
gives the compile-time package that the code appears in, the \f(CW\*(C`_\|_CLASS_\|_\*(C'\fR
keyword is aware of the actual run-time class that the object instance is a
member of.  This makes it useful for method dispatch on that class, especially
during constructors, where access to \f(CW$self\fR is not permitted.
.PP
For more information, see "_\|_CLASS_\|_" in perlfunc.
.ie n .SS """:reader"" attribute for field variables"
.el .SS "\f(CW:reader\fP attribute for field variables"
.IX Subsection ":reader attribute for field variables"
When using the \f(CW\*(C`class\*(C'\fR feature, field variables can now take a \f(CW\*(C`:reader\*(C'\fR
attribute.  This requests that an accessor method be automatically created
that simply returns the value of the field variable from the given instance.
.PP
.Vb 1
\&    field $name :reader;
.Ve
.PP
Is equivalent to
.PP
.Vb 2
\&    field $name;
\&    method name () { return $name; }
.Ve
.PP
An alternative name can also be provided:
.PP
.Vb 1
\&    field $name :reader(get_name);
.Ve
.PP
For more detail, see ":reader" in perlclass.
.ie n .SS "Permit a space in ""\-M"" command-line option"
.el .SS "Permit a space in \f(CW\-M\fP command-line option"
.IX Subsection "Permit a space in -M command-line option"
When processing command-line options, perl now allows a space between the
\&\f(CW\*(C`\-M\*(C'\fR switch and the name of the module after it.
.PP
.Vb 1
\&    $ perl \-M Data::Dumper=Dumper \-E \*(Aqsay Dumper [1,2,3]\*(Aq
.Ve
.PP
This matches the existing behaviour of the \f(CW\*(C`\-I\*(C'\fR option.
.ie n .SS "Restrictions to ""use VERSION"" declarations"
.el .SS "Restrictions to \f(CWuse VERSION\fP declarations"
.IX Subsection "Restrictions to use VERSION declarations"
In Perl 5.36, a deprecation warning was added when downgrading a
\&\f(CW\*(C`use VERSION\*(C'\fR declaration from one above version 5.11, to below. This has
now been made a fatal error.
.PP
Additionally, it is now a fatal error to issue a subsequent \f(CW\*(C`use VERSION\*(C'\fR
declaration when another is in scope, when either version is 5.39 or above.
This is to avoid complications surrounding imported lexical functions from
builtin.  A deprecation warning has also been added for any other
subsequent \f(CW\*(C`use VERSION\*(C'\fR declaration below version 5.39, to warn that it
will no longer be permitted in Perl version 5.44.
.ie n .SS "New ""builtin::inf"" and ""builtin::nan"" functions (experimental)"
.el .SS "New \f(CWbuiltin::inf\fP and \f(CWbuiltin::nan\fP functions (experimental)"
.IX Subsection "New builtin::inf and builtin::nan functions (experimental)"
Two new functions, \f(CW\*(C`inf\*(C'\fR and \f(CW\*(C`nan\*(C'\fR, have been added to the \f(CW\*(C`builtin\*(C'\fR
namespace.  These act like constants that yield the floating-point infinity
and Not-a-Number value respectively.
.ie n .SS "New ""^^"" logical xor operator"
.el .SS "New \f(CW^^\fP logical xor operator"
.IX Subsection "New ^^ logical xor operator"
Perl has always had three low-precedence logical operators \f(CW\*(C`and\*(C'\fR, \f(CW\*(C`or\*(C'\fR and
\&\f(CW\*(C`xor\*(C'\fR, as well as three high-precedence bitwise versions \f(CW\*(C`&\*(C'\fR, \f(CW\*(C`^\*(C'\fR and \f(CW\*(C`|\*(C'\fR.
Until this release, while the medium-precedence logical operators of \f(CW\*(C`&&\*(C'\fR and
\&\f(CW\*(C`||\*(C'\fR were also present, there was no exclusive-or equivalent.  This release
of Perl adds the final \f(CW\*(C`^^\*(C'\fR operator, completing the set.
.PP
.Vb 1
\&    $x ^^ $y and say "One of x or y is true, but not both";
.Ve
.ie n .SS """try""/""catch"" feature is no longer experimental"
.el .SS "\f(CWtry\fP/\f(CWcatch\fP feature is no longer experimental"
.IX Subsection "try/catch feature is no longer experimental"
Prior to this release, the \f(CW\*(C`try\*(C'\fR/\f(CW\*(C`catch\*(C'\fR feature for handling errors was
considered experimental. Introduced in Perl version 5.34.0, this is now
considered a stable language feature and its use no longer prints a warning.
It still must be enabled with the 'try' feature.
.PP
See "Try Catch Exception Handling" in perlsyn.
.ie n .SS """for"" iterating over multiple values at a time is no longer experimental"
.el .SS "\f(CWfor\fP iterating over multiple values at a time is no longer experimental"
.IX Subsection "for iterating over multiple values at a time is no longer experimental"
Prior to this release, iterating over multiple values at a time with \f(CW\*(C`for\*(C'\fR was
considered experimental. Introduced in Perl version 5.36.0, this is now
considered a stable language feature and its use no longer prints a warning.
See "Compound Statements" in perlsyn.
.ie n .SS """builtin"" module is no longer experimental"
.el .SS "\f(CWbuiltin\fP module is no longer experimental"
.IX Subsection "builtin module is no longer experimental"
Prior to this release, the builtin module and all of its functions were
considered experimental. Introduced in Perl version 5.36.0, this module is now
considered stable its use no longer prints a warning. However, several of its
functions are still considered experimental.
.ie n .SS "The "":5.40"" feature bundle adds ""try"""
.el .SS "The \f(CW:5.40\fP feature bundle adds \f(CWtry\fP"
.IX Subsection "The :5.40 feature bundle adds try"
The latest version feature bundle now contains the recently-stablized feature
\&\f(CW\*(C`try\*(C'\fR. As this feature bundle is used by the \f(CW\*(C`\-E\*(C'\fR commandline switch, these
are immediately available in \f(CW\*(C`\-E\*(C'\fR scripts.
.ie n .SS """use v5.40;"" imports builtin functions"
.el .SS "\f(CWuse v5.40;\fP imports builtin functions"
.IX Subsection "use v5.40; imports builtin functions"
In addition to importing a feature bundle, \f(CW\*(C`use v5.40;\*(C'\fR (or later versions)
imports the corresponding builtin version bundle.
.SH Security
.IX Header "Security"
.SS "CVE\-2023\-47038 \- Write past buffer end via illegal user-defined Unicode property"
.IX Subsection "CVE-2023-47038 - Write past buffer end via illegal user-defined Unicode property"
This vulnerability was reported directly to the Perl security team by
Nathan Mills \f(CW\*(C`the.true.nathan.mills@gmail.com\*(C'\fR.
.PP
A crafted regular expression when compiled by perl 5.30.0 through
5.38.0 can cause a one-byte attacker controlled buffer overflow in a
heap allocated buffer.
.SS "CVE\-2023\-47039 \- Perl for Windows binary hijacking vulnerability"
.IX Subsection "CVE-2023-47039 - Perl for Windows binary hijacking vulnerability"
This vulnerability was reported to the Intel Product Security Incident
Response Team (PSIRT) by GitHub user ycdxsb
<https://github.com/ycdxsb/WindowsPrivilegeEscalation>. PSIRT then
reported it to the Perl security team.
.PP
Perl for Windows relies on the system path environment variable to
find the shell (\f(CW\*(C`cmd.exe\*(C'\fR). When running an executable which uses
Windows Perl interpreter, Perl attempts to find and execute \f(CW\*(C`cmd.exe\*(C'\fR
within the operating system. However, due to path search order issues,
Perl initially looks for cmd.exe in the current working directory.
.PP
An attacker with limited privileges can exploit this behavior by
placing \f(CW\*(C`cmd.exe\*(C'\fR in locations with weak permissions, such as
\&\f(CW\*(C`C:\eProgramData\*(C'\fR. By doing so, when an administrator attempts to use
this executable from these compromised locations, arbitrary code can
be executed.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
.SS "reset EXPR now calls set-magic on scalars"
.IX Subsection "reset EXPR now calls set-magic on scalars"
Previously \f(CW\*(C`reset EXPR\*(C'\fR did not call set magic when clearing scalar variables.
This meant that changes did not propagate to the underlying internal state
where needed, such as for \f(CW$^W\fR, and did not result in an exception where the
underlying magic would normally throw an exception, such as for \f(CW$1\fR.
.PP
This means code that had no effect before may now actually have an effect,
including possibly throwing an exception.
.PP
\&\f(CW\*(C`reset EXPR\*(C'\fR already called set magic when modifying arrays and hashes.
.PP
This has no effect on plain \f(CW\*(C`reset\*(C'\fR used to reset one-match searches as with
\&\f(CW\*(C`m?pattern?\*(C'\fR.
.PP
[GH #20763 <https://github.com/Perl/perl5/issues/20763>]
.SS "Calling the import method of an unknown package produces a warning"
.IX Subsection "Calling the import method of an unknown package produces a warning"
Historically, it has been possible to call the \f(CW\*(C`import\*(C'\fR or \f(CW\*(C`unimport\*(C'\fR method of
any class, including ones which have not been defined, with an argument and not
experience an error.  For instance, this code will not throw an error in Perl
5.38:
.PP
.Vb 1
\&    Class::That::Does::Not::Exist\->import("foo");
.Ve
.PP
However, as of Perl 5.39.1 this is deprecated and will issue a warning. Note
that calling these methods with no arguments continues to silently succeed and
do nothing. For instance,
.PP
.Vb 1
\&    Class::That::Does::Not::Exist\->import();
.Ve
.PP
will continue to not throw an error.  This is because every class
implicitly inherits from the class UNIVERSAL which now defines an
\&\f(CW\*(C`import\*(C'\fR method.  In older perls there was no such method defined,
and instead the method calls for \f(CW\*(C`import\*(C'\fR and \f(CW\*(C`unimport\*(C'\fR were special
cased to not throw errors if there was no such method defined.
.PP
This change has been added because it makes it easier to detect case typos in
\&\f(CW\*(C`use\*(C'\fR statements when running on case-insensitive file systems.  For instance,
on Windows or other platforms with case-insensitive file systems on older perls
the following code
.PP
.Vb 1
\&    use STRICT \*(Aqrefs\*(Aq;
.Ve
.PP
would silently do nothing as the module is actually called \fIstrict.pm\fR, not
\&\fISTRICT.pm\fR, so it would be loaded but its import method would never be called.
It will also detect cases where a user passes an argument when using a package
that does not provide its own import, for instance most "pure" class
definitions do not define an import method.
.ie n .SS """return"" no longer allows an indirect object"
.el .SS "\f(CWreturn\fP no longer allows an indirect object"
.IX Subsection "return no longer allows an indirect object"
The \f(CW\*(C`return\*(C'\fR operator syntax now rejects indirect objects.  In most
cases this would compile and even run, but wasn't documented and could
produce confusing results, for example:
.PP
.Vb 8
\&    # note that sum hasn\*(Aqt been defined
\&    sub sum_positive {
\&        return sum grep $_ > 0, @_;
\&        # unexpectedly parsed as:
\&        #   return *sum, grep $_ > 0, @_;
\&        # ... with the bareword acting like an extra (typeglob) argument
\&    }
\&    say for sum_positive(\-1, 2, 3)
.Ve
.PP
produced:
.PP
.Vb 3
\&    *main::sum
\&    2
\&    3
.Ve
.PP
[GH #21716 <https://github.com/Perl/perl5/issues/21716>]
.ie n .SS "Class barewords no longer resolved as file handles in method calls under ""no feature ""bareword_filehandles"""""
.el .SS "Class barewords no longer resolved as file handles in method calls under \f(CWno feature ""bareword_filehandles""\fP"
.IX Subsection "Class barewords no longer resolved as file handles in method calls under no feature ""bareword_filehandles"""
Under \f(CW\*(C`no feature "bareword_filehandles"\*(C'\fR bareword file handles
continued to be resolved in method calls:
.PP
.Vb 3
\&    open FH, "<", $somefile or die;
\&    no feature \*(Aqbareword_filehandles\*(Aq;
\&    FH\->binmode;
.Ve
.PP
This has been fixed, so the:
.PP
.Vb 1
\&    FH\->binmode;
.Ve
.PP
will attempt to resolve \f(CW\*(C`FH\*(C'\fR as a class, typically resulting in a
runtime error.
.PP
The standard file handles such as \f(CW\*(C`STDOUT\*(C'\fR continue to be resolved as
a handle:
.PP
.Vb 2
\&    no feature \*(Aqbareword_filehandles\*(Aq;
\&    STDOUT\->flush; # continues to work
.Ve
.PP
Note that once perl resolves a bareword name as a class it will
continue to do so:
.PP
.Vb 12
\&    package SomeClass {
\&        sub somemethod{}
\&    }
\&    open SomeClass, "<", "somefile" or die;
\&    # SomeClass resolved as a handle
\&    SomeClass\->binmode;
\&    {
\&        no feature "bareword_filehandles";
\&        SomeClass\->somemethod;
\&    }
\&    # SomeClass resolved as a class
\&    SomeClass\->binmode;
.Ve
.PP
[GH #19426 <https://github.com/Perl/perl5/issues/19426>]
.SH Deprecations
.IX Header "Deprecations"
.IP \(bu 4
Using \f(CW\*(C`goto\*(C'\fR to jump from an outer scope into an inner scope is deprecated
and will be removed completely in Perl 5.42.  [GH #21601 <https://github.com/Perl/perl5/issues/21601>]
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
.IP \(bu 4
The negation OPs have been modified to support the generic \f(CW\*(C`TARGMY\*(C'\fR optimization.
[GH #21442 <https://github.com/Perl/perl5/issues/21442>]
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "New Modules and Pragmata"
.IX Subsection "New Modules and Pragmata"
.IP \(bu 4
Term::Table 0.018 has been added to the Perl core.
.Sp
This module is a dependency of Test2::Suite.
.IP \(bu 4
Test2::Suite 0.000162 has been added to the Perl core.
.Sp
This distribution contains a comprehensive set of test tools for writing unit
tests.  It is the successor to Test::More and similar modules.  Its
inclusion in the Perl core means that CPAN module tests can be written using
this suite of tools without extra dependencies.
.SS "Updated Modules and Pragmata"
.IX Subsection "Updated Modules and Pragmata"
.IP \(bu 4
Archive::Tar has been upgraded from version 2.40 to 3.02_001.
.IP \(bu 4
attributes has been upgraded from version 0.35 to 0.36.
.IP \(bu 4
autodie has been upgraded from version 2.36 to 2.37.
.IP \(bu 4
B has been upgraded from version 1.88 to 1.89.
.IP \(bu 4
B::Deparse has been upgraded from version 1.74 to 1.76.
.IP \(bu 4
Benchmark has been upgraded from version 1.24 to 1.25.
.IP \(bu 4
bignum has been upgraded from version 0.66 to 0.67.
.IP \(bu 4
builtin has been upgraded from version 0.008 to 0.014.
.Sp
builtin now accepts a version bundle as an input argument, requesting it to
import all of the functions that are considered a stable part of the module at
the given Perl version. For example:
.Sp
.Vb 1
\&    use builtin \*(Aq:5.40\*(Aq;
.Ve
.Sp
Added the \f(CWload_module()\fR builtin function as per PPC 0006 <https://github.com/Perl/PPCs/blob/main/ppcs/ppc0006-load-module.md>.
.IP \(bu 4
bytes has been upgraded from version 1.08 to 1.09.
.IP \(bu 4
Compress::Raw::Bzip2 has been upgraded from version 2.204_001 to 2.212.
.IP \(bu 4
Compress::Raw::Zlib has been upgraded from version 2.204_001 to 2.212.
.IP \(bu 4
CPAN::Meta::Requirements has been upgraded from version 2.140 to 2.143.
.IP \(bu 4
Data::Dumper has been upgraded from version 2.188 to 2.189.
.IP \(bu 4
DB_File has been upgraded from version 1.858 to 1.859.
.IP \(bu 4
Devel::Peek has been upgraded from version 1.33 to 1.34.
.IP \(bu 4
Devel::PPPort has been upgraded from version 3.71 to 3.72.
.IP \(bu 4
diagnostics has been upgraded from version 1.39 to 1.40.
.IP \(bu 4
DynaLoader has been upgraded from version 1.54 to 1.56.
.IP \(bu 4
Encode has been upgraded from version 3.19 to 3.21.
.IP \(bu 4
Errno has been upgraded from version 1.37 to 1.38.
.Sp
The \f(CW\*(C`osvers\*(C'\fR and \f(CW\*(C`archname\*(C'\fR baked into the module to ensure Errno is loaded
by the perl that built it are now more comprehensively escaped.
[GH #21135 <https://github.com/Perl/perl5/issues/21135>]
.IP \(bu 4
experimental has been upgraded from version 0.031 to 0.032.
.IP \(bu 4
Exporter has been upgraded from version 5.77 to 5.78.
.IP \(bu 4
ExtUtils::CBuilder has been upgraded from version 0.280238 to 0.280240.
.IP \(bu 4
ExtUtils::Manifest has been upgraded from version 1.73 to 1.75.
.IP \(bu 4
ExtUtils::Miniperl has been upgraded from version 1.13 to 1.14.
.IP \(bu 4
Fcntl has been upgraded from version 1.15 to 1.18.
.Sp
The old module documentation stub has been greatly expanded and revised.
.Sp
Adds support for the \f(CW\*(C`O_TMPFILE\*(C'\fR flag on Linux.
.IP \(bu 4
feature has been upgraded from version 1.82 to 1.89.
.Sp
It now documents the \f(CW\*(C`:all\*(C'\fR feature bundle, and suggests a reason why you may
not wish to use it.
.IP \(bu 4
fields has been upgraded from version 2.24 to 2.25.
.IP \(bu 4
File::Compare has been upgraded from version 1.1007 to 1.1008.
.IP \(bu 4
File::Find has been upgraded from version 1.43 to 1.44.
.IP \(bu 4
File::Glob has been upgraded from version 1.40 to 1.42.
.IP \(bu 4
File::Spec has been upgraded from version 3.89 to 3.90.
.IP \(bu 4
File::stat has been upgraded from version 1.13 to 1.14.
.IP \(bu 4
FindBin has been upgraded from version 1.53 to 1.54.
.IP \(bu 4
Getopt::Long has been upgraded from version 2.54 to 2.57.
.IP \(bu 4
Getopt::Std has been upgraded from version 1.13 to 1.14.
.Sp
Documentation and test improvements only; no change in functionality.
.IP \(bu 4
Hash::Util has been upgraded from version 0.30 to 0.32.
.IP \(bu 4
Hash::Util::FieldHash has been upgraded from version 1.26 to 1.27.
.IP \(bu 4
HTTP::Tiny has been upgraded from version 0.086 to 0.088.
.IP \(bu 4
I18N::Langinfo has been upgraded from version 0.22 to 0.24.
.Sp
It now handles the additional locale categories that Linux defines
beyond those in the POSIX Standard.
.Sp
This fixes what is returned for the \f(CW\*(C`ALT_DIGITS\*(C'\fR item, which has never
before worked properly in Perl.
.IP \(bu 4
IO has been upgraded from version 1.52 to 1.55.
.Sp
Fixed \f(CW\*(C`IO::Handle/blocking\*(C'\fR on Windows, which has been non-functional
since IO 1.32.  [GH #17455 <https://github.com/Perl/perl5/issues/17455>]
.IP \(bu 4
IO-Compress has been upgraded from version 2.204 to 2.212.
.IP \(bu 4
IO::Socket::IP has been upgraded from version 0.41_01 to 0.42.
.IP \(bu 4
IO::Zlib has been upgraded from version 1.14 to 1.15.
.IP \(bu 4
locale has been upgraded from version 1.10 to 1.12.
.IP \(bu 4
Math::BigInt has been upgraded from version 1.999837 to 2.003002.
.IP \(bu 4
Math::BigInt::FastCalc has been upgraded from version 0.5013 to 0.5018.
.IP \(bu 4
Module::CoreList has been upgraded from version 5.20230520 to 5.20240609.
.IP \(bu 4
Module::Metadata has been upgraded from version 1.000037 to 1.000038.
.IP \(bu 4
mro has been upgraded from version 1.28 to 1.29.
.IP \(bu 4
NDBM_File has been upgraded from version 1.16 to 1.17.
.IP \(bu 4
Opcode has been upgraded from version 1.64 to 1.65.
.IP \(bu 4
perl5db.pl has been upgraded from version 1.77 to 1.78.
.Sp
Made parsing of the \f(CW\*(C`l\*(C'\fR command arguments saner.
[GH #21350 <https://github.com/Perl/perl5/issues/21350>]
.IP \(bu 4
perlfaq has been upgraded from version 5.20210520 to 5.20240218.
.IP \(bu 4
PerlIO::encoding has been upgraded from version 0.30 to 0.31.
.IP \(bu 4
PerlIO::scalar has been upgraded from version 0.31 to 0.32.
.IP \(bu 4
PerlIO::via has been upgraded from version 0.18 to 0.19.
.IP \(bu 4
Pod::Checker has been upgraded from version 1.75 to 1.77.
.IP \(bu 4
Pod::Html has been upgraded from version 1.34 to 1.35.
.IP \(bu 4
Pod::Simple has been upgraded from version 3.43 to 3.45.
.IP \(bu 4
podlators has been upgraded from version 5.01 to 5.01_02.
.IP \(bu 4
POSIX has been upgraded from version 2.13 to 2.20.
.Sp
The \f(CW\*(C`mktime\*(C'\fR function now works correctly on 32\-bit platforms even if the
platform's \f(CW\*(C`time_t\*(C'\fR type is larger than 32 bits. [GH #21551 <https://github.com/Perl/perl5/issues/21551>]
.Sp
The \f(CW\*(C`T_SIGNO\*(C'\fR and \f(CW\*(C`T_FD\*(C'\fR typemap entries have been fixed so they work with
any variable name, rather than just the hardcoded \f(CW\*(C`sig\*(C'\fR and \f(CW\*(C`fd\*(C'\fR.
.Sp
The mappings for \f(CW\*(C`Mode_t\*(C'\fR, \f(CW\*(C`pid_t\*(C'\fR, \f(CW\*(C`Uid_t\*(C'\fR, \f(CW\*(C`Gid_t\*(C'\fR and \f(CW\*(C`Time_t\*(C'\fR have
been updated to be integer types; previously they were \f(CW\*(C`NV\*(C'\fR floating-point.
.Sp
Adjusted the \fBsignbit()\fR on NaN test to handle the unusual bit pattern
returned for NaN by Oracle Developer Studio's compiler.  [GH #21533 <https://github.com/Perl/perl5/issues/21533>]
.IP \(bu 4
re has been upgraded from version 0.44 to 0.47.
.IP \(bu 4
Safe has been upgraded from version 2.44 to 2.46.
.IP \(bu 4
SelfLoader has been upgraded from version 1.26 to 1.27.
.IP \(bu 4
Socket has been upgraded from version 2.036 to 2.038.
.IP \(bu 4
strict has been upgraded from version 1.12 to 1.13.
.IP \(bu 4
Test::Harness has been upgraded from version 3.44 to 3.48.
.IP \(bu 4
Test::Simple has been upgraded from version 1.302194 to 1.302199.
.IP \(bu 4
Text::Tabs has been upgraded from version 2021.0814 to 2024.001.
.IP \(bu 4
Text::Wrap has been upgraded from version 2021.0814 to 2024.001.
.IP \(bu 4
threads has been upgraded from version 2.36 to 2.40.
.Sp
An internal error has been made slightly more verbose
(\f(CW\*(C`Out of memory in perl:threads:ithread_create\*(C'\fR).
.IP \(bu 4
threads::shared has been upgraded from version 1.68 to 1.69.
.IP \(bu 4
Tie::File has been upgraded from version 1.07 to 1.09.
.Sp
Old compatibility code for perl 5.005 that was no longer functional has been
removed.
.IP \(bu 4
Time::gmtime has been upgraded from version 1.04 to 1.05.
.IP \(bu 4
Time::HiRes has been upgraded from version 1.9775 to 1.9777.
.IP \(bu 4
Time::Local has been upgraded from version 1.30 to 1.35.
.IP \(bu 4
Time::localtime has been upgraded from version 1.03 to 1.04.
.IP \(bu 4
Time::tm has been upgraded from version 1.00 to 1.01.
.IP \(bu 4
UNIVERSAL has been upgraded from version 1.15 to 1.17.
.IP \(bu 4
User::grent has been upgraded from version 1.04 to 1.05.
.IP \(bu 4
User::pwent has been upgraded from version 1.02 to 1.03.
.IP \(bu 4
version has been upgraded from version 0.9929 to 0.9930.
.IP \(bu 4
warnings has been upgraded from version 1.65 to 1.69.
.IP \(bu 4
XS::APItest has been upgraded from version 1.32 to 1.36.
.IP \(bu 4
XS::Typemap has been upgraded from version 0.19 to 0.20.
.SH Documentation
.IX Header "Documentation"
.SS "Changes to Existing Documentation"
.IX Subsection "Changes to Existing Documentation"
We have attempted to update the documentation to reflect the changes
listed in this document.  If you find any we have missed, open an issue
at <https://github.com/Perl/perl5/issues>.
.PP
Additionally, the following selected changes have been made:
.PP
\fIperlapi\fR
.IX Subsection "perlapi"
.IP \(bu 4
Corrected the documentation for \f(CW\*(C`Perl_form\*(C'\fR,
\&\f(CW\*(C`form_nocontext\*(C'\fR, and \f(CW\*(C`vform\*(C'\fR, which claimed that any later call to one
of them will destroy the previous returns from any.  This hasn't been true
since 5.6.0, except it does remain true if these are called during global
destruction.  With that caveat, the return of each of these is a fresh
string in a temporary that will automatically be freed by a call to
"\f(CW\*(C`FREETMPS\*(C'\fR" in perlapi or at at places such as statement boundaries.
.IP \(bu 4
Several internal functions now have documentation \- the various \f(CW\*(C`newSUB\*(C'\fR
functions, \f(CWnewANONLIST()\fR, \f(CWnewANONHASH()\fR, \f(CWnewSVREF()\fR and similar.
.PP
\fIperlclass\fR
.IX Subsection "perlclass"
.IP \(bu 4
Added a list of known bugs in the experimental \f(CW\*(C`class\*(C'\fR feature.
.PP
\fIperlfunc\fR
.IX Subsection "perlfunc"
.IP \(bu 4
The documentation for \f(CW\*(C`local\*(C'\fR,
\&\f(CW\*(C`my\*(C'\fR, \f(CW\*(C`our\*(C'\fR, and
\&\f(CW\*(C`state\*(C'\fR, has been updated to include examples
and descriptions of their effects within a statement.
.PP
\fIperlguts\fR
.IX Subsection "perlguts"
.IP \(bu 4
A new section has been added which describes the experimental
reference-counted argument stack build option (\f(CW\*(C`PERL_RC_STACK\*(C'\fR).
.PP
\fIperlclib\fR
.IX Subsection "perlclib"
.IP \(bu 4
Extensive guidance has been added for interfacing with the standard C
library, including many more functions to avoid, and how to cope with
locales and threads.
.PP
\fIperlhacktips\fR
.IX Subsection "perlhacktips"
.IP \(bu 4
Document we can't use compound literals or array designators due to C++
compatibility.  [GH #21073 <https://github.com/Perl/perl5/issues/21073>]
.IP \(bu 4
Document new functions \f(CWsv_mark_arenas()\fR and \f(CWsv_sweep_arenas()\fR
(which only exist on \f(CW\*(C`DEBUGGING\*(C'\fR builds)
.IP \(bu 4
Added brief documentation for some tools useful when developing perl
itself on Windows or Cygwin.
.PP
\fIperllol\fR
.IX Subsection "perllol"
.IP \(bu 4
Removed indirect object syntax in \f(CW\*(C`Dumpvalue\*(C'\fR example
.PP
\fIperlre\fR
.IX Subsection "perlre"
.IP \(bu 4
Removed statement suggesting \f(CW\*(C`/p\*(C'\fR is a no-op.
.PP
\fIperlref\fR
.IX Subsection "perlref"
.IP \(bu 4
Documented ref assignment in list context (as part of the \f(CW\*(C`refaliasing\*(C'\fR feature)
.PP
\fIperlop\fR
.IX Subsection "perlop"
.IP \(bu 4
The section on the empty pattern \f(CW\*(C`//\*(C'\fR has been amended to mention that the current dynamic scope is
used to find the last successful match.
.PP
\fIperlport\fR
.IX Subsection "perlport"
.IP \(bu 4
The \f(CW\*(C`\-S\*(C'\fR file test has been meaningful on Win32 since 5.37.6
.IP \(bu 4
The \f(CW\*(C`\-l\*(C'\fR file test is now meaningful on Win32
.IP \(bu 4
Some strange behaviour with \f(CW\*(C`.\*(C'\fR at the end of names under Windows has been documented
.PP
\fIperlvar\fR
.IX Subsection "perlvar"
.IP \(bu 4
Added documentation for an alternative to \f(CW\*(C`${^CAPTURE}\*(C'\fR
.SH Diagnostics
.IX Header "Diagnostics"
The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see perldiag.
.SS "New Diagnostics"
.IX Subsection "New Diagnostics"
\fINew Errors\fR
.IX Subsection "New Errors"
.IP \(bu 4
Cannot use _\|_CLASS_\|_ outside of a method or field initializer expression
.Sp
(F) A \f(CW\*(C`_\|_CLASS_\|_\*(C'\fR expression yields the class name of the object instance
executing the current method, and therefore it can only be placed inside an
actual method (or method-like expression, such as a field initializer
expression).
.IP \(bu 4
get_layers: unknown argument '%s'
.Sp
(F) You called \fBPerlIO::get_layers()\fR with an unknown argument. Legal
arguments are provided in key/value pairs, with the keys being one
of \f(CW\*(C`input\*(C'\fR, \f(CW\*(C`output\*(C'\fR or \f(CW\*(C`detail\*(C'\fR, followed by a boolean.
.IP \(bu 4
UNIVERSAL does not export anything
.Sp
(F) You asked UNIVERSAL to export something, but UNIVERSAL is the
base class for all classes and contains no exportable symbols.
.IP \(bu 4
Builtin version bundle "%s" is not supported by Perl
.Sp
(F) You attempted to \f(CW\*(C`use builtin :ver\*(C'\fR for a version number that is either
older than 5.39 (when the ability was added), or newer than the current perl
version.
.IP \(bu 4
Invalid version bundle "%s"
.Sp
(F) A version number that is used to specify an import bundle during a
\&\f(CW\*(C`use builtin ...\*(C'\fR statement must be formatted as \f(CW\*(C`:MAJOR.MINOR\*(C'\fR with an
optional third component, which is ignored.  Each component must be a number
of 1 to 3 digits. No other characters are permitted.  The value that was
specified does not conform to these rules.
.IP \(bu 4
Missing comma after first argument to return
.Sp
(F) While certain operators allow you to specify a filehandle or an
"indirect object" before the argument list, \f(CW\*(C`return\*(C'\fR isn't one of
them.
.IP \(bu 4
Out of memory during vec in lvalue context
.Sp
(F) An attempt was made to extend a string beyond the largest possible memory
allocation by assigning to \f(CWvec()\fR called with a large second argument.
.Sp
(This case used to throw a generic \f(CW\*(C`Out of memory!\*(C'\fR error.)
.IP \(bu 4
Cannot create an object of incomplete class "%s"
.Sp
(F) An attempt was made to create an object of a class where the start
of the class definition has been seen, but the class has not been
completed.
.Sp
This can happen for a failed eval, or if you attempt to create an
object at compile time before the class is complete:
.Sp
.Vb 2
\&  eval "class Foo {"; Foo\->new; # error
\&  class Bar { BEGIN { Bar\->new } }; # error
.Ve
.Sp
Previously perl would assert or crash. [GH #22159 <https://github.com/Perl/perl5/issues/22159>]
.PP
\fINew Warnings\fR
.IX Subsection "New Warnings"
.IP \(bu 4
Forked open '%s' not meaningful in <>
.Sp
(S inplace) You had \f(CW\*(C`|\-\*(C'\fR or \f(CW\*(C`\-|\*(C'\fR in \f(CW@ARGV\fR and tried to use \f(CW\*(C`<>\*(C'\fR to read from it.
.Sp
Previously this would fork and produce a confusing error message. [GH #21176 <https://github.com/Perl/perl5/issues/21176>]
.IP \(bu 4
Attempt to call undefined \f(CW%s\fR method with arguments ("%s"%s) via package "%s" (Perhaps you forgot to load the package?)
.Sp
(D deprecated::missing_import_called_with_args) You called the
\&\f(CWimport()\fR or \f(CWunimport()\fR method of a class that has no import method
defined in its inheritance graph, and passed an argument to the method.
This is very often the sign of a misspelled package name in a use or
require statement that has silently succeeded due to a case insensitive
file system.
.Sp
Another common reason this may happen is when mistakenly attempting to
import or unimport a symbol from a class definition or package which
does not use \f(CW\*(C`Exporter\*(C'\fR or otherwise define its own \f(CW\*(C`import\*(C'\fR or
\&\f(CW\*(C`unimport\*(C'\fR method.
.SS "Changes to Existing Diagnostics"
.IX Subsection "Changes to Existing Diagnostics"
.IP \(bu 4
Name "%s::%s" used only once: possible typo
.Sp
This warning now honors being marked as fatal.  [GH #13814 <https://github.com/Perl/perl5/issues/13814>]
.IP \(bu 4
Out of memory in perl:%s
.Sp
There used to be several places in the perl core that would print a generic
\&\f(CW\*(C`Out of memory!\*(C'\fR message and abort when memory allocation failed, giving no
indication which program it was that ran out of memory.  These have been
modified to include the word \f(CW\*(C`perl\*(C'\fR and the general area of the allocation
failure, e.g. \f(CW\*(C`Out of memory in perl:util:safesysrealloc\*(C'\fR.  [GH #21672 <https://github.com/Perl/perl5/issues/21672>]
.IP \(bu 4
Possible precedence issue with control flow operator (%s)
.Sp
This warning now mentions the name of the control flow operator that triggered
the diagnostic (e.g. \f(CW\*(C`return\*(C'\fR, \f(CW\*(C`exit\*(C'\fR, \f(CW\*(C`die\*(C'\fR, etc).
.Sp
It also covers more cases: Previously, the warning was only triggered if a
low-precedence logical operator (like \f(CW\*(C`and\*(C'\fR, \f(CW\*(C`or\*(C'\fR, \f(CW\*(C`xor\*(C'\fR) was involved.  Now
it is also shown for misleading code like this:
.Sp
.Vb 2
\&    exit $x ? 0 : 1;  # actually parses as: exit($x) ? 0 : 1;
\&    exit $x == 0;     # actually parses as: exit($x) == 0;
.Ve
.IP \(bu 4
Use of uninitialized value%s
.Sp
This warning is now slightly more accurate in cases involving \f(CW\*(C`length\*(C'\fR,
\&\f(CW\*(C`pop\*(C'\fR, \f(CW\*(C`shift\*(C'\fR, or \f(CW\*(C`splice\*(C'\fR:
.Sp
.Vb 6
\&    my $x;
\&    length($x) == 0
\&    # Before:
\&    #  Use of uninitialized value $x in numeric eq (==) at ...
\&    # Now:
\&    #  Use of uninitialized value length($x) in numeric eq (==) at ...
.Ve
.Sp
That is, the warning no longer implies that \f(CW$x\fR was used directly as an
operand of \f(CW\*(C`==\*(C'\fR, which it wasn't.
.Sp
Similarly:
.Sp
.Vb 6
\&    my @xs;
\&    shift @xs == 0
\&    # Before:
\&    #  Use of uninitialized value within @xs in numeric eq (==) at ...
\&    # Now:
\&    #  Use of uninitialized value shift(@xs) in numeric eq (==) at ...
.Ve
.Sp
This is more accurate because there never was an \f(CW\*(C`undef\*(C'\fR within \f(CW@xs\fR as the
warning implied. (The warning for \f(CW\*(C`pop\*(C'\fR works analogously.)
.Sp
Finally:
.Sp
.Vb 6
\&    my @xs = (1, 2, 3);
\&    splice(@xs, 0, 0) == 0
\&    # Before:
\&    #  Use of uninitialized value within @xs in numeric eq (==) at ...
\&    # Now:
\&    #  Use of uninitialized value in numeric eq (==) at ...
.Ve
.Sp
That is, in cases where \f(CW\*(C`splice\*(C'\fR returns \f(CW\*(C`undef\*(C'\fR, it no longer
unconditionally blames its first argument. This was misleading because
\&\f(CW\*(C`splice\*(C'\fR can return \f(CW\*(C`undef\*(C'\fR even if none of its arguments contain \f(CW\*(C`undef\*(C'\fR.
.Sp
[GH #21930 <https://github.com/Perl/perl5/issues/21930>]
.IP \(bu 4
Old package separator "'" deprecated
.Sp
Prevent this warning appearing spuriously when checking the heuristic for the
You need to quote "%s" warning.
.Sp
[GH #22145 <https://github.com/Perl/perl5/issues/22145>]
.SH "Configuration and Compilation"
.IX Header "Configuration and Compilation"
.IP \(bu 4
\&\f(CW\*(C`microperl\*(C'\fR, long broken and of unclear present purpose, has been removed
as promised in Perl 5.18.
.IP \(bu 4
Fix here-doc used for code to probe \f(CW\*(C`LC_ALL\*(C'\fR syntax for disparate
locales introduced in 5.39.2.  [GH #21451 <https://github.com/Perl/perl5/issues/21451>]
.IP \(bu 4
You can now separately enable high water mark checks for non-DEBUGGING
or disable them for DEBUGGING builds with \f(CW\*(C`\-Accflags=\-DPERL_USE_HWM\*(C'\fR
or \f(CW\*(C`\-Accflags=\-DPERL_NO_HWM\*(C'\fR respectively.  The default remains the
same.  [GH #16607 <https://github.com/Perl/perl5/issues/16607>]
.SH Testing
.IX Header "Testing"
Tests were added and changed to reflect the other additions and
changes in this release.  Furthermore, these significant changes were
made:
.IP \(bu 4
Update \fInm\fR output parsing for Darwin in \fIt/porting/libperl.t\fR to handle
changes in the output of nm on Darwin.
[GH #21117 <https://github.com/Perl/perl5/issues/21117>]
.IP \(bu 4
\&\fIt/op/magic.t\fR would fail when \f(CW\*(C`ps\*(C'\fR was the BusyBox implementation,
since that doesn't support the \f(CW\*(C`\-p\*(C'\fR flag and otherwise ignores a
process id on the command-line.  This caused \fITEST\fR failures on
BusyBox systems such as Alpine Linux.  [GH #17542 <https://github.com/Perl/perl5/issues/17542>]
.IP \(bu 4
\&\fIporting/globvar.t\fR now uses the more portable \f(CW\*(C`nm \-P ...\*(C'\fR to fetch
the names defined in an object file.  The parsing of the names found
in the object is now separated from processing them to handle the
duplication between local and global definitions on AIX.  [GH #21637 <https://github.com/Perl/perl5/issues/21637>]
.IP \(bu 4
A test was added to \fIlib/locale_threads.t\fR that extensively stress
tests locale handling.  It turns out that the libc implementations on
various platforms have bugs in this regard, including Linux, Windows,
*BSD derivatives including Darwin, and others.  Experimental versions of
this test have been used in the past few years to find bugs in the Perl
implementation and in those platforms, as well as to develop workarounds
in the Perl implementation, where feasible, for the platform bugs.
Multiple bug report tickets have been filed against platforms, and some
have been fixed.  The test checks that platforms that purport to support
thread-safe locale handling actually do so (and that perl works properly
on those that do;  The read-only variable \f(CW\*(C`${^SAFE_LOCALES}\*(C'\fR is set to
1 if perl thinks the platform can handle this, whatever the platform's
documentation says).
.Sp
Also tested for is if the various locale categories can indeed be set
independently to disparate locales.  (An example of where you might want
to do this is if you are a Western Canadian living and working in
Holland.  You likely will want to have the \f(CW\*(C`LC_MONETARY\*(C'\fR locale be
set to where you are living, but have the other parts of your locale
retain your native English values.  Later, as you get a bit more
comfortable with Dutch, and in order to communicate better with your
colleagues, you might want to change \f(CW\*(C`LC_TIME\*(C'\fR and \f(CW\*(C`LC_NUMERIC\*(C'\fR to
Dutch, while leaving \f(CW\*(C`LC_CTYPE\*(C'\fR and \f(CW\*(C`LC_COLLATE\*(C'\fR set to English
indefinitely.)
.IP \(bu 4
The test \fIt/porting/libperl.t\fR will no longer run in maint releases.
This test is sensitive to changes in the output of \fInm\fR on various
platforms, and tarballs aren't updated as we update this test in
blead.  [GH #21677 <https://github.com/Perl/perl5/issues/21677>]
.SH "Platform Support"
.IX Header "Platform Support"
.SS "New Platforms"
.IX Subsection "New Platforms"
.IP "Serenity OS" 4
.IX Item "Serenity OS"
Out of the box support for Serenity OS was added.
.SS "Platform-Specific Notes"
.IX Subsection "Platform-Specific Notes"
.IP Windows 4
.IX Item "Windows"
Eliminated several header build warnings under MSVC with \f(CW\*(C`/W4\*(C'\fR to reduce noise
for embedders.  [GH #21031 <https://github.com/Perl/perl5/issues/21031>]
.Sp
Work around a bug in most 32\-bit Mingw builds, where the generated
code, including the code in the gcc support library, assumes 16\-byte
stack alignment, which 32\-bit Windows does not preserve. [GH #21313 <https://github.com/Perl/perl5/issues/21313>]
.Sp
Enable \f(CW\*(C`copysign\*(C'\fR, \f(CW\*(C`signbit\*(C'\fR, \f(CW\*(C`acosh\*(C'\fR, \f(CW\*(C`asinh\*(C'\fR, \f(CW\*(C`atanh\*(C'\fR, \f(CW\*(C`exp2\*(C'\fR,
\&\f(CW\*(C`tgamma\*(C'\fR in the bundled configuration used for MSVC.  [GH #21610 <https://github.com/Perl/perl5/issues/21610>]
.Sp
The build process no longer supports Visual Studio 2013.  This was
failing to build at a very basic level and there have been no reports
of such failures.  [GH #21624 <https://github.com/Perl/perl5/issues/21624>]
.IP Linux 4
.IX Item "Linux"
The hints file has been updated to handle the Intel oneAPI DPC++/C++ compiler.
.IP MacOS/Darwin 4
.IX Item "MacOS/Darwin"
Don't set \f(CW\*(C`MACOSX_DEPLOYMENT_TARGET\*(C'\fR when building on OS X 10.5.  [GH
#21367 <https://github.com/Perl/perl5/issues/21367>]
.IP VMS 4
.IX Item "VMS"
Fixed the configure "installation prefix" prompt to accept a string rather than
yes/no.
.Sp
Fixed compilation by defining proper value for
\&\f(CW\*(C`perl_lc_all_category_positions_init\*(C'\fR.
.Sp
Increased buffer size when reading \fIconfig_H.SH\fR to fix compilation under
clang.
.IP "Oracle Developer Studio (Solaris, Oracle Linux)" 4
.IX Item "Oracle Developer Studio (Solaris, Oracle Linux)"
Due to an apparent code generation bug, the default optimization level
for the Oracle Developer Studio (formerly Sun Workshop) compiler is
now \f(CW\*(C`\-xO1\*(C'\fR. [GH #21535 <https://github.com/Perl/perl5/issues/21535>]
.SH "Internal Changes"
.IX Header "Internal Changes"
.IP \(bu 4
\&\f(CW\*(C`PERL_RC_STACK\*(C'\fR build option added.
.Sp
This new build option is highly experimental and is not enabled by
default. Perl can be built with it by using the \fIConfigure\fR option
\&\f(CW\*(C`\-Accflags=\*(Aq\-DPERL_RC_STACK\*(Aq\*(C'\fR.
.Sp
It makes the argument stack bump the reference count of SVs pushed onto
it. It is mostly functional, but currently slow and incomplete.
.Sp
It is intended in the long term that this build option will become
the default option, and then finally the only option; but this will be
many releases away.
.Sp
In particular, there is currently no support within XS code for using
these new features. So under this build option, all XS functions are
called via a backwards-compatibility wrapper which slows down such calls.
.Sp
In future releases, better support for XS code is intended to be added.
It is expected that straightforward XS code will eventually be able to
make use of a reference-counted stack without modification, with any heavy
lifting being handled by the XS compiler (\f(CW\*(C`xsubpp\*(C'\fR) and the macros which
it outputs. But code which implements \fBPP()\fR functions will eventually have
to be modified to use a new PP API: \fBrpp_foo()\fR rather than \fBPUSHs()\fR etc. But
this new API is not yet stable, nor has it yet been back-ported via
\&\f(CW\*(C`Devel::PPPort\*(C'\fR.
.Sp
See perlguts for more
details.
.IP \(bu 4
A new API function has been added that simplifies C (or XS) code that creates
\&\f(CW\*(C`LISTOP\*(C'\fR optree fragments.  \f(CWnewLISTOPn()\fR is a variadic function that takes
a \f(CW\*(C`NULL\*(C'\fR\-terminated list of child op pointers, and constructs a new checked
\&\f(CW\*(C`LISTOP\*(C'\fR to contain them all.  This is simpler than creating a new plain
\&\f(CW\*(C`OP_LIST\*(C'\fR, adding each child individually, and finally calling
\&\f(CWop_convert_list()\fR in most code fragments.
.IP \(bu 4
The \f(CWeval_sv()\fR API now accepts the \f(CW\*(C`G_USEHINTS\*(C'\fR flag, which uses
the hints such as strict and features from \f(CW\*(C`PL_curcop\*(C'\fR instead of the
default, which is to use default hints, e.g. no \f(CW\*(C`use vX.XX;\*(C'\fR, no
strict, default features.
.Sp
Beware if you use this flag in XS code: your evaluated code will need
to support whatever strictness or features are in effect at the point
your XS function is called.
.Sp
[GH #21415 <https://github.com/Perl/perl5/issues/21415>]
.IP \(bu 4
\&\f(CW\*(C`PERL_VERSION_LE\*(C'\fR has been fixed to properly check for "less than or equal"
rather than "less than".
.IP \(bu 4
\&\f(CW\*(C`dAX\*(C'\fR, \f(CW\*(C`dITEMS\*(C'\fR and hence \f(CW\*(C`dXSARGS\*(C'\fR now declare \f(CW\*(C`AX\*(C'\fR and \f(CW\*(C`items\*(C'\fR
as \f(CW\*(C`Stack_off_t\*(C'\fR rather than \f(CW\*(C`SSize_t\*(C'\fR.  This reverts back to
compatibility with pre\-64\-bit stack support for default builds of perl
where \f(CW\*(C`Stack_off_t\*(C'\fR is \f(CW\*(C`I32\*(C'\fR.  [GH #21782 <https://github.com/Perl/perl5/issues/21782>]
.IP \(bu 4
A new function is now available to \f(CW\*(C`XS\*(C'\fR code, "sv_langinfo" in perlapi.
This provides the same information as the existing
"Perl_langinfo8" in perlapi, but returns an SV instead of a \f(CW\*(C`char\ *\*(C'\fR,
so that programmers don't have to concern themselves with the UTF\-8ness
of the result.  This new function is now the preferred interface for
\&\f(CW\*(C`XS\*(C'\fR code to the \fBnl_langinfo\fR\|(3) \f(CW\*(C`libc\*(C'\fR function.  From Perl space,
this information continues to be provided by the I18N::Langinfo
module.
.IP \(bu 4
glibc has an undocumented equivalent function to \fBquerylocale()\fR, which
our experience indicates is reliable. When this is function is used,
it removes the need for perl to keep its own records, hence is more
efficient and guaranteed to be accurate. Use of this function can be
disabled by defining the \f(CW\*(C`NO_NL_LOCALE_NAME\*(C'\fR build option
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP \(bu 4
The delimiter \f(CW\*(C`SYRIAC COLON SKEWED LEFT/RIGHT\*(C'\fR pair has been removed
from the ones recognized by the \f(CW\*(C`extra_paired_delimiters\*(C'\fR feature.
(See "Quote and Quote-like Operators" in perlop.)  This is because those
characters are normally written right-to-left, and this could be
visually confusing [GH #22228 <https://github.com/Perl/perl5/issues/22228>].
The change was actually to forbid any right-to-left delimiters, but this
pair is the only current instance that meets this criterion.  By policy,
this change means that the \f(CW\*(C`extra_paired_delimiters\*(C'\fR feature cannot be
considered to have been stable long enough for its experimental status to
be removed.
.IP \(bu 4
\&\f(CW\*(C`use 5.36;\*(C'\fR or later didn't enable the post parse reporting of Name
"%s::%s" used only once: possible typo warnings when enabling warnings.
[GH #21271 <https://github.com/Perl/perl5/issues/21271>]
.IP \(bu 4
Fix a crash or assertion when cleaning up a closure that refers to an
outside \f(CW\*(C`our\*(C'\fR sub.  [GH #21067 <https://github.com/Perl/perl5/issues/21067>]
.IP \(bu 4
Fixed a number of issues where \f(CW\*(C`I32\*(C'\fR was used as a string offset or
size rather than \f(CW\*(C`SSize_t\*(C'\fR or \f(CW\*(C`STRLEN\*(C'\fR/\f(CW\*(C`size_t\*(C'\fR [GH #21012 <https://github.com/Perl/perl5/issues/21012>]
.IP \(bu 4
\&\f(CW\*(C`~$str\*(C'\fR when \f(CW$str\fR was more than 2GB in size would do nothing or
produce an incomplete result.
.IP \(bu 4
String repeat, \f(CW\*(C`$str x $count\*(C'\fR, didn't handle \f(CW$str\fR over 2GB in
size, throwing an error.  Now such strings are repeated.
.IP \(bu 4
Complex substitution after the 2GB point in a string could access
incorrect or invalid offsets in the string.
.IP \(bu 4
\&\fBsv_utf8_decode()\fR would truncate the SVs \fBpos()\fR value.  This wasn't
visible via \fButf8::decode()\fR.
.IP \(bu 4
When compiling a constant folded hash key, the length was truncated
when creating the shared SV.  Since hash keys over 2GB are not
supported, throw a compilation error instead.
.IP \(bu 4
\&\fBmsgrcv()\fR incorrectly called get magic on the buffer SV and failed to
call set magic on completion.
[GH #21012 <https://github.com/Perl/perl5/issues/21012>]
.IP \(bu 4
\&\fBmsgrcv()\fR used the size parameter to resize the buffer before
validating it. [GH #21012 <https://github.com/Perl/perl5/issues/21012>]
.IP \(bu 4
Inheriting from a class that was hierarchically an ancestor of the new
class, eg. \f(CW\*(C` class A::B :isa(A) { ... } \*(C'\fR, would not attempt to load
the parent class. [GH #21332 <https://github.com/Perl/perl5/issues/21332>]
.IP \(bu 4
Declared references can now be used with \f(CW\*(C`state\*(C'\fR variables.
[GH #21351 <https://github.com/Perl/perl5/issues/21351>]
.IP \(bu 4
Trailing elements in an \f(CW\*(C`unshift\*(C'\fRed and resized array will now always be
initialized. [GH #21265 <https://github.com/Perl/perl5/issues/21265>]
.IP \(bu 4
Make \f(CW\*(C`use 5.036\*(C'\fR respect the \-X flag
.Sp
perl's \-X flag disables all warnings globally, but «use 5.036» didn't
respect that until now. [GH #21431 <https://github.com/Perl/perl5/issues/21431>]
.IP \(bu 4
Fixed an OP leak when an error was produced for initializer for a class
field. [GH #20812 <https://github.com/Perl/perl5/issues/20812>]
.IP \(bu 4
Fixed a leak of the return value when smartmatching against a code reference.
.IP \(bu 4
Fixed a slowdown in repeated substitution replacements using special
variables, such as \f(CW\*(C`s/....x$1/g\*(C'\fR. It actually makes all string
concatenations involving such "magic" variables less slow, but the
slowdown was more noticeable on repeated substitutions due to extra memory
usage that was only freed after the last iteration. The slowdown started
in perl 5.28.0 \- which generally sped up string concatenation but slowed
down when using special variables.
[GH #21360 <https://github.com/Perl/perl5/issues/21360>]
.IP \(bu 4
Lexical names from the enclosing scope in a lexical sub or closure
weren't visible to code executed by calling \f(CW\*(C`eval EXPR;\*(C'\fR from the
\&\f(CW\*(C`DB\*(C'\fR package.  This was introduced in 5.18 in an attempt to prevent
subs from retaining a reference to their outer scope, but this broke
the special behaviour of \f(CW\*(C`eval EXPR;\*(C'\fR in package DB.
.Sp
This incidentally fixed a TODO test for \f(CW\*(C`B::Deparse\*(C'\fR.
[GH #19370 <https://github.com/Perl/perl5/pull/19370>]
.IP \(bu 4
Optionally support an argument stack over 2**32 entries on 64\-bit
platforms.  This requires 32GB of memory just for the argument stack
pointers itself, so you will require a significantly more memory to
take advantage of this.
.Sp
To enable this add \f(CW\*(C`\-Accflags=\-DPERL_STACK_OFFSET_SSIZET\*(C'\fR or
equivalent to the \f(CW\*(C`Configure\*(C'\fR command-line.
.Sp
[GH #20917 <https://github.com/Perl/perl5/issues/20917>]
[GH #21523 <https://github.com/Perl/perl5/issues/21523>]
.IP \(bu 4
Fixed various problems with \fBjoin()\fR where modifications to the
separator could be handled inconsistently, or could access released
memory.  Changes to the separator from magic or overloading for values
in the \f(CW\*(C`LIST\*(C'\fR no longer have an effect on the resulting joined
string.
[GH #21458 <https://github.com/Perl/perl5/issues/21458>]
.IP \(bu 4
Don't clear the integer flag \f(CW\*(C`IOK\*(C'\fR from lines in the \f(CW\*(C`@{"_<$sourcefile"}\*(C'\fR array when a \f(CW\*(C`dbstate\*(C'\fR op is removed for that
line.  This was broken when fixing
[GH #19198 <https://github.com/Perl/perl5/issues/19198>].
[GH #21564 <https://github.com/Perl/perl5/issues/21564>]
.IP \(bu 4
Many bug fixes have been made for using locales under threads and in
embedded perls.  And workarounds for libc bugs have been added.  As a
result thread-safe locale handling is now the default under OpenBSD, and
MingW when compiled with UCRT.
.Sp
However, testing has shown that Darwin's implementation of thread-safe
locale handling has bugs.  So now Perl doesn't attempt to use the
thread-safe operations when compiled on Darwin.
.Sp
As before, you can check to see if your program is running with
thread-safe locales by checking if the value of \f(CW\*(C`${^SAFE_LOCALES}\*(C'\fR is
1.
.IP \(bu 4
Various bugs have been fixed when perl is configured with
\&\f(CW\*(C`\-Accflags=\-DNO_LOCALE_NUMERIC\*(C'\fR or any other locale category (or
categories).
.IP \(bu 4
Not all locale categories need be set to the same locale.  Perl now
works around bugs in the libc implementations of locale handling on some
platforms that previously could result in mojibake.
.IP \(bu 4
\&\f(CW\*(C`LC_ALL\*(C'\fR is represented in one of two ways when not all locale
categories are set to the same locale.  On some platforms, such as Linux
and Windows, the representation is of the form of a series of
\&\f(CW\*(Aqcategory=locale\-name\*(Aq\fR pairs.  On other platforms, such as *BSD, the
representation is positional like \f(CW\*(C`\fR\f(CIname1\fR\f(CW\ /\ \fR\f(CIname2\fR\f(CW\ /\ ...\ \*(C'\fR.
\&\fIname1\fR is always for a particular category as defined by the platform,
as are the other names.  The sequence that separates the names
(the \f(CW\*(C`\ /\ \*(C'\fR above) also varies by platform.  Previously, perl had
problems with platforms that used the positional notation.  This is now
fixed.
.IP \(bu 4
A bug has been fixed in the regexp engine with an optimisation that applies
to the \f(CW\*(C`+\*(C'\fR quantifier where it was followed by a \f(CW\*(C`(*SKIP)\*(C'\fR pattern.
.Sp
[GH #21534 <https://github.com/Perl/perl5/issues/21534>]
.IP \(bu 4
The tmps (mortal) stack now grows exponentially.  Previously it grew
linearly, so if it was growing incrementally, such as through many
calls to \fBsv_2mortal()\fR, on a system where \fBrealloc()\fR is O(size), the
performance would be O(n*n).  With exponential grows this changes to
amortized O(n).  [GH #21654 <https://github.com/Perl/perl5/issues/21654>]
.IP \(bu 4
Lexical subs now have a new stub in the pad for each recursive call
into the containing function.  This fixes two problems:
.RS 4
.IP \(bu 4
If the lexical sub called the containing function, a "Can't undef
active subroutine" error would be thrown.  For example:
.Sp
.Vb 8
\&    use v5.36.0;
\&    sub outer($oc) {
\&        my sub inner ($c) {
\&             outer($c\-1) if $c; # Can\*(Aqt undef active subroutine
\&        }
\&        inner($oc);
\&    }
\&    outer(2);
.Ve
.Sp
[GH #18606 <https://github.com/Perl/perl5/issues/18606>]
.IP \(bu 4
If the lexical sub was called from a recursive call into the
containing function, this would overwrite the bindings to the closed
over variables in the lexical sub, so calls into the lexical sub from
the outer recursive call would have access to the variables from the
inner recursive call:
.Sp
.Vb 11
\&    use v5.36.0;
\&    sub outer ($x) {
\&        my sub inner ($label) {
\&            say "$label $x";
\&        }
\&        inner("first");
\&        outer("inner") if $x eq "outer";
\&        # this call to inner() sees the wrong $x
\&        inner("second");
\&    }
\&    outer("outer");
.Ve
.Sp
[GH #21987 <https://github.com/Perl/perl5/issues/21987>]
.RE
.RS 4
.RE
.IP \(bu 4
\&\fBprepare_export_lexical()\fR was separately saving \f(CW\*(C`PL_comppad\*(C'\fR and
\&\f(CW\*(C`PL_curpad\*(C'\fR, this could result in \f(CW\*(C`PL_curpad\*(C'\fR being restored to a no
longer valid value, resulting in a panic when importing lexicals in
some cases.  [GH #21981 <https://github.com/Perl/perl5/issues/21981>]
.IP \(bu 4
A string \fBeval()\fR operation in the scope of a \f(CW\*(C`use VERSION\*(C'\fR declaration would
sometimes emit spurious "Downgrading a use VERSION declaration" warnings due
to an inconsistency in the way the version number was stored.  This is now
fixed.
[GH #22121 <https://github.com/Perl/perl5/issues/22121>]
.SH "Known Problems"
.IX Header "Known Problems"
.IP \(bu 4
perlivp is missing streamzip on Windows
.Sp
The \f(CW\*(C`streamzip\*(C'\fR utility does not get installed on Windows but should
get installed.
.SH "Errata From Previous Releases"
.IX Header "Errata From Previous Releases"
.IP \(bu 4
perl5300delta has been updated to include the removal of the \f(CW\*(C`arybase\*(C'\fR module that happened at
the same time as the removal of \f(CW$[\fR.
.SH Acknowledgements
.IX Header "Acknowledgements"
Perl 5.40.0 represents approximately 11 months of development since Perl
5.38.0 and contains approximately 160,000 lines of changes across 1,500
files from 75 authors.
.PP
Excluding auto-generated files, documentation and release tools, there were
approximately 110,000 lines of changes to 1,200 .pm, .t, .c and .h files.
.PP
Perl continues to flourish into its fourth decade thanks to a vibrant
community of users and developers. The following people are known to have
contributed the improvements that became Perl 5.40.0:
.PP
Abe Timmerman, Alexander Kanavin, Amory Meltzer, Aristotle Pagaltzis, Arne
Johannessen, Beckett Normington, Bernard Quatermass, Bernd, Bruno Meneguele,
Chad Granum, Chris 'BinGOs' Williams, Christoph Lamprecht, Craig A. Berry,
Dagfinn Ilmari Mannsåker, Dan Book, Dan Church, Daniel Böhmer, Dan
Jacobson, Dan Kogai, David Golden, David Mitchell, E. Choroba, Elvin
Aslanov, Erik Huelsmann, Eugen Konkov, Gianni Ceccarelli, Graham Knop, Greg
Kennedy, guoguangwu, Hauke D, H.Merijn Brand, Hugo van der Sanden, iabyn,
Jake Hamby, Jakub Wilk, James E Keenan, James Raspass, Joe McMahon, Johan
Vromans, John Karr, Karen Etheridge, Karl Williamson, Leon Timmermans, Lukas
Mai, Marco Fontani, Marek Rouchal, Martijn Lievaart, Mathias Kende, Matthew
Horsfall, Max Maischein, Nicolas Mendoza, Nicolas R, OpossumPetya, Paul
Evans, Paul Marquess, Peter John Acklam, Philippe Bruhat (BooK), Raul E
Rangel, Renee Baecker, Ricardo Signes, Richard Leach, Scott Baker, Sevan
Janiyan, Sisyphus, Steve Hay, TAKAI Kousuke, Todd Rinaldo, Tomasz Konojacki,
Tom Hughes, Tony Cook, William Lyu, x\-yuri, Yves Orton, Zakariyya Mughal,
Дилян Палаузов.
.PP
The list above is almost certainly incomplete as it is automatically
generated from version control history. In particular, it does not include
the names of the (very much appreciated) contributors who reported issues to
the Perl bug tracker.
.PP
Many of the changes included in this version originated in the CPAN modules
included in Perl's core. We're grateful to the entire CPAN community for
helping Perl to flourish.
.PP
For a more complete list of all of Perl's historical contributors, please
see the \fIAUTHORS\fR file in the Perl source distribution.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the perl bug database
at <https://github.com/Perl/perl5/issues>.  There may also be information at
<https://www.perl.org/>, the Perl Home Page.
.PP
If you believe you have an unreported bug, please open an issue at
<https://github.com/Perl/perl5/issues>.  Be sure to trim your bug down to a
tiny but sufficient test case.
.PP
If the bug you are reporting has security implications which make it
inappropriate to send to a public issue tracker, then see
"SECURITY VULNERABILITY CONTACT INFORMATION" in perlsec
for details of how to report the issue.
.SH "Give Thanks"
.IX Header "Give Thanks"
If you wish to thank the Perl 5 Porters for the work we had done in Perl 5,
you can do so by running the \f(CW\*(C`perlthanks\*(C'\fR program:
.PP
.Vb 1
\&    perlthanks
.Ve
.PP
This will send an email to the Perl 5 Porters list with your show of thanks.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details on
what changed.
.PP
The \fIINSTALL\fR file for how to build Perl.
.PP
The \fIREADME\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
