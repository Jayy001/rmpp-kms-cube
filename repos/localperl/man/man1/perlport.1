.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PERLPORT 1"
.TH PERLPORT 1 2024-04-16 "perl v5.40.0" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
perlport \- Writing portable Perl
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Perl runs on numerous operating systems.  While most of them share
much in common, they also have their own unique features.
.PP
This document is meant to help you to find out what constitutes portable
Perl code.  That way once you make a decision to write portably,
you know where the lines are drawn, and you can stay within them.
.PP
There is a tradeoff between taking full advantage of one particular
type of computer and taking advantage of a full range of them.
Naturally, as you broaden your range and become more diverse, the
common factors drop, and you are left with an increasingly smaller
area of common ground in which you can operate to accomplish a
particular task.  Thus, when you begin attacking a problem, it is
important to consider under which part of the tradeoff curve you
want to operate.  Specifically, you must decide whether it is
important that the task that you are coding has the full generality
of being portable, or whether to just get the job done right now.
This is the hardest choice to be made.  The rest is easy, because
Perl provides many choices, whichever way you want to approach your
problem.
.PP
Looking at it another way, writing portable code is usually about
willfully limiting your available choices.  Naturally, it takes
discipline and sacrifice to do that.  The product of portability
and convenience may be a constant.  You have been warned.
.PP
Be aware of two important points:
.IP "Not all Perl programs have to be portable" 4
.IX Item "Not all Perl programs have to be portable"
There is no reason you should not use Perl as a language to glue Unix
tools together, or to prototype a Macintosh application, or to manage the
Windows registry.  If it makes no sense to aim for portability for one
reason or another in a given program, then don't bother.
.IP "Nearly all of Perl already \fIis\fR portable" 4
.IX Item "Nearly all of Perl already is portable"
Don't be fooled into thinking that it is hard to create portable Perl
code.  It isn't.  Perl tries its level-best to bridge the gaps between
what's available on different platforms, and all the means available to
use those features.  Thus almost all Perl code runs on any machine
without modification.  But there are some significant issues in
writing portable code, and this document is entirely about those issues.
.PP
Here's the general rule: When you approach a task commonly done
using a whole range of platforms, think about writing portable
code.  That way, you don't sacrifice much by way of the implementation
choices you can avail yourself of, and at the same time you can give
your users lots of platform choices.  On the other hand, when you have to
take advantage of some unique feature of a particular platform, as is
often the case with systems programming (whether for Unix, Windows,
VMS, etc.), consider writing platform-specific code.
.PP
When the code will run on only two or three operating systems, you
may need to consider only the differences of those particular systems.
The important thing is to decide where the code will run and to be
deliberate in your decision.
.PP
The material below is separated into three main sections: main issues of
portability ("ISSUES"), platform-specific issues ("PLATFORMS"), and
built-in Perl functions that behave differently on various ports
("FUNCTION IMPLEMENTATIONS").
.PP
This information should not be considered complete; it includes possibly
transient information about idiosyncrasies of some of the ports, almost
all of which are in a state of constant evolution.  Thus, this material
should be considered a perpetual work in progress
(\f(CW\*(C`<IMG SRC="yellow_sign.gif" ALT="Under Construction">\*(C'\fR).
.SH ISSUES
.IX Header "ISSUES"
.SS Newlines
.IX Subsection "Newlines"
In most operating systems, lines in files are terminated by newlines.
Just what is used as a newline may vary from OS to OS.  Unix
traditionally uses \f(CW\*(C`\e012\*(C'\fR, one type of DOSish I/O uses \f(CW\*(C`\e015\e012\*(C'\fR,
Mac\ OS uses \f(CW\*(C`\e015\*(C'\fR, and z/OS uses \f(CW\*(C`\e025\*(C'\fR.
.PP
Perl uses \f(CW\*(C`\en\*(C'\fR to represent the "logical" newline, where what is
logical may depend on the platform in use.  In MacPerl, \f(CW\*(C`\en\*(C'\fR always
means \f(CW\*(C`\e015\*(C'\fR.  On EBCDIC platforms, \f(CW\*(C`\en\*(C'\fR could be \f(CW\*(C`\e025\*(C'\fR or \f(CW\*(C`\e045\*(C'\fR.
In DOSish perls, \f(CW\*(C`\en\*(C'\fR usually means \f(CW\*(C`\e012\*(C'\fR, but when
accessing a file in "text" mode, perl uses the \f(CW\*(C`:crlf\*(C'\fR layer that
translates it to (or from) \f(CW\*(C`\e015\e012\*(C'\fR, depending on whether you're
reading or writing. Unix does the same thing on ttys in canonical
mode.  \f(CW\*(C`\e015\e012\*(C'\fR is commonly referred to as CRLF.
.PP
To trim trailing newlines from text lines use
\&\f(CW\*(C`chomp\*(C'\fR.  With default settings that function
looks for a trailing \f(CW\*(C`\en\*(C'\fR character and thus trims in a portable way.
.PP
When dealing with binary files (or text files in binary mode) be sure
to explicitly set \f(CW$/\fR to the appropriate value for
your file format before using \f(CW\*(C`chomp\*(C'\fR.
.PP
Because of the "text" mode translation, DOSish perls have limitations in
using \f(CW\*(C`seek\*(C'\fR and
\&\f(CW\*(C`tell\*(C'\fR on a file accessed in "text" mode.
Stick to \f(CW\*(C`seek\*(C'\fR\-ing to
locations you got from \f(CW\*(C`tell\*(C'\fR (and no
others), and you are usually free to use
\&\f(CW\*(C`seek\*(C'\fR and
\&\f(CW\*(C`tell\*(C'\fR even in "text" mode.  Using
\&\f(CW\*(C`seek\*(C'\fR or
\&\f(CW\*(C`tell\*(C'\fR or other file operations may be
non-portable.  If you use \f(CW\*(C`binmode\*(C'\fR on a
file, however, you can usually
\&\f(CW\*(C`seek\*(C'\fR and
\&\f(CW\*(C`tell\*(C'\fR with arbitrary values safely.
.PP
A common misconception in socket programming is that \f(CW\*(C`\en\ eq\ \e012\*(C'\fR
everywhere.  When using protocols such as common Internet protocols,
\&\f(CW\*(C`\e012\*(C'\fR and \f(CW\*(C`\e015\*(C'\fR are called for specifically, and the values of
the logical \f(CW\*(C`\en\*(C'\fR and \f(CW\*(C`\er\*(C'\fR (carriage return) are not reliable.
.PP
.Vb 2
\&    print $socket "Hi there, client!\er\en";      # WRONG
\&    print $socket "Hi there, client!\e015\e012";  # RIGHT
.Ve
.PP
However, using \f(CW\*(C`\e015\e012\*(C'\fR (or \f(CW\*(C`\ecM\ecJ\*(C'\fR, or \f(CW\*(C`\ex0D\ex0A\*(C'\fR) can be tedious
and unsightly, as well as confusing to those maintaining the code.  As
such, the \f(CW\*(C`Socket\*(C'\fR module supplies the Right Thing for those
who want it.
.PP
.Vb 2
\&    use Socket qw(:DEFAULT :crlf);
\&    print $socket "Hi there, client!$CRLF"      # RIGHT
.Ve
.PP
When reading from a socket, remember that the default input record
separator \f(CW$/\fR is \f(CW\*(C`\en\*(C'\fR, but robust socket code
will recognize as either \f(CW\*(C`\e012\*(C'\fR or \f(CW\*(C`\e015\e012\*(C'\fR as end of line:
.PP
.Vb 3
\&    while (<$socket>) {  # NOT ADVISABLE!
\&        # ...
\&    }
.Ve
.PP
Because both CRLF and LF end in LF, the input record separator can
be set to LF and any CR stripped later.  Better to write:
.PP
.Vb 2
\&    use Socket qw(:DEFAULT :crlf);
\&    local($/) = LF;      # not needed if $/ is already \e012
\&
\&    while (<$socket>) {
\&        s/$CR?$LF/\en/;   # not sure if socket uses LF or CRLF, OK
\&    #   s/\e015?\e012/\en/; # same thing
\&    }
.Ve
.PP
This example is preferred over the previous one\-\-even for Unix
platforms\-\-because now any \f(CW\*(C`\e015\*(C'\fR's (\f(CW\*(C`\ecM\*(C'\fR's) are stripped out
(and there was much rejoicing).
.PP
Similarly, functions that return text data\-\-such as a function that
fetches a web page\-\-should sometimes translate newlines before
returning the data, if they've not yet been translated to the local
newline representation.  A single line of code will often suffice:
.PP
.Vb 2
\&    $data =~ s/\e015?\e012/\en/g;
\&    return $data;
.Ve
.PP
Some of this may be confusing.  Here's a handy reference to the ASCII CR
and LF characters.  You can print it out and stick it in your wallet.
.PP
.Vb 2
\&    LF  eq  \e012  eq  \ex0A  eq  \ecJ  eq  chr(10)  eq  ASCII 10
\&    CR  eq  \e015  eq  \ex0D  eq  \ecM  eq  chr(13)  eq  ASCII 13
\&
\&             | Unix | DOS  | Mac  |
\&        \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&        \en   |  LF  |  LF  |  CR  |
\&        \er   |  CR  |  CR  |  LF  |
\&        \en * |  LF  | CRLF |  CR  |
\&        \er * |  CR  |  CR  |  LF  |
\&        \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&        * text\-mode STDIO
.Ve
.PP
The Unix column assumes that you are not accessing a serial line
(like a tty) in canonical mode.  If you are, then CR on input becomes
"\en", and "\en" on output becomes CRLF.
.PP
These are just the most common definitions of \f(CW\*(C`\en\*(C'\fR and \f(CW\*(C`\er\*(C'\fR in Perl.
There may well be others.  For example, on an EBCDIC implementation
such as z/OS (OS/390) or OS/400 (using the ILE, the PASE is ASCII-based)
the above material is similar to "Unix" but the code numbers change:
.PP
.Vb 4
\&    LF  eq  \e025  eq  \ex15  eq  \ecU  eq  chr(21)  eq  CP\-1047 21
\&    LF  eq  \e045  eq  \ex25  eq           chr(37)  eq  CP\-0037 37
\&    CR  eq  \e015  eq  \ex0D  eq  \ecM  eq  chr(13)  eq  CP\-1047 13
\&    CR  eq  \e015  eq  \ex0D  eq  \ecM  eq  chr(13)  eq  CP\-0037 13
\&
\&             | z/OS | OS/400 |
\&        \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&        \en   |  LF  |  LF    |
\&        \er   |  CR  |  CR    |
\&        \en * |  LF  |  LF    |
\&        \er * |  CR  |  CR    |
\&        \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&        * text\-mode STDIO
.Ve
.SS "Numbers endianness and Width"
.IX Subsection "Numbers endianness and Width"
Different CPUs store integers and floating point numbers in different
orders (called \fIendianness\fR) and widths (32\-bit and 64\-bit being the
most common today).  This affects your programs when they attempt to transfer
numbers in binary format from one CPU architecture to another,
usually either "live" via network connection, or by storing the
numbers to secondary storage such as a disk file or tape.
.PP
Conflicting storage orders make an utter mess out of the numbers.  If a
little-endian host (Intel, VAX) stores 0x12345678 (305419896 in
decimal), a big-endian host (Motorola, Sparc, PA) reads it as
0x78563412 (2018915346 in decimal).  Alpha and MIPS can be either:
Digital/Compaq used/uses them in little-endian mode; SGI/Cray uses
them in big-endian mode.  To avoid this problem in network (socket)
connections use the \f(CW\*(C`pack\*(C'\fR and
\&\f(CW\*(C`unpack\*(C'\fR formats \f(CW\*(C`n\*(C'\fR and \f(CW\*(C`N\*(C'\fR, the
"network" orders.  These are guaranteed to be portable.
.PP
As of Perl 5.10.0, you can also use the \f(CW\*(C`>\*(C'\fR and \f(CW\*(C`<\*(C'\fR modifiers
to force big\- or little-endian byte-order.  This is useful if you want
to store signed integers or 64\-bit integers, for example.
.PP
You can explore the endianness of your platform by unpacking a
data structure packed in native format such as:
.PP
.Vb 3
\&    print unpack("h*", pack("s2", 1, 2)), "\en";
\&    # \*(Aq10002000\*(Aq on e.g. Intel x86 or Alpha 21064 in little\-endian mode
\&    # \*(Aq00100020\*(Aq on e.g. Motorola 68040
.Ve
.PP
If you need to distinguish between endian architectures you could use
either of the variables set like so:
.PP
.Vb 2
\&    $is_big_endian   = unpack("h*", pack("s", 1)) =~ /01/;
\&    $is_little_endian = unpack("h*", pack("s", 1)) =~ /^1/;
.Ve
.PP
Differing widths can cause truncation even between platforms of equal
endianness.  The platform of shorter width loses the upper parts of the
number.  There is no good solution for this problem except to avoid
transferring or storing raw binary numbers.
.PP
One can circumnavigate both these problems in two ways.  Either
transfer and store numbers always in text format, instead of raw
binary, or else consider using modules like
\&\f(CW\*(C`Data::Dumper\*(C'\fR and \f(CW\*(C`Storable\*(C'\fR (included as
of Perl 5.8).  Keeping all data as text significantly simplifies matters.
.SS "Files and Filesystems"
.IX Subsection "Files and Filesystems"
Most platforms these days structure files in a hierarchical fashion.
So, it is reasonably safe to assume that all platforms support the
notion of a "path" to uniquely identify a file on the system.  How
that path is really written, though, differs considerably.
.PP
Although similar, file path specifications differ between Unix,
Windows, Mac\ OS, OS/2, VMS, VOS, RISC\ OS, and probably others.
Unix, for example, is one of the few OSes that has the elegant idea
of a single root directory.
.PP
DOS, OS/2, VMS, VOS, and Windows can work similarly to Unix with \f(CW\*(C`/\*(C'\fR
as path separator, or in their own idiosyncratic ways (such as having
several root directories and various "unrooted" device files such NIL:
and LPT:).
.PP
Mac\ OS 9 and earlier used \f(CW\*(C`:\*(C'\fR as a path separator instead of \f(CW\*(C`/\*(C'\fR.
.PP
The filesystem may support neither hard links
(\f(CW\*(C`link\*(C'\fR) nor symbolic links
(\f(CW\*(C`symlink\*(C'\fR,
\&\f(CW\*(C`readlink\*(C'\fR,
\&\f(CW\*(C`lstat\*(C'\fR).
.PP
The filesystem may support neither access timestamp nor change
timestamp (meaning that about the only portable timestamp is the
modification timestamp), or one second granularity of any timestamps
(e.g. the FAT filesystem limits the time granularity to two seconds).
.PP
The "inode change timestamp" (the \f(CW\*(C`\-C\*(C'\fR
filetest) may really be the "creation timestamp" (which it is not in
Unix).
.PP
VOS perl can emulate Unix filenames with \f(CW\*(C`/\*(C'\fR as path separator.  The
native pathname characters greater-than, less-than, number-sign, and
percent-sign are always accepted.
.PP
RISC\ OS perl can emulate Unix filenames with \f(CW\*(C`/\*(C'\fR as path
separator, or go native and use \f(CW\*(C`.\*(C'\fR for path separator and \f(CW\*(C`:\*(C'\fR to
signal filesystems and disk names.
.PP
Don't assume Unix filesystem access semantics: that read, write,
and execute are all the permissions there are, and even if they exist,
that their semantics (for example what do \f(CW\*(C`r\*(C'\fR, \f(CW\*(C`w\*(C'\fR, and \f(CW\*(C`x\*(C'\fR mean on
a directory) are the Unix ones.  The various Unix/POSIX compatibility
layers usually try to make interfaces like \f(CW\*(C`chmod\*(C'\fR
work, but sometimes there simply is no good mapping.
.PP
The \f(CW\*(C`File::Spec\*(C'\fR modules provide methods to manipulate path
specifications and return the results in native format for each
platform.  This is often unnecessary as Unix-style paths are
understood by Perl on every supported platform, but if you need to
produce native paths for a native utility that does not understand
Unix syntax, or if you are operating on paths or path components
in unknown (and thus possibly native) syntax, \f(CW\*(C`File::Spec\*(C'\fR
is your friend.  Here are two brief examples:
.PP
.Vb 2
\&    use File::Spec::Functions;
\&    chdir(updir());        # go up one directory
\&
\&    # Concatenate a path from its components
\&    my $file = catfile(updir(), \*(Aqtemp\*(Aq, \*(Aqfile.txt\*(Aq);
\&    # on Unix:    \*(Aq../temp/file.txt\*(Aq
\&    # on Win32:   \*(Aq..\etemp\efile.txt\*(Aq
\&    # on VMS:     \*(Aq[\-.temp]file.txt\*(Aq
.Ve
.PP
In general, production code should not have file paths hardcoded.
Making them user-supplied or read from a configuration file is
better, keeping in mind that file path syntax varies on different
machines.
.PP
This is especially noticeable in scripts like Makefiles and test suites,
which often assume \f(CW\*(C`/\*(C'\fR as a path separator for subdirectories.
.PP
Also of use is \f(CW\*(C`File::Basename\*(C'\fR from the standard
distribution, which splits a pathname into pieces (base filename, full
path to directory, and file suffix).
.PP
Even when on a single platform (if you can call Unix a single platform),
remember not to count on the existence or the contents of particular
system-specific files or directories, like \fI/etc/passwd\fR,
\&\fI/etc/sendmail.conf\fR, \fI/etc/resolv.conf\fR, or even \fI/tmp/\fR.  For
example, \fI/etc/passwd\fR may exist but not contain the encrypted
passwords, because the system is using some form of enhanced security.
Or it may not contain all the accounts, because the system is using NIS.
If code does need to rely on such a file, include a description of the
file and its format in the code's documentation, then make it easy for
the user to override the default location of the file.
.PP
Don't assume a text file will end with a newline.  They should,
but people forget.
.PP
Do not have two files or directories of the same name with different
case, like \fItest.pl\fR and \fITest.pl\fR, as many platforms have
case-insensitive (or at least case-forgiving) filenames.  Also, try
not to have non-word characters (except for \f(CW\*(C`.\*(C'\fR) in the names, and
keep them to the 8.3 convention, for maximum portability, onerous a
burden though this may appear.
.PP
Likewise, when using the \f(CW\*(C`AutoSplit\*(C'\fR module, try to keep
your functions to 8.3 naming and case-insensitive conventions; or, at the
least, make it so the resulting files have a unique (case-insensitively)
first 8 characters.
.PP
Whitespace in filenames is tolerated on most systems, but not all,
and even on systems where it might be tolerated, some utilities
might become confused by such whitespace.
.PP
Many systems (DOS, VMS ODS\-2) cannot have more than one \f(CW\*(C`.\*(C'\fR in their
filenames.
.PP
Don't assume \f(CW\*(C`>\*(C'\fR won't be the first character of a filename.
Always use the three-arg version of
\&\f(CW\*(C`open\*(C'\fR:
.PP
.Vb 1
\&    open my $fh, \*(Aq<\*(Aq, $existing_file) or die $!;
.Ve
.PP
Two-arg \f(CW\*(C`open\*(C'\fR is magic and can
translate characters like \f(CW\*(C`>\*(C'\fR, \f(CW\*(C`<\*(C'\fR, and \f(CW\*(C`|\*(C'\fR in filenames,
which is usually the wrong thing to do.
\&\f(CW\*(C`sysopen\*(C'\fR and three-arg
\&\f(CW\*(C`open\*(C'\fR don't have this problem.
.PP
Don't use \f(CW\*(C`:\*(C'\fR as a part of a filename since many systems use that for
their own semantics (Mac OS Classic for separating pathname components,
many networking schemes and utilities for separating the nodename and
the pathname, and so on).  For the same reasons, avoid \f(CW\*(C`@\*(C'\fR, \f(CW\*(C`;\*(C'\fR and
\&\f(CW\*(C`|\*(C'\fR.
.PP
Don't assume that in pathnames you can collapse two leading slashes
\&\f(CW\*(C`//\*(C'\fR into one: some networking and clustering filesystems have special
semantics for that.  Let the operating system sort it out.
.PP
The \fIportable filename characters\fR as defined by ANSI C are
.PP
.Vb 4
\& a b c d e f g h i j k l m n o p q r s t u v w x y z
\& A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
\& 0 1 2 3 4 5 6 7 8 9
\& . _ \-
.Ve
.PP
and \f(CW\*(C`\-\*(C'\fR shouldn't be the first character.  If you want to be
hypercorrect, stay case-insensitive and within the 8.3 naming
convention (all the files and directories have to be unique within one
directory if their names are lowercased and truncated to eight
characters before the \f(CW\*(C`.\*(C'\fR, if any, and to three characters after the
\&\f(CW\*(C`.\*(C'\fR, if any).  (And do not use \f(CW\*(C`.\*(C'\fRs in directory names.)
.PP
On Windows extra \f(CW\*(C`.\*(C'\fRs at the end of a file or directory name are
ignored in most circumstances, and a directory name containing only
three or more \f(CW\*(C`.\*(C'\fRs are treated as the current directory by some APIs.
.SS "System Interaction"
.IX Subsection "System Interaction"
Not all platforms provide a command line.  These are usually platforms
that rely primarily on a Graphical User Interface (GUI) for user
interaction.  A program requiring a command line interface might
not work everywhere.  This is probably for the user of the program
to deal with, so don't stay up late worrying about it.
.PP
Some platforms can't delete or rename files held open by the system,
this limitation may also apply to changing filesystem metainformation
like file permissions or owners.  Remember to
\&\f(CW\*(C`close\*(C'\fR files when you are done with them.
Don't \f(CW\*(C`unlink\*(C'\fR or
\&\f(CW\*(C`rename\*(C'\fR an open file.  Don't
\&\f(CW\*(C`tie\*(C'\fR or
\&\f(CW\*(C`open\*(C'\fR a file already tied or opened;
\&\f(CW\*(C`untie\*(C'\fR or
\&\f(CW\*(C`close\*(C'\fR it first.
.PP
Don't open the same file more than once at a time for writing, as some
operating systems put mandatory locks on such files.
.PP
Don't assume that write/modify permission on a directory gives the
right to add or delete files/directories in that directory.  That is
filesystem specific: in some filesystems you need write/modify
permission also (or even just) in the file/directory itself.  In some
filesystems (AFS, DFS) the permission to add/delete directory entries
is a completely separate permission.
.PP
Don't assume that a single \f(CW\*(C`unlink\*(C'\fR completely
gets rid of the file: some filesystems (most notably the ones in VMS) have
versioned filesystems, and \f(CW\*(C`unlink\*(C'\fR removes only
the most recent one (it doesn't remove all the versions because by default
the native tools on those platforms remove just the most recent version,
too).  The portable idiom to remove all the versions of a file is
.PP
.Vb 1
\&    1 while unlink "file";
.Ve
.PP
This will terminate if the file is undeletable for some reason
(protected, not there, and so on).
.PP
Don't count on a specific environment variable existing in
\&\f(CW%ENV\fR.  Don't count on \f(CW%ENV\fR entries
being case-sensitive, or even case-preserving.  Don't try to clear
\&\f(CW%ENV\fR by saying \f(CW\*(C`%ENV = ();\*(C'\fR, or, if you really have
to, make it conditional on \f(CW\*(C`$^O ne \*(AqVMS\*(Aq\*(C'\fR since in VMS the
\&\f(CW%ENV\fR table is much more than a per-process key-value
string table.
.PP
On VMS, some entries in the \f(CW%ENV\fR hash are dynamically
created when their key is used on a read if they did not previously
exist.  The values for \f(CW$ENV{HOME}\fR, \f(CW$ENV{TERM}\fR, \f(CW$ENV{PATH}\fR, and
\&\f(CW$ENV{USER}\fR, are known to be dynamically generated.  The specific names
that are dynamically generated may vary with the version of the C library
on VMS, and more may exist than are documented.
.PP
On VMS by default, changes to the \f(CW%ENV\fR hash persist
after perl exits.  Subsequent invocations of perl in the same process can
inadvertently inherit environment settings that were meant to be
temporary.
.PP
Don't count on signals or \f(CW%SIG\fR for anything.
.PP
Don't count on filename globbing.  Use
\&\f(CW\*(C`opendir\*(C'\fR,
\&\f(CW\*(C`readdir\*(C'\fR, and
\&\f(CW\*(C`closedir\*(C'\fR instead.
.PP
Don't count on per-program environment variables, or per-program current
directories.
.PP
Don't count on specific values of \f(CW$!\fR, neither numeric nor
especially the string values. Users may switch their locales causing
error messages to be translated into their languages.  If you can
trust a POSIXish environment, you can portably use the symbols defined
by the \f(CW\*(C`Errno\*(C'\fR module, like \f(CW\*(C`ENOENT\*(C'\fR.  And don't trust on the
values of \f(CW$!\fR at all except immediately after a failed
system call.
.SS "Command names versus file pathnames"
.IX Subsection "Command names versus file pathnames"
Don't assume that the name used to invoke a command or program with
\&\f(CW\*(C`system\*(C'\fR or \f(CW\*(C`exec\*(C'\fR can
also be used to test for the existence of the file that holds the
executable code for that command or program.
First, many systems have "internal" commands that are built-in to the
shell or OS and while these commands can be invoked, there is no
corresponding file.  Second, some operating systems (e.g., Cygwin,
OS/2, and VOS) have required suffixes for executable files;
these suffixes are generally permitted on the command name but are not
required.  Thus, a command like \f(CW\*(C`perl\*(C'\fR might exist in a file named
\&\fIperl\fR, \fIperl.exe\fR, or \fIperl.pm\fR, depending on the operating system.
The variable \f(CW$Config{_exe}\fR in the
\&\f(CW\*(C`Config\*(C'\fR module holds the executable suffix, if any.  Third,
the VMS port carefully sets up \f(CW$^X\fR and
\&\f(CW$Config{perlpath}\fR so that no further processing
is required.  This is just as well, because the matching regular
expression used below would then have to deal with a possible trailing
version number in the VMS file name.
.PP
To convert \f(CW$^X\fR to a file pathname, taking account of
the requirements of the various operating system possibilities, say:
.PP
.Vb 6
\& use Config;
\& my $thisperl = $^X;
\& if ($^O ne \*(AqVMS\*(Aq) {
\&     $thisperl .= $Config{_exe}
\&         unless $thisperl =~ m/\eQ$Config{_exe}\eE$/i;
\& }
.Ve
.PP
To convert \f(CW$Config{perlpath}\fR to a file pathname, say:
.PP
.Vb 6
\& use Config;
\& my $thisperl = $Config{perlpath};
\& if ($^O ne \*(AqVMS\*(Aq) {
\&     $thisperl .= $Config{_exe}
\&         unless $thisperl =~ m/\eQ$Config{_exe}\eE$/i;
\& }
.Ve
.SS Networking
.IX Subsection "Networking"
Don't assume that you can reach the public Internet.
.PP
Don't assume that there is only one way to get through firewalls
to the public Internet.
.PP
Don't assume that you can reach outside world through any other port
than 80, or some web proxy.  ftp is blocked by many firewalls.
.PP
Don't assume that you can send email by connecting to the local SMTP port.
.PP
Don't assume that you can reach yourself or any node by the name
\&'localhost'.  The same goes for '127.0.0.1'.  You will have to try both.
.PP
Don't assume that the host has only one network card, or that it
can't bind to many virtual IP addresses.
.PP
Don't assume a particular network device name.
.PP
Don't assume a particular set of
\&\f(CW\*(C`ioctl\*(C'\fRs will work.
.PP
Don't assume that you can ping hosts and get replies.
.PP
Don't assume that any particular port (service) will respond.
.PP
Don't assume that \f(CW\*(C`Sys::Hostname\*(C'\fR (or any other API or
command) returns either a fully qualified hostname or a non-qualified
hostname: it all depends on how the system had been configured.  Also
remember that for things such as DHCP and NAT, the hostname you get back
might not be very useful.
.PP
All the above \fIdon't\fRs may look daunting, and they are, but the key
is to degrade gracefully if one cannot reach the particular network
service one wants.  Croaking or hanging do not look very professional.
.SS "Interprocess Communication (IPC)"
.IX Subsection "Interprocess Communication (IPC)"
In general, don't directly access the system in code meant to be
portable.  That means, no \f(CW\*(C`system\*(C'\fR,
\&\f(CW\*(C`exec\*(C'\fR, \f(CW\*(C`fork\*(C'\fR,
\&\f(CW\*(C`pipe\*(C'\fR,
\&\f(CW\`\`\fR or \f(CW\*(C`qx//\*(C'\fR,
\&\f(CW\*(C`open\*(C'\fR with a \f(CW\*(C`|\*(C'\fR, nor any of the other
things that makes being a Perl hacker worth being.
.PP
Commands that launch external processes are generally supported on
most platforms (though many of them do not support any type of
forking).  The problem with using them arises from what you invoke
them on.  External tools are often named differently on different
platforms, may not be available in the same location, might accept
different arguments, can behave differently, and often present their
results in a platform-dependent way.  Thus, you should seldom depend
on them to produce consistent results.  (Then again, if you're calling
\&\f(CW\*(C`netstat \-a\*(C'\fR, you probably don't expect it to run on both Unix and CP/M.)
.PP
One especially common bit of Perl code is opening a pipe to \fBsendmail\fR:
.PP
.Vb 2
\&    open(my $mail, \*(Aq|\-\*(Aq, \*(Aq/usr/lib/sendmail \-t\*(Aq)
\&        or die "cannot fork sendmail: $!";
.Ve
.PP
This is fine for systems programming when sendmail is known to be
available.  But it is not fine for many non-Unix systems, and even
some Unix systems that may not have sendmail installed.  If a portable
solution is needed, see the various distributions on CPAN that deal
with it.  \f(CW\*(C`Mail::Mailer\*(C'\fR and \f(CW\*(C`Mail::Send\*(C'\fR
in the \f(CW\*(C`MailTools\*(C'\fR distribution are commonly used, and provide several
mailing methods, including \f(CW\*(C`mail\*(C'\fR, \f(CW\*(C`sendmail\*(C'\fR, and direct SMTP (via
\&\f(CW\*(C`Net::SMTP\*(C'\fR) if a mail transfer agent is not available.
\&\f(CW\*(C`Mail::Sendmail\*(C'\fR is a standalone module that provides
simple, platform-independent mailing.
.PP
The Unix System V IPC (\f(CW\*(C`msg*(), sem*(), shm*()\*(C'\fR) is not available
even on all Unix platforms.
.PP
Do not use either the bare result of \f(CW\*(C`pack("N", 10, 20, 30, 40)\*(C'\fR or
bare v\-strings (such as \f(CW\*(C`v10.20.30.40\*(C'\fR) to represent IPv4 addresses:
both forms just pack the four bytes into network order.  That this
would be equal to the C language \f(CW\*(C`in_addr\*(C'\fR struct (which is what the
socket code internally uses) is not guaranteed.  To be portable use
the routines of the \f(CW\*(C`Socket\*(C'\fR module, such as
\&\f(CW\*(C`inet_aton\*(C'\fR,
\&\f(CW\*(C`inet_ntoa\*(C'\fR, and
\&\f(CW\*(C`sockaddr_in\*(C'\fR.
.PP
The rule of thumb for portable code is: Do it all in portable Perl, or
use a module (that may internally implement it with platform-specific
code, but exposes a common interface).
.SS "External Subroutines (XS)"
.IX Subsection "External Subroutines (XS)"
XS code can usually be made to work with any platform, but dependent
libraries, header files, etc., might not be readily available or
portable, or the XS code itself might be platform-specific, just as Perl
code might be.  If the libraries and headers are portable, then it is
normally reasonable to make sure the XS code is portable, too.
.PP
A different type of portability issue arises when writing XS code:
availability of a C compiler on the end-user's system.  C brings
with it its own portability issues, and writing XS code will expose
you to some of those.  Writing purely in Perl is an easier way to
achieve portability.
.SS "Standard Modules"
.IX Subsection "Standard Modules"
In general, the standard modules work across platforms.  Notable
exceptions are the \f(CW\*(C`CPAN\*(C'\fR module (which currently makes
connections to external programs that may not be available),
platform-specific modules (like \f(CW\*(C`ExtUtils::MM_VMS\*(C'\fR),
and DBM modules.
.PP
There is no one DBM module available on all platforms.
\&\f(CW\*(C`SDBM_File\*(C'\fR and the others are generally available on all
Unix and DOSish ports, but not in MacPerl, where only
\&\f(CW\*(C`NDBM_File\*(C'\fR and \f(CW\*(C`DB_File\*(C'\fR are available.
.PP
The good news is that at least some DBM module should be available, and
\&\f(CW\*(C`AnyDBM_File\*(C'\fR will use whichever module it can find.  Of
course, then the code needs to be fairly strict, dropping to the greatest
common factor (e.g., not exceeding 1K for each record), so that it will
work with any DBM module.  See AnyDBM_File for more details.
.SS "Time and Date"
.IX Subsection "Time and Date"
The system's notion of time of day and calendar date is controlled in
widely different ways.  Don't assume the timezone is stored in \f(CW$ENV{TZ}\fR,
and even if it is, don't assume that you can control the timezone through
that variable.  Don't assume anything about the three-letter timezone
abbreviations (for example that MST would be the Mountain Standard Time,
it's been known to stand for Moscow Standard Time).  If you need to
use timezones, express them in some unambiguous format like the
exact number of minutes offset from UTC, or the POSIX timezone
format.
.PP
Don't assume that the epoch starts at 00:00:00, January 1, 1970,
because that is OS\- and implementation-specific.  It is better to
store a date in an unambiguous representation.  The ISO 8601 standard
defines YYYY-MM-DD as the date format, or YYYY\-MM\-DDTHH:MM:SS
(that's a literal "T" separating the date from the time).
Please do use the ISO 8601 instead of making us guess what
date 02/03/04 might be.  ISO 8601 even sorts nicely as-is.
A text representation (like "1987\-12\-18") can be easily converted
into an OS-specific value using a module like
\&\f(CW\*(C`Time::Piece\*(C'\fR (see "Date Parsing" in Time::Piece) or
\&\f(CW\*(C`Date::Parse\*(C'\fR.  An array of values, such as those
returned by \f(CW\*(C`localtime\*(C'\fR, can be converted to an OS-specific
representation using \f(CW\*(C`Time::Local\*(C'\fR.
.PP
When calculating specific times, such as for tests in time or date modules,
it may be appropriate to calculate an offset for the epoch.
.PP
.Vb 2
\&    use Time::Local qw(timegm);
\&    my $offset = timegm(0, 0, 0, 1, 0, 1970);
.Ve
.PP
The value for \f(CW$offset\fR in Unix will be \f(CW0\fR, but in Mac OS Classic
will be some large number.  \f(CW$offset\fR can then be added to a Unix time
value to get what should be the proper value on any system.
.SS "Character sets and character encoding"
.IX Subsection "Character sets and character encoding"
Assume very little about character sets.
.PP
Assume nothing about numerical values (\f(CW\*(C`ord\*(C'\fR,
\&\f(CW\*(C`chr\*(C'\fR) of characters.
Do not use explicit code point ranges (like \f(CW\*(C`\exHH\-\exHH)\*(C'\fR.  However,
starting in Perl v5.22, regular expression pattern bracketed character
class ranges specified like \f(CW\*(C`qr/[\eN{U+HH}\-\eN{U+HH}]/\*(C'\fR are portable,
and starting in Perl v5.24, the same ranges are portable in
\&\f(CW\*(C`tr///\*(C'\fR.
You can portably use symbolic character classes like \f(CW\*(C`[:print:]\*(C'\fR.
.PP
Do not assume that the alphabetic characters are encoded contiguously
(in the numeric sense).  There may be gaps.  Special coding in Perl,
however, guarantees that all subsets of \f(CW\*(C`qr/[A\-Z]/\*(C'\fR, \f(CW\*(C`qr/[a\-z]/\*(C'\fR, and
\&\f(CW\*(C`qr/[0\-9]/\*(C'\fR behave as expected.
\&\f(CW\*(C`tr///\*(C'\fR
behaves the same for these ranges.  In patterns, any ranges specified with
end points using the \f(CW\*(C`\eN{...}\*(C'\fR notations ensures character set
portability, but it is a bug in Perl v5.22 that this isn't true of
\&\f(CW\*(C`tr///\*(C'\fR,
fixed in v5.24.
.PP
Do not assume anything about the ordering of the characters.
The lowercase letters may come before or after the uppercase letters;
the lowercase and uppercase may be interlaced so that both "a" and "A"
come before "b"; the accented and other international characters may
be interlaced so that ä comes before "b".
Unicode::Collate can be used to sort this all out.
.SS Internationalisation
.IX Subsection "Internationalisation"
If you may assume POSIX (a rather large assumption), you may read
more about the POSIX locale system from perllocale.  The locale
system at least attempts to make things a little bit more portable,
or at least more convenient and native-friendly for non-English
users.  The system affects character sets and encoding, and date
and time formatting\-\-amongst other things.
.PP
If you really want to be international, you should consider Unicode.
See perluniintro and perlunicode for more information.
.PP
By default Perl assumes your source code is written in an 8\-bit ASCII
superset. To embed Unicode characters in your strings and regexes, you can
use the \f(CW\*(C`\ex{HH}\*(C'\fR or (more portably) \f(CW\*(C`\eN{U+HH}\*(C'\fR
notations. You can also use the
\&\f(CW\*(C`utf8\*(C'\fR pragma and write your code in UTF\-8, which lets you use
Unicode characters directly (not just in quoted constructs but also in
identifiers).
.SS "System Resources"
.IX Subsection "System Resources"
If your code is destined for systems with severely constrained (or
missing!) virtual memory systems then you want to be \fIespecially\fR mindful
of avoiding wasteful constructs such as:
.PP
.Vb 1
\&    my @lines = <$very_large_file>;            # bad
\&
\&    while (<$fh>) {$file .= $_}                # sometimes bad
\&    my $file = join(\*(Aq\*(Aq, <$fh>);                # better
.Ve
.PP
The last two constructs may appear unintuitive to most people.  The
first repeatedly grows a string, whereas the second allocates a
large chunk of memory in one go.  On some systems, the second is
more efficient than the first.
.SS Security
.IX Subsection "Security"
Most multi-user platforms provide basic levels of security, usually
implemented at the filesystem level.  Some, however, unfortunately do
not.  Thus the notion of user id, or "home" directory,
or even the state of being logged-in, may be unrecognizable on many
platforms.  If you write programs that are security-conscious, it
is usually best to know what type of system you will be running
under so that you can write code explicitly for that platform (or
class of platforms).
.PP
Don't assume the Unix filesystem access semantics: the operating
system or the filesystem may be using some ACL systems, which are
richer languages than the usual \f(CW\*(C`rwx\*(C'\fR.  Even if the \f(CW\*(C`rwx\*(C'\fR exist,
their semantics might be different.
.PP
(From the security viewpoint, testing for permissions before attempting to
do something is silly anyway: if one tries this, there is potential
for race conditions. Someone or something might change the
permissions between the permissions check and the actual operation.
Just try the operation.)
.PP
Don't assume the Unix user and group semantics: especially, don't
expect \f(CW$<\fR and \f(CW$>\fR (or
\&\f(CW$(\fR and \f(CW$)\fR) to work for switching
identities (or memberships).
.PP
Don't assume set-uid and set-gid semantics.  (And even if you do,
think twice: set-uid and set-gid are a known can of security worms.)
.SS Style
.IX Subsection "Style"
For those times when it is necessary to have platform-specific code,
consider keeping the platform-specific code in one place, making porting
to other platforms easier.  Use the \f(CW\*(C`Config\*(C'\fR module and the
special variable \f(CW$^O\fR to differentiate platforms, as
described in "PLATFORMS".
.PP
Beware of the "else syndrome":
.PP
.Vb 5
\&  if ($^O eq \*(AqMSWin32\*(Aq) {
\&    # code that assumes Windows
\&  } else {
\&    # code that assumes Linux
\&  }
.Ve
.PP
The \f(CW\*(C`else\*(C'\fR branch should be used for the really ultimate fallback,
not for code specific to some platform.
.PP
Be careful in the tests you supply with your module or programs.
Module code may be fully portable, but its tests might not be.  This
often happens when tests spawn off other processes or call external
programs to aid in the testing, or when (as noted above) the tests
assume certain things about the filesystem and paths.  Be careful not
to depend on a specific output style for errors, such as when checking
\&\f(CW$!\fR after a failed system call.  Using
\&\f(CW$!\fR for anything else than displaying it as output is
doubtful (though see the \f(CW\*(C`Errno\*(C'\fR module for testing reasonably
portably for error value). Some platforms expect a certain output format,
and Perl on those platforms may have been adjusted accordingly.  Most
specifically, don't anchor a regex when testing an error value.
.SH "CPAN Testers"
.IX Header "CPAN Testers"
Modules uploaded to CPAN are tested by a variety of volunteers on
different platforms.  These CPAN testers are notified by mail of each
new upload, and reply to the list with PASS, FAIL, NA (not applicable to
this platform), or UNKNOWN (unknown), along with any relevant notations.
.PP
The purpose of the testing is twofold: one, to help developers fix any
problems in their code that crop up because of lack of testing on other
platforms; two, to provide users with information about whether
a given module works on a given platform.
.PP
Also see:
.IP \(bu 4
Mailing list: cpan\-testers\-discuss@perl.org
.IP \(bu 4
Testing results: <https://www.cpantesters.org/>
.SH PLATFORMS
.IX Header "PLATFORMS"
Perl is built with a \f(CW$^O\fR variable that indicates the
operating system it was built on.  This was implemented
to help speed up code that would otherwise have to \f(CW\*(C`use Config\*(C'\fR
and use the value of \f(CW$Config{osname}\fR.  Of course,
to get more detailed information about the system, looking into
\&\f(CW%Config\fR is certainly recommended.
.PP
\&\f(CW%Config\fR cannot always be trusted, however,
because it was built at compile time.  If perl was built in one place,
then transferred elsewhere, some values may be wrong.  The values may
even have been edited after the fact.
.SS Unix
.IX Subsection "Unix"
Perl works on a bewildering variety of Unix and Unix-like platforms (see
e.g. most of the files in the \fIhints/\fR directory in the source code kit).
On most of these systems, the value of \f(CW$^O\fR (hence
\&\f(CW$Config{osname}\fR, too) is determined either by
lowercasing and stripping punctuation from the first field of the string
returned by typing \f(CW\*(C`uname \-a\*(C'\fR (or a similar command) at the shell prompt
or by testing the file system for the presence of uniquely named files
such as a kernel or header file.  Here, for example, are a few of the
more popular Unix flavors:
.PP
.Vb 10
\&    uname         $^O        $Config{archname}
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    AIX           aix        aix
\&    BSD/OS        bsdos      i386\-bsdos
\&    Darwin        darwin     darwin
\&    DYNIX/ptx     dynixptx   i386\-dynixptx
\&    FreeBSD       freebsd    freebsd\-i386
\&    Haiku         haiku      BePC\-haiku
\&    Linux         linux      arm\-linux
\&    Linux         linux      armv5tel\-linux
\&    Linux         linux      i386\-linux
\&    Linux         linux      i586\-linux
\&    Linux         linux      ppc\-linux
\&    HP\-UX         hpux       PA\-RISC1.1
\&    IRIX          irix       irix
\&    Mac OS X      darwin     darwin
\&    NeXT 3        next       next\-fat
\&    NeXT 4        next       OPENSTEP\-Mach
\&    openbsd       openbsd    i386\-openbsd
\&    OSF1          dec_osf    alpha\-dec_osf
\&    reliantunix\-n svr4       RM400\-svr4
\&    SCO_SV        sco_sv     i386\-sco_sv
\&    SINIX\-N       svr4       RM400\-svr4
\&    sn4609        unicos     CRAY_C90\-unicos
\&    sn6521        unicosmk   t3e\-unicosmk
\&    sn9617        unicos     CRAY_J90\-unicos
\&    SunOS         solaris    sun4\-solaris
\&    SunOS         solaris    i86pc\-solaris
\&    SunOS4        sunos      sun4\-sunos
.Ve
.PP
Because the value of \f(CW$Config{archname}\fR may
depend on the hardware architecture, it can vary more than the value of
\&\f(CW$^O\fR.
.SS "DOS and Derivatives"
.IX Subsection "DOS and Derivatives"
Perl has long been ported to Intel-style microcomputers running under
systems like PC-DOS, MS-DOS, OS/2, and most Windows platforms you can
bring yourself to mention (except for Windows CE, if you count that).
Users familiar with \fICOMMAND.COM\fR or \fICMD.EXE\fR style shells should
be aware that each of these file specifications may have subtle
differences:
.PP
.Vb 4
\&    my $filespec0 = "c:/foo/bar/file.txt";
\&    my $filespec1 = "c:\e\efoo\e\ebar\e\efile.txt";
\&    my $filespec2 = \*(Aqc:\efoo\ebar\efile.txt\*(Aq;
\&    my $filespec3 = \*(Aqc:\e\efoo\e\ebar\e\efile.txt\*(Aq;
.Ve
.PP
System calls accept either \f(CW\*(C`/\*(C'\fR or \f(CW\*(C`\e\*(C'\fR as the path separator.
However, many command-line utilities of DOS vintage treat \f(CW\*(C`/\*(C'\fR as
the option prefix, so may get confused by filenames containing \f(CW\*(C`/\*(C'\fR.
Aside from calling any external programs, \f(CW\*(C`/\*(C'\fR will work just fine,
and probably better, as it is more consistent with popular usage,
and avoids the problem of remembering what to backwhack and what
not to.
.PP
The DOS FAT filesystem can accommodate only "8.3" style filenames.  Under
the "case-insensitive, but case-preserving" HPFS (OS/2) and NTFS (NT)
filesystems you may have to be careful about case returned with functions
like \f(CW\*(C`readdir\*(C'\fR or used with functions like
\&\f(CW\*(C`open\*(C'\fR or
\&\f(CW\*(C`opendir\*(C'\fR.
.PP
DOS also treats several filenames as special, such as \fIAUX\fR, \fIPRN\fR,
\&\fINUL\fR, \fICON\fR, \fICOM1\fR, \fILPT1\fR, \fILPT2\fR, etc.  Unfortunately, sometimes
these filenames won't even work if you include an explicit directory
prefix.  It is best to avoid such filenames, if you want your code to be
portable to DOS and its derivatives.  It's hard to know what these all
are, unfortunately.
.PP
Users of these operating systems may also wish to make use of
scripts such as \fIpl2bat.bat\fR to put wrappers around your scripts.
.PP
Newline (\f(CW\*(C`\en\*(C'\fR) is translated as \f(CW\*(C`\e015\e012\*(C'\fR by the I/O system when
reading from and writing to files (see "Newlines").
\&\f(CWbinmode($filehandle)\fR will keep \f(CW\*(C`\en\*(C'\fR translated as \f(CW\*(C`\e012\*(C'\fR for that
filehandle.
\&\f(CW\*(C`binmode\*(C'\fR should always be used for code
that deals with binary data.  That's assuming you realize in advance that
your data is in binary.  General-purpose programs should often assume
nothing about their data.
.PP
The \f(CW$^O\fR variable and the
\&\f(CW$Config{archname}\fR values for various DOSish
perls are as follows:
.PP
.Vb 10
\&    OS             $^O       $Config{archname}  ID    Version
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    MS\-DOS         dos       ?
\&    PC\-DOS         dos       ?
\&    OS/2           os2       ?
\&    Windows 3.1    ?         ?                  0     3 01
\&    Windows 95     MSWin32   MSWin32\-x86        1     4 00
\&    Windows 98     MSWin32   MSWin32\-x86        1     4 10
\&    Windows ME     MSWin32   MSWin32\-x86        1     ?
\&    Windows NT     MSWin32   MSWin32\-x86        2     4 xx
\&    Windows NT     MSWin32   MSWin32\-ALPHA      2     4 xx
\&    Windows NT     MSWin32   MSWin32\-ppc        2     4 xx
\&    Windows 2000   MSWin32   MSWin32\-x86        2     5 00
\&    Windows XP     MSWin32   MSWin32\-x86        2     5 01
\&    Windows 2003   MSWin32   MSWin32\-x86        2     5 02
\&    Windows Vista  MSWin32   MSWin32\-x86        2     6 00
\&    Windows 7      MSWin32   MSWin32\-x86        2     6 01
\&    Windows 7      MSWin32   MSWin32\-x64        2     6 01
\&    Windows 2008   MSWin32   MSWin32\-x86        2     6 01
\&    Windows 2008   MSWin32   MSWin32\-x64        2     6 01
\&    Windows CE     MSWin32   ?                  3
\&    Cygwin         cygwin    cygwin
.Ve
.PP
The various MSWin32 Perl's can distinguish the OS they are running on
via the value of the fifth element of the list returned from
\&\f(CWWin32::GetOSVersion()\fR.  For example:
.PP
.Vb 4
\&    if ($^O eq \*(AqMSWin32\*(Aq) {
\&        my @os_version_info = Win32::GetOSVersion();
\&        print +(\*(Aq3.1\*(Aq,\*(Aq95\*(Aq,\*(AqNT\*(Aq)[$os_version_info[4]],"\en";
\&    }
.Ve
.PP
There are also \f(CW\*(C`Win32::IsWinNT()|Win32/Win32::IsWinNT()\*(C'\fR,
\&\f(CW\*(C`Win32::IsWin95()|Win32/Win32::IsWin95()\*(C'\fR, and
\&\f(CWWin32::GetOSName()\fR; try
\&\f(CW\*(C`perldoc Win32\*(C'\fR.
The very portable \f(CWPOSIX::uname()\fR will work too:
.PP
.Vb 2
\&    c:\e> perl \-MPOSIX \-we "print join \*(Aq|\*(Aq, uname"
\&    Windows NT|moonru|5.0|Build 2195 (Service Pack 2)|x86
.Ve
.PP
Errors set by Winsock functions are now put directly into \f(CW$^E\fR,
and the relevant \f(CW\*(C`WSAE*\*(C'\fR error codes are now exported from the
Errno and POSIX modules for testing this against.
.PP
The previous behavior of putting the errors (converted to POSIX-style
\&\f(CW\*(C`E*\*(C'\fR error codes since Perl 5.20.0) into \f(CW$!\fR was buggy due to
the non-equivalence of like-named Winsock and POSIX error constants,
a relationship between which has unfortunately been established
in one way or another since Perl 5.8.0.
.PP
The new behavior provides a much more robust solution for checking
Winsock errors in portable software without accidentally matching
POSIX tests that were intended for other OSes and may have different
meanings for Winsock.
.PP
The old behavior is currently retained, warts and all, for backwards
compatibility, but users are encouraged to change any code that
tests \f(CW$!\fR against \f(CW\*(C`E*\*(C'\fR constants for Winsock errors to instead
test \f(CW$^E\fR against \f(CW\*(C`WSAE*\*(C'\fR constants.  After a suitable deprecation
period, which started with Perl 5.24, the old behavior may be
removed, leaving \f(CW$!\fR unchanged after Winsock function calls, to
avoid any possible confusion over which error variable to check.
.PP
Also see:
.IP \(bu 4
The EMX environment for DOS, OS/2, etc. emx@iaehv.nl,
<ftp://hobbes.nmsu.edu/pub/os2/dev/emx/>  Also perlos2.
.IP \(bu 4
Build instructions for Win32 in perlwin32, or under the Cygnus environment
in perlcygwin.
.IP \(bu 4
The \f(CW\*(C`Win32::*\*(C'\fR modules in Win32.
.IP \(bu 4
The ActiveState Pages, <https://www.activestate.com/>
.IP \(bu 4
The Cygwin environment for Win32; \fIREADME.cygwin\fR (installed
as perlcygwin), <https://www.cygwin.com/>
.IP \(bu 4
Build instructions for OS/2, perlos2
.SS VMS
.IX Subsection "VMS"
Perl on VMS is discussed in perlvms in the Perl distribution.
.PP
The official name of VMS as of this writing is OpenVMS.
.PP
Interacting with Perl from the Digital Command Language (DCL) shell
often requires a different set of quotation marks than Unix shells do.
For example:
.PP
.Vb 2
\&    $ perl \-e "print ""Hello, world.\en"""
\&    Hello, world.
.Ve
.PP
There are several ways to wrap your Perl scripts in DCL \fI.COM\fR files, if
you are so inclined.  For example:
.PP
.Vb 6
\&    $ write sys$output "Hello from DCL!"
\&    $ if p1 .eqs. ""
\&    $ then perl \-x \*(Aqf$environment("PROCEDURE")
\&    $ else perl \-x \- \*(Aqp1 \*(Aqp2 \*(Aqp3 \*(Aqp4 \*(Aqp5 \*(Aqp6 \*(Aqp7 \*(Aqp8
\&    $ deck/dollars="_\|_END_\|_"
\&    #!/usr/bin/perl
\&
\&    print "Hello from Perl!\en";
\&
\&    _\|_END_\|_
\&    $ endif
.Ve
.PP
Do take care with \f(CW\*(C`$ ASSIGN/nolog/user SYS$COMMAND: SYS$INPUT\*(C'\fR if your
Perl-in-DCL script expects to do things like \f(CW\*(C`$read = <STDIN>;\*(C'\fR.
.PP
The VMS operating system has two filesystems, designated by their
on-disk structure (ODS) level: ODS\-2 and its successor ODS\-5.  The
initial port of Perl to VMS pre-dates ODS\-5, but all current testing and
development assumes ODS\-5 and its capabilities, including case
preservation, extended characters in filespecs, and names up to 8192
bytes long.
.PP
Perl on VMS can accept either VMS\- or Unix-style file
specifications as in either of the following:
.PP
.Vb 2
\&    $ perl \-ne "print if /perl_setup/i" SYS$LOGIN:LOGIN.COM
\&    $ perl \-ne "print if /perl_setup/i" /sys$login/login.com
.Ve
.PP
but not a mixture of both as in:
.PP
.Vb 2
\&    $ perl \-ne "print if /perl_setup/i" sys$login:/login.com
\&    Can\*(Aqt open sys$login:/login.com: file specification syntax error
.Ve
.PP
In general, the easiest path to portability is always to specify
filenames in Unix format unless they will need to be processed by native
commands or utilities.  Because of this latter consideration, the
File::Spec module by default returns native format specifications
regardless of input format.  This default may be reversed so that
filenames are always reported in Unix format by specifying the
\&\f(CW\*(C`DECC$FILENAME_UNIX_REPORT\*(C'\fR feature logical in the environment.
.PP
The file type, or extension, is always present in a VMS-format file
specification even if it's zero-length.  This means that, by default,
\&\f(CW\*(C`readdir\*(C'\fR will return a trailing dot on a
file with no extension, so where you would see \f(CW"a"\fR on Unix you'll see
\&\f(CW"a."\fR on VMS.  However, the trailing dot may be suppressed by enabling
the \f(CW\*(C`DECC$READDIR_DROPDOTNOTYPE\*(C'\fR feature in the environment (see the CRTL
documentation on feature logical names).
.PP
What \f(CW\*(C`\en\*(C'\fR represents depends on the type of file opened.  It usually
represents \f(CW\*(C`\e012\*(C'\fR but it could also be \f(CW\*(C`\e015\*(C'\fR, \f(CW\*(C`\e012\*(C'\fR, \f(CW\*(C`\e015\e012\*(C'\fR,
\&\f(CW\*(C`\e000\*(C'\fR, \f(CW\*(C`\e040\*(C'\fR, or nothing depending on the file organization and
record format.  The \f(CW\*(C`VMS::Stdio\*(C'\fR module provides access to
the special \f(CWfopen()\fR requirements of files with unusual attributes on
VMS.
.PP
The value of \f(CW$^O\fR on OpenVMS is "VMS".  To determine the
architecture that you are running on refer to
\&\f(CW$Config{archname}\fR.
.PP
On VMS, perl determines the UTC offset from the \f(CW\*(C`SYS$TIMEZONE_DIFFERENTIAL\*(C'\fR
logical name.  Although the VMS epoch began at 17\-NOV\-1858 00:00:00.00,
calls to \f(CW\*(C`localtime\*(C'\fR are adjusted to count
offsets from 01\-JAN\-1970 00:00:00.00, just like Unix.
.PP
Also see:
.IP \(bu 4
\&\fIREADME.vms\fR (installed as \fIREADME_vms\fR), perlvms
.IP \(bu 4
vmsperl list, vmsperl\-subscribe@perl.org
.IP \(bu 4
vmsperl on the web, <http://www.sidhe.org/vmsperl/index.html>
.IP \(bu 4
VMS Software Inc. web site, <http://www.vmssoftware.com>
.SS VOS
.IX Subsection "VOS"
Perl on VOS (also known as OpenVOS) is discussed in \fIREADME.vos\fR
in the Perl distribution (installed as perlvos).  Perl on VOS
can accept either VOS\- or Unix-style file specifications as in
either of the following:
.PP
.Vb 2
\&    $ perl \-ne "print if /perl_setup/i" >system>notices
\&    $ perl \-ne "print if /perl_setup/i" /system/notices
.Ve
.PP
or even a mixture of both as in:
.PP
.Vb 1
\&    $ perl \-ne "print if /perl_setup/i" >system/notices
.Ve
.PP
Even though VOS allows the slash character to appear in object
names, because the VOS port of Perl interprets it as a pathname
delimiting character, VOS files, directories, or links whose
names contain a slash character cannot be processed.  Such files
must be renamed before they can be processed by Perl.
.PP
Older releases of VOS (prior to OpenVOS Release 17.0) limit file
names to 32 or fewer characters, prohibit file names from
starting with a \f(CW\*(C`\-\*(C'\fR character, and prohibit file names from
containing \f(CW\*(C` \*(C'\fR (space) or any character from the set \f(CW\*(C`!#%&\*(Aq()*;<=>?\*(C'\fR.
.PP
Newer releases of VOS (OpenVOS Release 17.0 or later) support a
feature known as extended names.  On these releases, file names
can contain up to 255 characters, are prohibited from starting
with a \f(CW\*(C`\-\*(C'\fR character, and the set of prohibited characters is
reduced to \f(CW\*(C`#%*<>?\*(C'\fR.  There are
restrictions involving spaces and apostrophes:  these characters
must not begin or end a name, nor can they immediately precede or
follow a period.  Additionally, a space must not immediately
precede another space or hyphen.  Specifically, the following
character combinations are prohibited:  space-space,
space-hyphen, period-space, space-period, period-apostrophe,
apostrophe-period, leading or trailing space, and leading or
trailing apostrophe.  Although an extended file name is limited
to 255 characters, a path name is still limited to 256
characters.
.PP
The value of \f(CW$^O\fR on VOS is "vos".  To determine the
architecture that you are running on refer to
\&\f(CW$Config{archname}\fR.
.PP
Also see:
.IP \(bu 4
\&\fIREADME.vos\fR (installed as perlvos)
.IP \(bu 4
The VOS mailing list.
.Sp
There is no specific mailing list for Perl on VOS.  You can contact
the Stratus Technologies Customer Assistance Center (CAC) for your
region, or you can use the contact information located in the
distribution files on the Stratus Anonymous FTP site.
.IP \(bu 4
Stratus Technologies on the web at <http://www.stratus.com>
.IP \(bu 4
VOS Open-Source Software on the web at <http://ftp.stratus.com/pub/vos/vos.html>
.SS "EBCDIC Platforms"
.IX Subsection "EBCDIC Platforms"
v5.22 core Perl runs on z/OS (formerly OS/390).  Theoretically it could
run on the successors of OS/400 on AS/400 minicomputers as well as
VM/ESA, and BS2000 for S/390 Mainframes.  Such computers use EBCDIC
character sets internally (usually Character Code Set ID 0037 for OS/400
and either 1047 or POSIX-BC for S/390 systems).
.PP
The rest of this section may need updating, but we don't know what it
should say.  Please submit comments to
<https://github.com/Perl/perl5/issues>.
.PP
On the mainframe Perl currently works under the "Unix system
services for OS/390" (formerly known as OpenEdition), VM/ESA OpenEdition, or
the BS200 POSIX-BC system (BS2000 is supported in Perl 5.6 and greater).
See perlos390 for details.  Note that for OS/400 there is also a port of
Perl 5.8.1/5.10.0 or later to the PASE which is ASCII-based (as opposed to
ILE which is EBCDIC-based), see perlos400.
.PP
As of R2.5 of USS for OS/390 and Version 2.3 of VM/ESA these Unix
sub-systems do not support the \f(CW\*(C`#!\*(C'\fR shebang trick for script invocation.
Hence, on OS/390 and VM/ESA Perl scripts can be executed with a header
similar to the following simple script:
.PP
.Vb 4
\&    : # use perl
\&        eval \*(Aqexec /usr/local/bin/perl \-S $0 ${1+"$@"}\*(Aq
\&            if 0;
\&    #!/usr/local/bin/perl     # just a comment really
\&
\&    print "Hello from perl!\en";
.Ve
.PP
OS/390 will support the \f(CW\*(C`#!\*(C'\fR shebang trick in release 2.8 and beyond.
Calls to \f(CW\*(C`system\*(C'\fR and backticks can use POSIX
shell syntax on all S/390 systems.
.PP
On the AS/400, if PERL5 is in your library list, you may need
to wrap your Perl scripts in a CL procedure to invoke them like so:
.PP
.Vb 3
\&    BEGIN
\&      CALL PGM(PERL5/PERL) PARM(\*(Aq/QOpenSys/hello.pl\*(Aq)
\&    ENDPGM
.Ve
.PP
This will invoke the Perl script \fIhello.pl\fR in the root of the
QOpenSys file system.  On the AS/400 calls to
\&\f(CW\*(C`system\*(C'\fR or backticks must use CL syntax.
.PP
On these platforms, bear in mind that the EBCDIC character set may have
an effect on what happens with some Perl functions (such as
\&\f(CW\*(C`chr\*(C'\fR, \f(CW\*(C`pack\*(C'\fR,
\&\f(CW\*(C`print\*(C'\fR,
\&\f(CW\*(C`printf\*(C'\fR,
\&\f(CW\*(C`ord\*(C'\fR, \f(CW\*(C`sort\*(C'\fR,
\&\f(CW\*(C`sprintf\*(C'\fR,
\&\f(CW\*(C`unpack\*(C'\fR), as
well as bit-fiddling with ASCII constants using operators like
\&\f(CW\*(C`^\*(C'\fR, \f(CW\*(C`&\*(C'\fR and \f(CW\*(C`|\*(C'\fR, not to mention
dealing with socket interfaces to ASCII computers (see "Newlines").
.PP
Fortunately, most web servers for the mainframe will correctly
translate the \f(CW\*(C`\en\*(C'\fR in the following statement to its ASCII equivalent
(\f(CW\*(C`\er\*(C'\fR is the same under both Unix and z/OS):
.PP
.Vb 1
\&    print "Content\-type: text/html\er\en\er\en";
.Ve
.PP
The values of \f(CW$^O\fR on some of these platforms include:
.PP
.Vb 5
\&    uname         $^O        $Config{archname}
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    OS/390        os390      os390
\&    OS400         os400      os400
\&    POSIX\-BC      posix\-bc   BS2000\-posix\-bc
.Ve
.PP
Some simple tricks for determining if you are running on an EBCDIC
platform could include any of the following (perhaps all):
.PP
.Vb 1
\&    if ("\et" eq "\e005")  { print "EBCDIC may be spoken here!\en"; }
\&
\&    if (ord(\*(AqA\*(Aq) == 193) { print "EBCDIC may be spoken here!\en"; }
\&
\&    if (chr(169) eq \*(Aqz\*(Aq) { print "EBCDIC may be spoken here!\en"; }
.Ve
.PP
One thing you may not want to rely on is the EBCDIC encoding
of punctuation characters since these may differ from code page to code
page (and once your module or script is rumoured to work with EBCDIC,
folks will want it to work with all EBCDIC character sets).
.PP
Also see:
.IP \(bu 4
perlos390, perlos400, perlbs2000, perlebcdic.
.IP \(bu 4
The perl\-mvs@perl.org list is for discussion of porting issues as well as
general usage issues for all EBCDIC Perls.  Send a message body of
"subscribe perl-mvs" to majordomo@perl.org.
.IP \(bu 4
AS/400 Perl information at
<http://as400.rochester.ibm.com/>
as well as on CPAN in the \fIports/\fR directory.
.SS "Acorn RISC OS"
.IX Subsection "Acorn RISC OS"
Because Acorns use ASCII with newlines (\f(CW\*(C`\en\*(C'\fR) in text files as \f(CW\*(C`\e012\*(C'\fR like
Unix, and because Unix filename emulation is turned on by default,
most simple scripts will probably work "out of the box".  The native
filesystem is modular, and individual filesystems are free to be
case-sensitive or insensitive, and are usually case-preserving.  Some
native filesystems have name length limits, which file and directory
names are silently truncated to fit.  Scripts should be aware that the
standard filesystem currently has a name length limit of \fB10\fR
characters, with up to 77 items in a directory, but other filesystems
may not impose such limitations.
.PP
Native filenames are of the form
.PP
.Vb 1
\&    Filesystem#Special_Field::DiskName.$.Directory.Directory.File
.Ve
.PP
where
.PP
.Vb 8
\&    Special_Field is not usually present, but may contain . and $ .
\&    Filesystem =~ m|[A\-Za\-z0\-9_]|
\&    DsicName   =~ m|[A\-Za\-z0\-9_/]|
\&    $ represents the root directory
\&    . is the path separator
\&    @ is the current directory (per filesystem but machine global)
\&    ^ is the parent directory
\&    Directory and File =~ m|[^\e0\- "\e.\e$\e%\e&:\e@\e\e^\e|\e177]+|
.Ve
.PP
The default filename translation is roughly \f(CW\*(C`tr|/.|./|\*(C'\fR, swapping dots
and slashes.
.PP
Note that \f(CW\*(C`"ADFS::HardDisk.$.File" ne \*(AqADFS::HardDisk.$.File\*(Aq\*(C'\fR and that
the second stage of \f(CW\*(C`$\*(C'\fR interpolation in regular expressions will fall
foul of the \f(CW$.\fR variable if scripts are not careful.
.PP
Logical paths specified by system variables containing comma-separated
search lists are also allowed; hence \f(CW\*(C`System:Modules\*(C'\fR is a valid
filename, and the filesystem will prefix \f(CW\*(C`Modules\*(C'\fR with each section of
\&\f(CW\*(C`System$Path\*(C'\fR until a name is made that points to an object on disk.
Writing to a new file \f(CW\*(C`System:Modules\*(C'\fR would be allowed only if
\&\f(CW\*(C`System$Path\*(C'\fR contains a single item list.  The filesystem will also
expand system variables in filenames if enclosed in angle brackets, so
\&\f(CW\*(C`<System$Dir>.Modules\*(C'\fR would look for the file
\&\f(CW\*(C`$ENV{\*(AqSystem$Dir\*(Aq}\ .\ \*(AqModules\*(Aq\*(C'\fR.  The obvious implication of this is
that \fBfully qualified filenames can start with \fR\f(CB\*(C`<>\*(C'\fR and the
three-argument form of \f(CW\*(C`open\*(C'\fR should
always be used.
.PP
Because \f(CW\*(C`.\*(C'\fR was in use as a directory separator and filenames could not
be assumed to be unique after 10 characters, Acorn implemented the C
compiler to strip the trailing \f(CW\*(C`.c\*(C'\fR \f(CW\*(C`.h\*(C'\fR \f(CW\*(C`.s\*(C'\fR and \f(CW\*(C`.o\*(C'\fR suffix from
filenames specified in source code and store the respective files in
subdirectories named after the suffix.  Hence files are translated:
.PP
.Vb 6
\&    foo.h           h.foo
\&    C:foo.h         C:h.foo        (logical path variable)
\&    sys/os.h        sys.h.os       (C compiler groks Unix\-speak)
\&    10charname.c    c.10charname
\&    10charname.o    o.10charname
\&    11charname_.c   c.11charname   (assuming filesystem truncates at 10)
.Ve
.PP
The Unix emulation library's translation of filenames to native assumes
that this sort of translation is required, and it allows a user-defined list
of known suffixes that it will transpose in this fashion.  This may
seem transparent, but consider that with these rules \fIfoo/bar/baz.h\fR
and \fIfoo/bar/h/baz\fR both map to \fIfoo.bar.h.baz\fR, and that
\&\f(CW\*(C`readdir\*(C'\fR and \f(CW\*(C`glob\*(C'\fR
cannot and do not attempt to emulate the reverse mapping.  Other
\&\f(CW\*(C`.\*(C'\fR's in filenames are translated to \f(CW\*(C`/\*(C'\fR.
.PP
As implied above, the environment accessed through
\&\f(CW%ENV\fR is global, and the convention is that program
specific environment variables are of the form \f(CW\*(C`Program$Name\*(C'\fR.
Each filesystem maintains a current directory,
and the current filesystem's current directory is the \fBglobal\fR current
directory.  Consequently, sociable programs don't change the current
directory but rely on full pathnames, and programs (and Makefiles) cannot
assume that they can spawn a child process which can change the current
directory without affecting its parent (and everyone else for that
matter).
.PP
Because native operating system filehandles are global and are currently
allocated down from 255, with 0 being a reserved value, the Unix emulation
library emulates Unix filehandles.  Consequently, you can't rely on
passing \f(CW\*(C`STDIN\*(C'\fR, \f(CW\*(C`STDOUT\*(C'\fR, or \f(CW\*(C`STDERR\*(C'\fR to your children.
.PP
The desire of users to express filenames of the form
\&\f(CW\*(C`<Foo$Dir>.Bar\*(C'\fR on the command line unquoted causes problems,
too: \f(CW\`\`\fR command output capture has
to perform a guessing game.  It assumes that a string \f(CW\*(C`<[^<>]+\e$[^<>]>\*(C'\fR
is a reference to an environment variable, whereas anything else involving
\&\f(CW\*(C`<\*(C'\fR or \f(CW\*(C`>\*(C'\fR is redirection, and generally manages to be 99%
right.  Of course, the problem remains that scripts cannot rely on any
Unix tools being available, or that any tools found have Unix-like command
line arguments.
.PP
Extensions and XS are, in theory, buildable by anyone using free
tools.  In practice, many don't, as users of the Acorn platform are
used to binary distributions.  MakeMaker does run, but no available
make currently copes with MakeMaker's makefiles; even if and when
this should be fixed, the lack of a Unix-like shell will cause
problems with makefile rules, especially lines of the form
\&\f(CW\*(C`cd sdbm && make all\*(C'\fR, and anything using quoting.
.PP
"RISC\ OS" is the proper name for the operating system, but the value
in \f(CW$^O\fR is "riscos" (because we don't like shouting).
.SS "Other perls"
.IX Subsection "Other perls"
Perl has been ported to many platforms that do not fit into any of
the categories listed above.  Some, such as AmigaOS,
QNX, Plan 9, and VOS, have been well-integrated into the standard
Perl source code kit.  You may need to see the \fIports/\fR directory
on CPAN for information, and possibly binaries, for the likes of:
aos, Atari ST, lynxos, riscos, Novell Netware, Tandem Guardian,
\&\fIetc.\fR  (Yes, we know that some of these OSes may fall under the
Unix category, but we are not a standards body.)
.PP
Some approximate operating system names and their \f(CW$^O\fR
values in the "OTHER" category include:
.PP
.Vb 3
\&    OS            $^O        $Config{archname}
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    Amiga DOS     amigaos    m68k\-amigos
.Ve
.PP
See also:
.IP \(bu 4
Amiga, \fIREADME.amiga\fR (installed as perlamiga).
.IP \(bu 4
Plan\ 9, \fIREADME.plan9\fR
.SH "FUNCTION IMPLEMENTATIONS"
.IX Header "FUNCTION IMPLEMENTATIONS"
Listed below are functions that are either completely unimplemented
or else have been implemented differently on various platforms.
Preceding each description will be, in parentheses, a list of
platforms that the description applies to.
.PP
The list may well be incomplete, or even wrong in some places.  When
in doubt, consult the platform-specific README files in the Perl
source distribution, and any other documentation resources accompanying
a given port.
.PP
Be aware, moreover, that even among Unix-ish systems there are variations.
.PP
For many functions, you can also query \f(CW%Config\fR,
exported by default from the \f(CW\*(C`Config\*(C'\fR module.  For example, to
check whether the platform has the \f(CW\*(C`lstat\*(C'\fR
call, check \f(CW$Config{d_lstat}\fR.  See Config for a
full description of available variables.
.SS "Alphabetical Listing of Perl Functions"
.IX Subsection "Alphabetical Listing of Perl Functions"
.IP \-X 8
.IX Item "-X"
(Win32)
\&\f(CW\*(C`\-w\*(C'\fR only inspects the read-only file attribute (FILE_ATTRIBUTE_READONLY),
which determines whether the directory can be deleted, not whether it can
be written to. Directories always have read and write access unless denied
by discretionary access control lists (DACLs).
.Sp
(VMS)
\&\f(CW\*(C`\-r\*(C'\fR, \f(CW\*(C`\-w\*(C'\fR, \f(CW\*(C`\-x\*(C'\fR, and \f(CW\*(C`\-o\*(C'\fR tell whether the file is accessible,
which may not reflect UIC-based file protections.
.Sp
(RISC\ OS)
\&\f(CW\*(C`\-s\*(C'\fR by name on an open file will return the space reserved on disk,
rather than the current extent.  \f(CW\*(C`\-s\*(C'\fR on an open filehandle returns the
current size.
.Sp
(Win32, VMS, RISC\ OS)
\&\f(CW\*(C`\-R\*(C'\fR, \f(CW\*(C`\-W\*(C'\fR, \f(CW\*(C`\-X\*(C'\fR, \f(CW\*(C`\-O\*(C'\fR are indistinguishable from \f(CW\*(C`\-r\*(C'\fR, \f(CW\*(C`\-w\*(C'\fR,
\&\f(CW\*(C`\-x\*(C'\fR, \f(CW\*(C`\-o\*(C'\fR.
.Sp
(Win32, VMS, RISC\ OS)
\&\f(CW\*(C`\-g\*(C'\fR, \f(CW\*(C`\-k\*(C'\fR, \f(CW\*(C`\-u\*(C'\fR, \f(CW\*(C`\-A\*(C'\fR are not particularly meaningful.
.Sp
(VMS, RISC\ OS)
\&\f(CW\*(C`\-l\*(C'\fR is not particularly meaningful.
.Sp
(Win32)
\&\f(CW\*(C`\-l\*(C'\fR returns true for both symlinks and directory junctions.
.Sp
(VMS, RISC\ OS)
\&\f(CW\*(C`\-p\*(C'\fR is not particularly meaningful.
.Sp
(VMS)
\&\f(CW\*(C`\-d\*(C'\fR is true if passed a device spec without an explicit directory.
.Sp
(Win32)
\&\f(CW\*(C`\-x\*(C'\fR (or \f(CW\*(C`\-X\*(C'\fR) determine if a file ends in one of the executable
suffixes.
.Sp
(RISC\ OS)
\&\f(CW\*(C`\-x\*(C'\fR (or \f(CW\*(C`\-X\*(C'\fR) determine if a file has an executable file type.
.IP alarm 8
.IX Item "alarm"
(Win32)
Emulated using timers that must be explicitly polled whenever Perl
wants to dispatch "safe signals" and therefore cannot interrupt
blocking system calls.
.IP atan2 8
.IX Item "atan2"
(Tru64, HP-UX 10.20)
Due to issues with various CPUs, math libraries, compilers, and standards,
results for \f(CW\*(C`atan2\*(C'\fR may vary depending on any combination of the above.
Perl attempts to conform to the Open Group/IEEE standards for the results
returned from \f(CW\*(C`atan2\*(C'\fR, but cannot force the issue if the system Perl is
run on does not allow it.
.Sp
The current version of the standards for \f(CW\*(C`atan2\*(C'\fR is available at
<http://www.opengroup.org/onlinepubs/009695399/functions/atan2.html>.
.IP binmode 8
.IX Item "binmode"
(RISC\ OS)
Meaningless.
.Sp
(VMS)
Reopens file and restores pointer; if function fails, underlying
filehandle may be closed, or pointer may be in a different position.
.Sp
(Win32)
The value returned by \f(CW\*(C`tell\*(C'\fR may be affected
after the call, and the filehandle may be flushed.
.IP chdir 8
.IX Item "chdir"
(Win32)
The current directory reported by the system may include any symbolic
links specified to \fBchdir()\fR.
.IP chmod 8
.IX Item "chmod"
(Win32)
Only good for changing "owner" read-write access; "group" and "other"
bits are meaningless.
.Sp
(RISC\ OS)
Only good for changing "owner" and "other" read-write access.
.Sp
(VOS)
Access permissions are mapped onto VOS access-control list changes.
.Sp
(Cygwin)
The actual permissions set depend on the value of the \f(CW\*(C`CYGWIN\*(C'\fR variable
in the SYSTEM environment settings.
.Sp
(Android)
Setting the exec bit on some locations (generally \fI/sdcard\fR) will return true
but not actually set the bit.
.Sp
(VMS)
A mode argument of zero sets permissions to the user's default permission mask
rather than disabling all permissions.
.IP chown 8
.IX Item "chown"
(Plan\ 9, RISC\ OS)
Not implemented.
.Sp
(Win32)
Does nothing, but won't fail.
.Sp
(VOS)
A little funky, because VOS's notion of ownership is a little funky.
.IP chroot 8
.IX Item "chroot"
(Win32, VMS, Plan\ 9, RISC\ OS, VOS)
Not implemented.
.IP crypt 8
.IX Item "crypt"
(Win32)
May not be available if library or source was not provided when building
perl.
.Sp
(Android)
Not implemented.
.IP dbmclose 8
.IX Item "dbmclose"
(VMS, Plan\ 9, VOS)
Not implemented.
.IP dbmopen 8
.IX Item "dbmopen"
(VMS, Plan\ 9, VOS)
Not implemented.
.IP dump 8
.IX Item "dump"
(RISC\ OS)
Not useful.
.Sp
(Cygwin, Win32)
Not supported.
.Sp
(VMS)
Invokes VMS debugger.
.IP exec 8
.IX Item "exec"
(Win32)
\&\f(CW\*(C`exec LIST\*(C'\fR without the use of indirect object syntax (\f(CW\*(C`exec PROGRAM LIST\*(C'\fR)
may fall back to trying the shell if the first \f(CWspawn()\fR fails.
.Sp
Note that the list form of \fBexec()\fR is emulated since the Win32 API
\&\fBCreateProcess()\fR accepts a simple string rather than an array of
command-line arguments.  This may have security implications for your
code.
.Sp
(SunOS, Solaris, HP-UX)
Does not automatically flush output handles on some platforms.
.IP exit 8
.IX Item "exit"
(VMS)
Emulates Unix \f(CW\*(C`exit\*(C'\fR (which considers \f(CW\*(C`exit 1\*(C'\fR to indicate an error) by
mapping the \f(CW1\fR to \f(CW\*(C`SS$_ABORT\*(C'\fR (\f(CW44\fR).  This behavior may be overridden
with the pragma \f(CW\*(C`use vmsish \*(Aqexit\*(Aq\*(C'\fR.  As with
the CRTL's \f(CWexit()\fR function, \f(CW\*(C`exit 0\*(C'\fR is also mapped to an exit status
of \f(CW\*(C`SS$_NORMAL\*(C'\fR (\f(CW1\fR); this mapping cannot be overridden.  Any other
argument to \f(CW\*(C`exit\*(C'\fR
is used directly as Perl's exit status.  On VMS, unless the future
POSIX_EXIT mode is enabled, the exit code should always be a valid
VMS exit code and not a generic number.  When the POSIX_EXIT mode is
enabled, a generic number will be encoded in a method compatible with
the C library _POSIX_EXIT macro so that it can be decoded by other
programs, particularly ones written in C, like the GNV package.
.Sp
(Solaris)
\&\f(CW\*(C`exit\*(C'\fR resets file pointers, which is a problem when called
from a child process (created by \f(CW\*(C`fork\*(C'\fR) in
\&\f(CW\*(C`BEGIN\*(C'\fR.
A workaround is to use \f(CW\*(C`POSIX::_exit\*(C'\fR.
.Sp
.Vb 3
\&    exit unless $Config{archname} =~ /\ebsolaris\eb/;
\&    require POSIX;
\&    POSIX::_exit(0);
.Ve
.IP fcntl 8
.IX Item "fcntl"
(Win32)
Not implemented.
.Sp
(VMS)
Some functions available based on the version of VMS.
.IP flock 8
.IX Item "flock"
(VMS, RISC\ OS, VOS)
Not implemented.
.IP fork 8
.IX Item "fork"
(AmigaOS, RISC\ OS, VMS)
Not implemented.
.Sp
(Win32)
Emulated using multiple interpreters.  See perlfork.
.Sp
(SunOS, Solaris, HP-UX)
Does not automatically flush output handles on some platforms.
.IP getlogin 8
.IX Item "getlogin"
(RISC\ OS)
Not implemented.
.IP getpgrp 8
.IX Item "getpgrp"
(Win32, VMS, RISC\ OS)
Not implemented.
.IP getppid 8
.IX Item "getppid"
(Win32, RISC\ OS)
Not implemented.
.IP getpriority 8
.IX Item "getpriority"
(Win32, VMS, RISC\ OS, VOS)
Not implemented.
.IP getpwnam 8
.IX Item "getpwnam"
(Win32)
Not implemented.
.Sp
(RISC\ OS)
Not useful.
.IP getgrnam 8
.IX Item "getgrnam"
(Win32, VMS, RISC\ OS)
Not implemented.
.IP getnetbyname 8
.IX Item "getnetbyname"
(Android, Win32, Plan\ 9)
Not implemented.
.IP getpwuid 8
.IX Item "getpwuid"
(Win32)
Not implemented.
.Sp
(RISC\ OS)
Not useful.
.IP getgrgid 8
.IX Item "getgrgid"
(Win32, VMS, RISC\ OS)
Not implemented.
.IP getnetbyaddr 8
.IX Item "getnetbyaddr"
(Android, Win32, Plan\ 9)
Not implemented.
.IP getprotobynumber 8
.IX Item "getprotobynumber"
(Android)
Not implemented.
.IP getpwent 8
.IX Item "getpwent"
(Android, Win32)
Not implemented.
.IP getgrent 8
.IX Item "getgrent"
(Android, Win32, VMS)
Not implemented.
.IP gethostbyname 8
.IX Item "gethostbyname"
(Irix\ 5)
\&\f(CWgethostbyname(\*(Aqlocalhost\*(Aq)\fR does not work everywhere: you may have
to use \f(CWgethostbyname(\*(Aq127.0.0.1\*(Aq)\fR.
.IP gethostent 8
.IX Item "gethostent"
(Win32)
Not implemented.
.IP getnetent 8
.IX Item "getnetent"
(Android, Win32, Plan\ 9)
Not implemented.
.IP getprotoent 8
.IX Item "getprotoent"
(Android, Win32, Plan\ 9)
Not implemented.
.IP getservent 8
.IX Item "getservent"
(Win32, Plan\ 9)
Not implemented.
.IP seekdir 8
.IX Item "seekdir"
(Android)
Not implemented.
.IP sethostent 8
.IX Item "sethostent"
(Android, Win32, Plan\ 9, RISC\ OS)
Not implemented.
.IP setnetent 8
.IX Item "setnetent"
(Win32, Plan\ 9, RISC\ OS)
Not implemented.
.IP setprotoent 8
.IX Item "setprotoent"
(Android, Win32, Plan\ 9, RISC\ OS)
Not implemented.
.IP setservent 8
.IX Item "setservent"
(Plan\ 9, Win32, RISC\ OS)
Not implemented.
.IP endpwent 8
.IX Item "endpwent"
(Win32)
Not implemented.
.Sp
(Android)
Either not implemented or a no-op.
.IP endgrent 8
.IX Item "endgrent"
(Android, RISC\ OS, VMS, Win32)
Not implemented.
.IP endhostent 8
.IX Item "endhostent"
(Android, Win32)
Not implemented.
.IP endnetent 8
.IX Item "endnetent"
(Android, Win32, Plan\ 9)
Not implemented.
.IP endprotoent 8
.IX Item "endprotoent"
(Android, Win32, Plan\ 9)
Not implemented.
.IP endservent 8
.IX Item "endservent"
(Plan\ 9, Win32)
Not implemented.
.IP getsockopt 8
.IX Item "getsockopt"
(Plan\ 9)
Not implemented.
.IP glob 8
.IX Item "glob"
This operator is implemented via the \f(CW\*(C`File::Glob\*(C'\fR extension
on most platforms.  See File::Glob for portability information.
.IP gmtime 8
.IX Item "gmtime"
In theory, \f(CW\*(C`gmtime\*(C'\fR is reliable from \-2**63 to 2**63\-1.  However,
because work-arounds in the implementation use floating point numbers,
it will become inaccurate as the time gets larger.  This is a bug and
will be fixed in the future.
.Sp
(VOS)
Time values are 32\-bit quantities.
.IP ioctl 8
.IX Item "ioctl"
(VMS)
Not implemented.
.Sp
(Win32)
Available only for socket handles, and it does what the \f(CWioctlsocket()\fR call
in the Winsock API does.
.Sp
(RISC\ OS)
Available only for socket handles.
.IP kill 8
.IX Item "kill"
(RISC\ OS)
Not implemented, hence not useful for taint checking.
.Sp
(Win32)
\&\f(CW\*(C`kill\*(C'\fR doesn't send a signal to the identified process like it does on
Unix platforms.  Instead \f(CW\*(C`kill($sig, $pid)\*(C'\fR terminates the process
identified by \f(CW$pid\fR, and makes it exit immediately with exit status
\&\f(CW$sig\fR.  As in Unix, if \f(CW$sig\fR is 0 and the specified process exists, it
returns true without actually terminating it.
.Sp
(Win32)
\&\f(CW\*(C`kill(\-9, $pid)\*(C'\fR will terminate the process specified by \f(CW$pid\fR and
recursively all child processes owned by it.  This is different from
the Unix semantics, where the signal will be delivered to all
processes in the same process group as the process specified by
\&\f(CW$pid\fR.
.Sp
(VMS)
A pid of \-1 indicating all processes on the system is not currently
supported.
.IP link 8
.IX Item "link"
(RISC\ OS, VOS)
Not implemented.
.Sp
(AmigaOS)
Link count not updated because hard links are not quite that hard
(They are sort of half-way between hard and soft links).
.Sp
(Win32)
Hard links are implemented on Win32 under NTFS only. They are
natively supported on Windows 2000 and later.  On Windows NT they
are implemented using the Windows POSIX subsystem support and the
Perl process will need Administrator or Backup Operator privileges
to create hard links.
.Sp
(VMS)
Available on 64 bit OpenVMS 8.2 and later.
.IP localtime 8
.IX Item "localtime"
\&\f(CW\*(C`localtime\*(C'\fR has the same range as "gmtime", but because time zone
rules change, its accuracy for historical and future times may degrade
but usually by no more than an hour.
.IP lstat 8
.IX Item "lstat"
(RISC\ OS)
Not implemented.
.Sp
(Win32)
Treats directory junctions as symlinks.
.IP msgctl 8
.IX Item "msgctl"
.PD 0
.IP msgget 8
.IX Item "msgget"
.IP msgsnd 8
.IX Item "msgsnd"
.IP msgrcv 8
.IX Item "msgrcv"
.PD
(Android, Win32, VMS, Plan\ 9, RISC\ OS, VOS)
Not implemented.
.IP open 8
.IX Item "open"
(RISC\ OS)
Open modes \f(CW\*(C`|\-\*(C'\fR and \f(CW\*(C`\-|\*(C'\fR are unsupported.
.Sp
(SunOS, Solaris, HP-UX)
Opening a process does not automatically flush output handles on some
platforms.
.Sp
(Win32)
Both of modes \f(CW\*(C`|\-\*(C'\fR and \f(CW\*(C`\-|\*(C'\fR are supported, but the list form is
emulated since the Win32 API \fBCreateProcess()\fR accepts a simple string
rather than an array of arguments.  This may have security
implications for your code.
.IP readlink 8
.IX Item "readlink"
(VMS, RISC\ OS)
Not implemented.
.Sp
(Win32)
\&\fBreadlink()\fR on a directory junction returns the object name, not a
simple path.
.IP rename 8
.IX Item "rename"
(Win32)
Can't move directories between directories on different logical volumes.
.IP rewinddir 8
.IX Item "rewinddir"
(Win32)
Will not cause \f(CW\*(C`readdir\*(C'\fR to re-read the
directory stream.  The entries already read before the \f(CW\*(C`rewinddir\*(C'\fR call
will just be returned again from a cache buffer.
.IP select 8
.IX Item "select"
(Win32, VMS)
Only implemented on sockets.
.Sp
(RISC\ OS)
Only reliable on sockets.
.Sp
Note that the \f(CW\*(C`select FILEHANDLE\*(C'\fR form is
generally portable.
.IP semctl 8
.IX Item "semctl"
.PD 0
.IP semget 8
.IX Item "semget"
.IP semop 8
.IX Item "semop"
.PD
(Android, Win32, VMS, RISC\ OS)
Not implemented.
.IP setgrent 8
.IX Item "setgrent"
(Android, VMS, Win32, RISC\ OS)
Not implemented.
.IP setpgrp 8
.IX Item "setpgrp"
(Win32, VMS, RISC\ OS, VOS)
Not implemented.
.IP setpriority 8
.IX Item "setpriority"
(Win32, VMS, RISC\ OS, VOS)
Not implemented.
.IP setpwent 8
.IX Item "setpwent"
(Android, Win32, RISC\ OS)
Not implemented.
.IP setsockopt 8
.IX Item "setsockopt"
(Plan\ 9)
Not implemented.
.IP shmctl 8
.IX Item "shmctl"
.PD 0
.IP shmget 8
.IX Item "shmget"
.IP shmread 8
.IX Item "shmread"
.IP shmwrite 8
.IX Item "shmwrite"
.PD
(Android, Win32, VMS, RISC\ OS)
Not implemented.
.IP sleep 8
.IX Item "sleep"
(Win32)
Emulated using synchronization functions such that it can be
interrupted by \f(CW\*(C`alarm\*(C'\fR, and limited to a
maximum of 4294967 seconds, approximately 49 days.
.IP socketpair 8
.IX Item "socketpair"
(RISC\ OS)
Not implemented.
.Sp
(VMS)
Available on 64 bit OpenVMS 8.2 and later.
.IP stat 8
.IX Item "stat"
Platforms that do not have \f(CW\*(C`rdev\*(C'\fR, \f(CW\*(C`blksize\*(C'\fR, or \f(CW\*(C`blocks\*(C'\fR will return
these as \f(CW\*(Aq\*(Aq\fR, so numeric comparison or manipulation of these fields may
cause 'not numeric' warnings.
.Sp
(Mac\ OS\ X)
\&\f(CW\*(C`ctime\*(C'\fR not supported on UFS.
.Sp
(Win32)
\&\f(CW\*(C`ctime\*(C'\fR is creation time instead of inode change time.
.Sp
(VMS)
\&\f(CW\*(C`dev\*(C'\fR and \f(CW\*(C`ino\*(C'\fR are not necessarily reliable.
.Sp
(RISC\ OS)
\&\f(CW\*(C`mtime\*(C'\fR, \f(CW\*(C`atime\*(C'\fR and \f(CW\*(C`ctime\*(C'\fR all return the last modification time.
\&\f(CW\*(C`dev\*(C'\fR and \f(CW\*(C`ino\*(C'\fR are not necessarily reliable.
.Sp
(OS/2)
\&\f(CW\*(C`dev\*(C'\fR, \f(CW\*(C`rdev\*(C'\fR, \f(CW\*(C`blksize\*(C'\fR, and \f(CW\*(C`blocks\*(C'\fR are not available.  \f(CW\*(C`ino\*(C'\fR is not
meaningful and will differ between stat calls on the same file.
.Sp
(Cygwin)
Some versions of cygwin when doing a \f(CWstat("foo")\fR and not finding it
may then attempt to \f(CWstat("foo.exe")\fR.
.IP symlink 8
.IX Item "symlink"
(RISC\ OS)
Not implemented.
.Sp
(Win32)
Requires either elevated permissions or developer mode and a
sufficiently recent version of Windows 10. You can check whether the current
process has the required privileges using the
\&\fBWin32::IsSymlinkCreationAllowed()\fR
function.
.Sp
Since Windows needs to know whether the target is a directory or not when
creating the link the target Perl will only create the link as a directory
link when the target exists and is a directory.
.Sp
Windows does not recognize forward slashes as path separators in
symbolic links.  Hence on Windows, any \f(CW\*(C`/\*(C'\fR in the \fIOLDFILE\fR
parameter to \fBsymlink()\fR are converted to \f(CW\*(C`\e\*(C'\fR.  This is reflected in
the result returned by \fBreadlink()\fR, the \f(CW\*(C`\e\*(C'\fR in the result are not
converted back to \f(CW\*(C`/\*(C'\fR.
.Sp
(VMS)
Implemented on 64 bit VMS 8.3.  VMS requires the symbolic link to be in Unix
syntax if it is intended to resolve to a valid path.
.IP syscall 8
.IX Item "syscall"
(Win32, VMS, RISC\ OS, VOS)
Not implemented.
.IP sysopen 8
.IX Item "sysopen"
(Mac\ OS, OS/390)
The traditional \f(CW0\fR, \f(CW1\fR, and \f(CW2\fR MODEs are implemented with different
numeric values on some systems.  The flags exported by \f(CW\*(C`Fcntl\*(C'\fR
(\f(CW\*(C`O_RDONLY\*(C'\fR, \f(CW\*(C`O_WRONLY\*(C'\fR, \f(CW\*(C`O_RDWR\*(C'\fR) should work everywhere though.
.IP system 8
.IX Item "system"
(Win32)
As an optimization, may not call the command shell specified in
\&\f(CW$ENV{PERL5SHELL}\fR.  \f(CW\*(C`system(1, @args)\*(C'\fR spawns an external
process and immediately returns its process designator, without
waiting for it to terminate.  Return value may be used subsequently
in \f(CW\*(C`wait\*(C'\fR or \f(CW\*(C`waitpid\*(C'\fR.
Failure to \f(CWspawn()\fR a subprocess is indicated by setting
\&\f(CW$?\fR to \f(CW\*(C`255 << 8\*(C'\fR.  \f(CW$?\fR is set in a
way compatible with Unix (i.e. the exit status of the subprocess is
obtained by \f(CW\*(C`$? >> 8\*(C'\fR, as described in the documentation).
.Sp
Note that the list form of \fBsystem()\fR is emulated since the Win32 API
\&\fBCreateProcess()\fR accepts a simple string rather than an array of
command-line arguments.  This may have security implications for your
code.
.Sp
(RISC\ OS)
There is no shell to process metacharacters, and the native standard is
to pass a command line terminated by "\en" "\er" or "\e0" to the spawned
program.  Redirection such as \f(CW\*(C`> foo\*(C'\fR is performed (if at all) by
the run time library of the spawned program.  \f(CW\*(C`system LIST\*(C'\fR will call
the Unix emulation library's \f(CW\*(C`exec\*(C'\fR emulation,
which attempts to provide emulation of the stdin, stdout, stderr in force
in the parent, provided the child program uses a compatible version of the
emulation library.  \f(CW\*(C`system SCALAR\*(C'\fR will call the native command line
directly and no such emulation of a child Unix program will occur.
Mileage \fBwill\fR vary.
.Sp
(Win32)
\&\f(CW\*(C`system LIST\*(C'\fR without the use of indirect object syntax (\f(CW\*(C`system PROGRAM LIST\*(C'\fR)
may fall back to trying the shell if the first \f(CWspawn()\fR fails.
.Sp
(SunOS, Solaris, HP-UX)
Does not automatically flush output handles on some platforms.
.Sp
(VMS)
As with Win32, \f(CW\*(C`system(1, @args)\*(C'\fR spawns an external process and
immediately returns its process designator without waiting for the
process to terminate.  In this case the return value may be used subsequently
in \f(CW\*(C`wait\*(C'\fR or \f(CW\*(C`waitpid\*(C'\fR.
Otherwise the return value is POSIX-like (shifted up by 8 bits), which only
allows room for a made-up value derived from the severity bits of the native
32\-bit condition code (unless overridden by
\&\f(CW\*(C`use vmsish \*(Aqstatus\*(Aq\*(C'\fR).  If the native
condition code is one that has a POSIX value encoded, the POSIX value will
be decoded to extract the expected exit value.  For more details see
"$?" in perlvms.
.IP telldir 8
.IX Item "telldir"
(Android)
Not implemented.
.IP times 8
.IX Item "times"
(Win32)
"Cumulative" times will be bogus.  On anything other than Windows NT
or Windows 2000, "system" time will be bogus, and "user" time is
actually the time returned by the \f(CWclock()\fR function in the C
runtime library.
.Sp
(RISC\ OS)
Not useful.
.IP truncate 8
.IX Item "truncate"
(Older versions of VMS)
Not implemented.
.Sp
(VOS)
Truncation to same-or-shorter lengths only.
.Sp
(Win32)
If a FILEHANDLE is supplied, it must be writable and opened in append
mode (i.e., use \f(CW\*(C`open(my $fh, \*(Aq>>\*(Aq, \*(Aqfilename\*(Aq)\*(C'\fR
or \f(CW\*(C`sysopen(my $fh, ..., O_APPEND|O_RDWR)\*(C'\fR.  If a filename is supplied, it
should not be held open elsewhere.
.IP umask 8
.IX Item "umask"
Returns \f(CW\*(C`undef\*(C'\fR where unavailable.
.Sp
(AmigaOS)
\&\f(CW\*(C`umask\*(C'\fR works but the correct permissions are set only when the file
is finally closed.
.IP utime 8
.IX Item "utime"
(VMS, RISC\ OS)
Only the modification time is updated.
.Sp
(Win32)
May not behave as expected.  Behavior depends on the C runtime
library's implementation of \f(CWutime()\fR, and the filesystem
being used.  The FAT filesystem typically does not support an "access
time" field, and it may limit timestamps to a granularity of two seconds.
.IP wait 8
.IX Item "wait"
.PD 0
.IP waitpid 8
.IX Item "waitpid"
.PD
(Win32)
Can only be applied to process handles returned for processes spawned
using \f(CW\*(C`system(1, ...)\*(C'\fR or pseudo processes created with
\&\f(CW\*(C`fork\*(C'\fR.
.Sp
(RISC\ OS)
Not useful.
.SH "Supported Platforms"
.IX Header "Supported Platforms"
The following platforms are known to build Perl 5.12 (as of April 2010,
its release date) from the standard source code distribution available
at <http://www.cpan.org/src>
.IP "Linux (x86, ARM, IA64)" 4
.IX Item "Linux (x86, ARM, IA64)"
.PD 0
.IP HP-UX 4
.IX Item "HP-UX"
.IP AIX 4
.IX Item "AIX"
.IP Win32 4
.IX Item "Win32"
.RS 4
.IP "Windows 2000" 4
.IX Item "Windows 2000"
.IP "Windows XP" 4
.IX Item "Windows XP"
.IP "Windows Server 2003" 4
.IX Item "Windows Server 2003"
.IP "Windows Vista" 4
.IX Item "Windows Vista"
.IP "Windows Server 2008" 4
.IX Item "Windows Server 2008"
.IP "Windows 7" 4
.IX Item "Windows 7"
.RE
.RS 4
.RE
.IP Cygwin 4
.IX Item "Cygwin"
.PD
Some tests are known to fail:
.RS 4
.IP \(bu 4
\&\fIext/XS\-APItest/t/call_checker.t\fR \- see
<https://github.com/Perl/perl5/issues/10750>
.IP \(bu 4
\&\fIdist/I18N\-Collate/t/I18N\-Collate.t\fR
.IP \(bu 4
\&\fIext/Win32CORE/t/win32core.t\fR \- may fail on recent cygwin installs.
.RE
.RS 4
.RE
.IP "Solaris (x86, SPARC)" 4
.IX Item "Solaris (x86, SPARC)"
.PD 0
.IP OpenVMS 4
.IX Item "OpenVMS"
.RS 4
.IP "Alpha (7.2 and later)" 4
.IX Item "Alpha (7.2 and later)"
.IP "I64 (8.2 and later)" 4
.IX Item "I64 (8.2 and later)"
.RE
.RS 4
.RE
.IP NetBSD 4
.IX Item "NetBSD"
.IP FreeBSD 4
.IX Item "FreeBSD"
.IP "Debian GNU/kFreeBSD" 4
.IX Item "Debian GNU/kFreeBSD"
.IP Haiku 4
.IX Item "Haiku"
.IP "Irix (6.5. What else?)" 4
.IX Item "Irix (6.5. What else?)"
.IP OpenBSD 4
.IX Item "OpenBSD"
.IP "Dragonfly BSD" 4
.IX Item "Dragonfly BSD"
.IP "Midnight BSD" 4
.IX Item "Midnight BSD"
.IP "QNX Neutrino RTOS (6.5.0)" 4
.IX Item "QNX Neutrino RTOS (6.5.0)"
.IP "MirOS BSD" 4
.IX Item "MirOS BSD"
.IP "Stratus OpenVOS (17.0 or later)" 4
.IX Item "Stratus OpenVOS (17.0 or later)"
.PD
Caveats:
.RS 4
.IP "time_t issues that may or may not be fixed" 4
.IX Item "time_t issues that may or may not be fixed"
.RE
.RS 4
.RE
.PD 0
.IP "Stratus VOS / OpenVOS" 4
.IX Item "Stratus VOS / OpenVOS"
.IP AIX 4
.IX Item "AIX"
.IP Android 4
.IX Item "Android"
.IP FreeMINT 4
.IX Item "FreeMINT"
.PD
Perl now builds with FreeMiNT/Atari. It fails a few tests, that needs
some investigation.
.Sp
The FreeMiNT port uses GNU dld for loadable module capabilities. So
ensure you have that library installed when building perl.
.SH "EOL Platforms"
.IX Header "EOL Platforms"
.SS "(Perl 5.37.1)"
.IX Subsection "(Perl 5.37.1)"
The following platforms were supported by a previous version of
Perl but have been officially removed from Perl's source code
as of 5.37.1:
.IP Ultrix 4
.IX Item "Ultrix"
.SS "(Perl 5.36)"
.IX Subsection "(Perl 5.36)"
The following platforms were supported by a previous version of
Perl but have been officially removed from Perl's source code
as of 5.36:
.IP NetWare 4
.IX Item "NetWare"
.PD 0
.IP DOS/DJGPP 4
.IX Item "DOS/DJGPP"
.IP "AT&T UWIN" 4
.IX Item "AT&T UWIN"
.PD
.SS "(Perl 5.20)"
.IX Subsection "(Perl 5.20)"
The following platforms were supported by a previous version of
Perl but have been officially removed from Perl's source code
as of 5.20:
.IP "AT&T 3b1" 4
.IX Item "AT&T 3b1"
.SS "(Perl 5.14)"
.IX Subsection "(Perl 5.14)"
The following platforms were supported up to 5.10.  They may still
have worked in 5.12, but supporting code has been removed for 5.14:
.IP "Windows 95" 4
.IX Item "Windows 95"
.PD 0
.IP "Windows 98" 4
.IX Item "Windows 98"
.IP "Windows ME" 4
.IX Item "Windows ME"
.IP "Windows NT4" 4
.IX Item "Windows NT4"
.PD
.SS "(Perl 5.12)"
.IX Subsection "(Perl 5.12)"
The following platforms were supported by a previous version of
Perl but have been officially removed from Perl's source code
as of 5.12:
.IP "Atari MiNT" 4
.IX Item "Atari MiNT"
.PD 0
.IP "Apollo Domain/OS" 4
.IX Item "Apollo Domain/OS"
.IP "Apple Mac OS 8/9" 4
.IX Item "Apple Mac OS 8/9"
.IP "Tenon Machten" 4
.IX Item "Tenon Machten"
.PD
.SH "Supported Platforms (Perl 5.8)"
.IX Header "Supported Platforms (Perl 5.8)"
As of July 2002 (the Perl release 5.8.0), the following platforms were
able to build Perl from the standard source code distribution
available at <http://www.cpan.org/src/>
.PP
.Vb 10
\&        AIX
\&        BeOS
\&        BSD/OS          (BSDi)
\&        Cygwin
\&        DG/UX
\&        DOS DJGPP       1)
\&        DYNIX/ptx
\&        EPOC R5
\&        FreeBSD
\&        HI\-UXMPP        (Hitachi) (5.8.0 worked but we didn\*(Aqt know it)
\&        HP\-UX
\&        IRIX
\&        Linux
\&        Mac OS Classic
\&        Mac OS X        (Darwin)
\&        MPE/iX
\&        NetBSD
\&        NetWare
\&        NonStop\-UX
\&        ReliantUNIX     (formerly SINIX)
\&        OpenBSD
\&        OpenVMS         (formerly VMS)
\&        Open UNIX       (Unixware) (since Perl 5.8.1/5.9.0)
\&        OS/2
\&        OS/400          (using the PASE) (since Perl 5.8.1/5.9.0)
\&        POSIX\-BC        (formerly BS2000)
\&        QNX
\&        Solaris
\&        SunOS 4
\&        SUPER\-UX        (NEC)
\&        Tru64 UNIX      (formerly DEC OSF/1, Digital UNIX)
\&        UNICOS
\&        UNICOS/mk
\&        UTS
\&        VOS / OpenVOS
\&        Win95/98/ME/2K/XP 2)
\&        WinCE
\&        z/OS            (formerly OS/390)
\&        VM/ESA
\&
\&        1) in DOS mode either the DOS or OS/2 ports can be used
\&        2) compilers: Borland, MinGW (GCC), VC6
.Ve
.PP
The following platforms worked with the previous releases (5.6 and
5.7), but we did not manage either to fix or to test these in time
for the 5.8.0 release.  There is a very good chance that many of these
will work fine with the 5.8.0.
.PP
.Vb 10
\&        BSD/OS
\&        DomainOS
\&        Hurd
\&        LynxOS
\&        MachTen
\&        PowerMAX
\&        SCO SV
\&        SVR4
\&        Unixware
\&        Windows 3.1
.Ve
.PP
Known to be broken for 5.8.0 (but 5.6.1 and 5.7.2 can be used):
.PP
.Vb 1
\&        AmigaOS 3
.Ve
.PP
The following platforms have been known to build Perl from source in
the past (5.005_03 and earlier), but we haven't been able to verify
their status for the current release, either because the
hardware/software platforms are rare or because we don't have an
active champion on these platforms\-\-or both.  They used to work,
though, so go ahead and try compiling them, and let
<https://github.com/Perl/perl5/issues> know
of any trouble.
.PP
.Vb 10
\&        3b1
\&        A/UX
\&        ConvexOS
\&        CX/UX
\&        DC/OSx
\&        DDE SMES
\&        DOS EMX
\&        Dynix
\&        EP/IX
\&        ESIX
\&        FPS
\&        GENIX
\&        Greenhills
\&        ISC
\&        MachTen 68k
\&        MPC
\&        NEWS\-OS
\&        NextSTEP
\&        OpenSTEP
\&        Opus
\&        Plan 9
\&        RISC/os
\&        SCO ODT/OSR
\&        Stellar
\&        SVR2
\&        TI1500
\&        TitanOS
\&        Unisys Dynix
.Ve
.PP
The following platforms have their own source code distributions and
binaries available via <http://www.cpan.org/ports/>
.PP
.Vb 1
\&                                Perl release
\&
\&        OS/400 (ILE)            5.005_02
\&        Tandem Guardian         5.004
.Ve
.PP
The following platforms have only binaries available via
<http://www.cpan.org/ports/index.html> :
.PP
.Vb 1
\&                                Perl release
\&
\&        Acorn RISCOS            5.005_02
\&        AOS                     5.002
\&        LynxOS                  5.004_02
.Ve
.PP
Although we do suggest that you always build your own Perl from
the source code, both for maximal configurability and for security,
in case you are in a hurry you can check
<http://www.cpan.org/ports/index.html> for binary distributions.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perlaix, perlamiga, perlbs2000,
perlcygwin,
perlebcdic, perlfreebsd, perlhurd, perlhpux, perlirix,
perlmacosx,
perlos2, perlos390, perlos400,
perlplan9, perlqnx, perlsolaris, perltru64,
perlunicode, perlvms, perlvos, perlwin32, and Win32.
.SH "AUTHORS / CONTRIBUTORS"
.IX Header "AUTHORS / CONTRIBUTORS"
Abigail <abigail@abigail.be>,
Charles Bailey <bailey@newman.upenn.edu>,
Graham Barr <gbarr@pobox.com>,
Tom Christiansen <tchrist@perl.com>,
Nicholas Clark <nick@ccl4.org>,
Thomas Dorner <Thomas.Dorner@start.de>,
Andy Dougherty <doughera@lafayette.edu>,
Dominic Dunlop <domo@computer.org>,
Neale Ferguson <neale@vma.tabnsw.com.au>,
David J. Fiander <davidf@mks.com>,
Paul Green <Paul.Green@stratus.com>,
M.J.T. Guy <mjtg@cam.ac.uk>,
Jarkko Hietaniemi <jhi@iki.fi>,
Luther Huffman <lutherh@stratcom.com>,
Nick Ing-Simmons <nick@ing\-simmons.net>,
Andreas J. König <a.koenig@mind.de>,
Markus Laker <mlaker@contax.co.uk>,
Andrew M. Langmead <aml@world.std.com>,
Lukas Mai <l.mai@web.de>,
Larry Moore <ljmoore@freespace.net>,
Paul Moore <Paul.Moore@uk.origin\-it.com>,
Chris Nandor <pudge@pobox.com>,
Matthias Neeracher <neeracher@mac.com>,
Philip Newton <pne@cpan.org>,
Gary Ng <71564.1743@CompuServe.COM>,
Tom Phoenix <rootbeer@teleport.com>,
André Pirard <A.Pirard@ulg.ac.be>,
Peter Prymmer <pvhp@forte.com>,
Hugo van der Sanden <hv@crypt0.demon.co.uk>,
Gurusamy Sarathy <gsar@activestate.com>,
Paul J. Schinder <schinder@pobox.com>,
Michael G Schwern <schwern@pobox.com>,
Dan Sugalski <dan@sidhe.org>,
Nathan Torkington <gnat@frii.com>,
John Malmberg <wb8tyw@qsl.net>
